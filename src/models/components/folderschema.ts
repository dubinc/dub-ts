/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Type = {
  Default: "default",
  Mega: "mega",
} as const;
export type Type = ClosedEnum<typeof Type>;

/**
 * The access level of the folder within the workspace.
 */
export const AccessLevel = {
  Write: "write",
  Read: "read",
} as const;
/**
 * The access level of the folder within the workspace.
 */
export type AccessLevel = ClosedEnum<typeof AccessLevel>;

export type FolderSchema = {
  /**
   * The unique ID of the folder.
   */
  id: string;
  /**
   * The name of the folder.
   */
  name: string;
  type: Type;
  /**
   * The access level of the folder within the workspace.
   */
  accessLevel?: AccessLevel | null | undefined;
  /**
   * The date the folder was created.
   */
  createdAt: string;
  /**
   * The date the folder was updated.
   */
  updatedAt: string;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const AccessLevel$inboundSchema: z.ZodNativeEnum<typeof AccessLevel> = z
  .nativeEnum(AccessLevel);

/** @internal */
export const AccessLevel$outboundSchema: z.ZodNativeEnum<typeof AccessLevel> =
  AccessLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessLevel$ {
  /** @deprecated use `AccessLevel$inboundSchema` instead. */
  export const inboundSchema = AccessLevel$inboundSchema;
  /** @deprecated use `AccessLevel$outboundSchema` instead. */
  export const outboundSchema = AccessLevel$outboundSchema;
}

/** @internal */
export const FolderSchema$inboundSchema: z.ZodType<
  FolderSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  type: Type$inboundSchema,
  accessLevel: z.nullable(AccessLevel$inboundSchema).default(null),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/** @internal */
export type FolderSchema$Outbound = {
  id: string;
  name: string;
  type: string;
  accessLevel: string | null;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const FolderSchema$outboundSchema: z.ZodType<
  FolderSchema$Outbound,
  z.ZodTypeDef,
  FolderSchema
> = z.object({
  id: z.string(),
  name: z.string(),
  type: Type$outboundSchema,
  accessLevel: z.nullable(AccessLevel$outboundSchema).default(null),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderSchema$ {
  /** @deprecated use `FolderSchema$inboundSchema` instead. */
  export const inboundSchema = FolderSchema$inboundSchema;
  /** @deprecated use `FolderSchema$outboundSchema` instead. */
  export const outboundSchema = FolderSchema$outboundSchema;
  /** @deprecated use `FolderSchema$Outbound` instead. */
  export type Outbound = FolderSchema$Outbound;
}

export function folderSchemaToJSON(folderSchema: FolderSchema): string {
  return JSON.stringify(FolderSchema$outboundSchema.parse(folderSchema));
}

export function folderSchemaFromJSON(
  jsonString: string,
): SafeParseResult<FolderSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FolderSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FolderSchema' from JSON`,
  );
}
