/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AnalyticsRegionsCity = {
  Wildcard: "*",
} as const;
export type AnalyticsRegionsCity = ClosedEnum<typeof AnalyticsRegionsCity>;

export type AnalyticsRegions = {
  /**
   * The 2-letter ISO 3166-1 country code of the country. Learn more: https://d.to/geo
   */
  country: string;
  /**
   * The 2-letter ISO 3166-2 region code of the region.
   */
  region: string;
  city?: AnalyticsRegionsCity | undefined;
  /**
   * The number of clicks from this region
   */
  clicks?: number | undefined;
  /**
   * The number of leads from this region
   */
  leads?: number | undefined;
  /**
   * The number of sales from this region
   */
  sales?: number | undefined;
  /**
   * The total amount of sales from this region, in cents
   */
  saleAmount?: number | undefined;
};

/** @internal */
export const AnalyticsRegionsCity$inboundSchema: z.ZodNativeEnum<
  typeof AnalyticsRegionsCity
> = z.nativeEnum(AnalyticsRegionsCity);

/** @internal */
export const AnalyticsRegionsCity$outboundSchema: z.ZodNativeEnum<
  typeof AnalyticsRegionsCity
> = AnalyticsRegionsCity$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyticsRegionsCity$ {
  /** @deprecated use `AnalyticsRegionsCity$inboundSchema` instead. */
  export const inboundSchema = AnalyticsRegionsCity$inboundSchema;
  /** @deprecated use `AnalyticsRegionsCity$outboundSchema` instead. */
  export const outboundSchema = AnalyticsRegionsCity$outboundSchema;
}

/** @internal */
export const AnalyticsRegions$inboundSchema: z.ZodType<
  AnalyticsRegions,
  z.ZodTypeDef,
  unknown
> = z.object({
  country: z.string(),
  region: z.string(),
  city: AnalyticsRegionsCity$inboundSchema.default("*"),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
});

/** @internal */
export type AnalyticsRegions$Outbound = {
  country: string;
  region: string;
  city: string;
  clicks: number;
  leads: number;
  sales: number;
  saleAmount: number;
};

/** @internal */
export const AnalyticsRegions$outboundSchema: z.ZodType<
  AnalyticsRegions$Outbound,
  z.ZodTypeDef,
  AnalyticsRegions
> = z.object({
  country: z.string(),
  region: z.string(),
  city: AnalyticsRegionsCity$outboundSchema.default("*"),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyticsRegions$ {
  /** @deprecated use `AnalyticsRegions$inboundSchema` instead. */
  export const inboundSchema = AnalyticsRegions$inboundSchema;
  /** @deprecated use `AnalyticsRegions$outboundSchema` instead. */
  export const outboundSchema = AnalyticsRegions$outboundSchema;
  /** @deprecated use `AnalyticsRegions$Outbound` instead. */
  export type Outbound = AnalyticsRegions$Outbound;
}

export function analyticsRegionsToJSON(
  analyticsRegions: AnalyticsRegions,
): string {
  return JSON.stringify(
    AnalyticsRegions$outboundSchema.parse(analyticsRegions),
  );
}

export function analyticsRegionsFromJSON(
  jsonString: string,
): SafeParseResult<AnalyticsRegions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyticsRegions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyticsRegions' from JSON`,
  );
}
