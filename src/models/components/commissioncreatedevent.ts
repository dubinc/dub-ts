/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CommissionCreatedEventEvent = {
  CommissionCreated: "commission.created",
} as const;
export type CommissionCreatedEventEvent = ClosedEnum<
  typeof CommissionCreatedEventEvent
>;

export const CommissionCreatedEventType = {
  Click: "click",
  Lead: "lead",
  Sale: "sale",
  Custom: "custom",
} as const;
export type CommissionCreatedEventType = ClosedEnum<
  typeof CommissionCreatedEventType
>;

export const CommissionCreatedEventStatus = {
  Pending: "pending",
  Processed: "processed",
  Paid: "paid",
  Refunded: "refunded",
  Duplicate: "duplicate",
  Fraud: "fraud",
  Canceled: "canceled",
} as const;
export type CommissionCreatedEventStatus = ClosedEnum<
  typeof CommissionCreatedEventStatus
>;

export type Partner = {
  /**
   * The partner's unique ID on Dub.
   */
  id: string;
  /**
   * The partner's full legal name.
   */
  name: string;
  /**
   * The partner's email address. Should be a unique value across Dub.
   */
  email: string | null;
  /**
   * The partner's avatar image.
   */
  image: string | null;
  /**
   * The date when the partner enabled payouts.
   */
  payoutsEnabledAt: string | null;
  /**
   * The partner's country (required for tax purposes).
   */
  country: string | null;
  totalClicks: number;
  totalLeads: number;
  totalConversions: number;
  totalSales: number;
  totalSaleAmount: number;
  totalCommissions: number;
};

export type CommissionCreatedEventCustomer = {
  /**
   * The unique ID of the customer. You may use either the customer's `id` on Dub (obtained via `/customers` endpoint) or their `externalId` (unique ID within your system, prefixed with `ext_`, e.g. `ext_123`).
   */
  id: string;
  /**
   * Unique identifier for the customer in the client's app.
   */
  externalId: string;
  /**
   * Name of the customer.
   */
  name: string;
  /**
   * Email of the customer.
   */
  email?: string | null | undefined;
  /**
   * Avatar URL of the customer.
   */
  avatar?: string | null | undefined;
  /**
   * Country of the customer.
   */
  country?: string | null | undefined;
  /**
   * Total number of sales for the customer.
   */
  sales?: number | null | undefined;
  /**
   * Total amount of sales for the customer.
   */
  saleAmount?: number | null | undefined;
  /**
   * The date the customer was created.
   */
  createdAt: string;
};

export type CommissionCreatedEventData = {
  /**
   * The commission's unique ID on Dub.
   */
  id: string;
  type?: CommissionCreatedEventType | undefined;
  amount: number;
  earnings: number;
  currency: string;
  status: CommissionCreatedEventStatus;
  invoiceId: string | null;
  description: string | null;
  quantity: number;
  /**
   * The user who created the manual commission.
   */
  userId?: string | null | undefined;
  createdAt: string;
  updatedAt: string;
  partner: Partner;
  customer?: CommissionCreatedEventCustomer | null | undefined;
};

/**
 * Triggered when a commission is created for a partner.
 */
export type CommissionCreatedEvent = {
  id: string;
  event: CommissionCreatedEventEvent;
  createdAt: string;
  data: CommissionCreatedEventData;
};

/** @internal */
export const CommissionCreatedEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof CommissionCreatedEventEvent
> = z.nativeEnum(CommissionCreatedEventEvent);

/** @internal */
export const CommissionCreatedEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof CommissionCreatedEventEvent
> = CommissionCreatedEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommissionCreatedEventEvent$ {
  /** @deprecated use `CommissionCreatedEventEvent$inboundSchema` instead. */
  export const inboundSchema = CommissionCreatedEventEvent$inboundSchema;
  /** @deprecated use `CommissionCreatedEventEvent$outboundSchema` instead. */
  export const outboundSchema = CommissionCreatedEventEvent$outboundSchema;
}

/** @internal */
export const CommissionCreatedEventType$inboundSchema: z.ZodNativeEnum<
  typeof CommissionCreatedEventType
> = z.nativeEnum(CommissionCreatedEventType);

/** @internal */
export const CommissionCreatedEventType$outboundSchema: z.ZodNativeEnum<
  typeof CommissionCreatedEventType
> = CommissionCreatedEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommissionCreatedEventType$ {
  /** @deprecated use `CommissionCreatedEventType$inboundSchema` instead. */
  export const inboundSchema = CommissionCreatedEventType$inboundSchema;
  /** @deprecated use `CommissionCreatedEventType$outboundSchema` instead. */
  export const outboundSchema = CommissionCreatedEventType$outboundSchema;
}

/** @internal */
export const CommissionCreatedEventStatus$inboundSchema: z.ZodNativeEnum<
  typeof CommissionCreatedEventStatus
> = z.nativeEnum(CommissionCreatedEventStatus);

/** @internal */
export const CommissionCreatedEventStatus$outboundSchema: z.ZodNativeEnum<
  typeof CommissionCreatedEventStatus
> = CommissionCreatedEventStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommissionCreatedEventStatus$ {
  /** @deprecated use `CommissionCreatedEventStatus$inboundSchema` instead. */
  export const inboundSchema = CommissionCreatedEventStatus$inboundSchema;
  /** @deprecated use `CommissionCreatedEventStatus$outboundSchema` instead. */
  export const outboundSchema = CommissionCreatedEventStatus$outboundSchema;
}

/** @internal */
export const Partner$inboundSchema: z.ZodType<Partner, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    name: z.string(),
    email: z.nullable(z.string()),
    image: z.nullable(z.string()),
    payoutsEnabledAt: z.nullable(z.string()),
    country: z.nullable(z.string()),
    totalClicks: z.number(),
    totalLeads: z.number(),
    totalConversions: z.number(),
    totalSales: z.number(),
    totalSaleAmount: z.number(),
    totalCommissions: z.number(),
  });

/** @internal */
export type Partner$Outbound = {
  id: string;
  name: string;
  email: string | null;
  image: string | null;
  payoutsEnabledAt: string | null;
  country: string | null;
  totalClicks: number;
  totalLeads: number;
  totalConversions: number;
  totalSales: number;
  totalSaleAmount: number;
  totalCommissions: number;
};

/** @internal */
export const Partner$outboundSchema: z.ZodType<
  Partner$Outbound,
  z.ZodTypeDef,
  Partner
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.nullable(z.string()),
  image: z.nullable(z.string()),
  payoutsEnabledAt: z.nullable(z.string()),
  country: z.nullable(z.string()),
  totalClicks: z.number(),
  totalLeads: z.number(),
  totalConversions: z.number(),
  totalSales: z.number(),
  totalSaleAmount: z.number(),
  totalCommissions: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Partner$ {
  /** @deprecated use `Partner$inboundSchema` instead. */
  export const inboundSchema = Partner$inboundSchema;
  /** @deprecated use `Partner$outboundSchema` instead. */
  export const outboundSchema = Partner$outboundSchema;
  /** @deprecated use `Partner$Outbound` instead. */
  export type Outbound = Partner$Outbound;
}

export function partnerToJSON(partner: Partner): string {
  return JSON.stringify(Partner$outboundSchema.parse(partner));
}

export function partnerFromJSON(
  jsonString: string,
): SafeParseResult<Partner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Partner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Partner' from JSON`,
  );
}

/** @internal */
export const CommissionCreatedEventCustomer$inboundSchema: z.ZodType<
  CommissionCreatedEventCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  externalId: z.string(),
  name: z.string(),
  email: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  sales: z.nullable(z.number()).optional(),
  saleAmount: z.nullable(z.number()).optional(),
  createdAt: z.string(),
});

/** @internal */
export type CommissionCreatedEventCustomer$Outbound = {
  id: string;
  externalId: string;
  name: string;
  email?: string | null | undefined;
  avatar?: string | null | undefined;
  country?: string | null | undefined;
  sales?: number | null | undefined;
  saleAmount?: number | null | undefined;
  createdAt: string;
};

/** @internal */
export const CommissionCreatedEventCustomer$outboundSchema: z.ZodType<
  CommissionCreatedEventCustomer$Outbound,
  z.ZodTypeDef,
  CommissionCreatedEventCustomer
> = z.object({
  id: z.string(),
  externalId: z.string(),
  name: z.string(),
  email: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  sales: z.nullable(z.number()).optional(),
  saleAmount: z.nullable(z.number()).optional(),
  createdAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommissionCreatedEventCustomer$ {
  /** @deprecated use `CommissionCreatedEventCustomer$inboundSchema` instead. */
  export const inboundSchema = CommissionCreatedEventCustomer$inboundSchema;
  /** @deprecated use `CommissionCreatedEventCustomer$outboundSchema` instead. */
  export const outboundSchema = CommissionCreatedEventCustomer$outboundSchema;
  /** @deprecated use `CommissionCreatedEventCustomer$Outbound` instead. */
  export type Outbound = CommissionCreatedEventCustomer$Outbound;
}

export function commissionCreatedEventCustomerToJSON(
  commissionCreatedEventCustomer: CommissionCreatedEventCustomer,
): string {
  return JSON.stringify(
    CommissionCreatedEventCustomer$outboundSchema.parse(
      commissionCreatedEventCustomer,
    ),
  );
}

export function commissionCreatedEventCustomerFromJSON(
  jsonString: string,
): SafeParseResult<CommissionCreatedEventCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommissionCreatedEventCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommissionCreatedEventCustomer' from JSON`,
  );
}

/** @internal */
export const CommissionCreatedEventData$inboundSchema: z.ZodType<
  CommissionCreatedEventData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: CommissionCreatedEventType$inboundSchema.optional(),
  amount: z.number(),
  earnings: z.number(),
  currency: z.string(),
  status: CommissionCreatedEventStatus$inboundSchema,
  invoiceId: z.nullable(z.string()),
  description: z.nullable(z.string()),
  quantity: z.number(),
  userId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  partner: z.lazy(() => Partner$inboundSchema),
  customer: z.nullable(
    z.lazy(() => CommissionCreatedEventCustomer$inboundSchema),
  ).optional(),
});

/** @internal */
export type CommissionCreatedEventData$Outbound = {
  id: string;
  type?: string | undefined;
  amount: number;
  earnings: number;
  currency: string;
  status: string;
  invoiceId: string | null;
  description: string | null;
  quantity: number;
  userId?: string | null | undefined;
  createdAt: string;
  updatedAt: string;
  partner: Partner$Outbound;
  customer?: CommissionCreatedEventCustomer$Outbound | null | undefined;
};

/** @internal */
export const CommissionCreatedEventData$outboundSchema: z.ZodType<
  CommissionCreatedEventData$Outbound,
  z.ZodTypeDef,
  CommissionCreatedEventData
> = z.object({
  id: z.string(),
  type: CommissionCreatedEventType$outboundSchema.optional(),
  amount: z.number(),
  earnings: z.number(),
  currency: z.string(),
  status: CommissionCreatedEventStatus$outboundSchema,
  invoiceId: z.nullable(z.string()),
  description: z.nullable(z.string()),
  quantity: z.number(),
  userId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  partner: z.lazy(() => Partner$outboundSchema),
  customer: z.nullable(
    z.lazy(() => CommissionCreatedEventCustomer$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommissionCreatedEventData$ {
  /** @deprecated use `CommissionCreatedEventData$inboundSchema` instead. */
  export const inboundSchema = CommissionCreatedEventData$inboundSchema;
  /** @deprecated use `CommissionCreatedEventData$outboundSchema` instead. */
  export const outboundSchema = CommissionCreatedEventData$outboundSchema;
  /** @deprecated use `CommissionCreatedEventData$Outbound` instead. */
  export type Outbound = CommissionCreatedEventData$Outbound;
}

export function commissionCreatedEventDataToJSON(
  commissionCreatedEventData: CommissionCreatedEventData,
): string {
  return JSON.stringify(
    CommissionCreatedEventData$outboundSchema.parse(commissionCreatedEventData),
  );
}

export function commissionCreatedEventDataFromJSON(
  jsonString: string,
): SafeParseResult<CommissionCreatedEventData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommissionCreatedEventData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommissionCreatedEventData' from JSON`,
  );
}

/** @internal */
export const CommissionCreatedEvent$inboundSchema: z.ZodType<
  CommissionCreatedEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  event: CommissionCreatedEventEvent$inboundSchema,
  createdAt: z.string(),
  data: z.lazy(() => CommissionCreatedEventData$inboundSchema),
});

/** @internal */
export type CommissionCreatedEvent$Outbound = {
  id: string;
  event: string;
  createdAt: string;
  data: CommissionCreatedEventData$Outbound;
};

/** @internal */
export const CommissionCreatedEvent$outboundSchema: z.ZodType<
  CommissionCreatedEvent$Outbound,
  z.ZodTypeDef,
  CommissionCreatedEvent
> = z.object({
  id: z.string(),
  event: CommissionCreatedEventEvent$outboundSchema,
  createdAt: z.string(),
  data: z.lazy(() => CommissionCreatedEventData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommissionCreatedEvent$ {
  /** @deprecated use `CommissionCreatedEvent$inboundSchema` instead. */
  export const inboundSchema = CommissionCreatedEvent$inboundSchema;
  /** @deprecated use `CommissionCreatedEvent$outboundSchema` instead. */
  export const outboundSchema = CommissionCreatedEvent$outboundSchema;
  /** @deprecated use `CommissionCreatedEvent$Outbound` instead. */
  export type Outbound = CommissionCreatedEvent$Outbound;
}

export function commissionCreatedEventToJSON(
  commissionCreatedEvent: CommissionCreatedEvent,
): string {
  return JSON.stringify(
    CommissionCreatedEvent$outboundSchema.parse(commissionCreatedEvent),
  );
}

export function commissionCreatedEventFromJSON(
  jsonString: string,
): SafeParseResult<CommissionCreatedEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommissionCreatedEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommissionCreatedEvent' from JSON`,
  );
}
