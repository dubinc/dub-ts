/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const Event = {
    Click: "click",
} as const;
export type Event = ClosedEnum<typeof Event>;

export type ClickEvent = {
    event: Event;
    timestamp: string;
    clickId: string;
    linkId: string;
    domain: string;
    key: string;
    url: string;
    continent: string | null;
    country: string | null;
    city: string | null;
    device: string | null;
    browser: string | null;
    os: string | null;
    referer: string | null;
    ip: string | null;
    qr: number | null;
};

/** @internal */
export const Event$inboundSchema: z.ZodNativeEnum<typeof Event> = z.nativeEnum(Event);

/** @internal */
export const Event$outboundSchema: z.ZodNativeEnum<typeof Event> = Event$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Event$ {
    /** @deprecated use `Event$inboundSchema` instead. */
    export const inboundSchema = Event$inboundSchema;
    /** @deprecated use `Event$outboundSchema` instead. */
    export const outboundSchema = Event$outboundSchema;
}

/** @internal */
export const ClickEvent$inboundSchema: z.ZodType<ClickEvent, z.ZodTypeDef, unknown> = z
    .object({
        event: Event$inboundSchema,
        timestamp: z.string(),
        click_id: z.string(),
        link_id: z.string(),
        domain: z.string(),
        key: z.string(),
        url: z.string(),
        continent: z.nullable(z.string()),
        country: z.nullable(z.string()),
        city: z.nullable(z.string()),
        device: z.nullable(z.string()),
        browser: z.nullable(z.string()),
        os: z.nullable(z.string()),
        referer: z.nullable(z.string()),
        ip: z.nullable(z.string()),
        qr: z.nullable(z.number()),
    })
    .transform((v) => {
        return remap$(v, {
            click_id: "clickId",
            link_id: "linkId",
        });
    });

/** @internal */
export type ClickEvent$Outbound = {
    event: string;
    timestamp: string;
    click_id: string;
    link_id: string;
    domain: string;
    key: string;
    url: string;
    continent: string | null;
    country: string | null;
    city: string | null;
    device: string | null;
    browser: string | null;
    os: string | null;
    referer: string | null;
    ip: string | null;
    qr: number | null;
};

/** @internal */
export const ClickEvent$outboundSchema: z.ZodType<ClickEvent$Outbound, z.ZodTypeDef, ClickEvent> = z
    .object({
        event: Event$outboundSchema,
        timestamp: z.string(),
        clickId: z.string(),
        linkId: z.string(),
        domain: z.string(),
        key: z.string(),
        url: z.string(),
        continent: z.nullable(z.string()),
        country: z.nullable(z.string()),
        city: z.nullable(z.string()),
        device: z.nullable(z.string()),
        browser: z.nullable(z.string()),
        os: z.nullable(z.string()),
        referer: z.nullable(z.string()),
        ip: z.nullable(z.string()),
        qr: z.nullable(z.number()),
    })
    .transform((v) => {
        return remap$(v, {
            clickId: "click_id",
            linkId: "link_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClickEvent$ {
    /** @deprecated use `ClickEvent$inboundSchema` instead. */
    export const inboundSchema = ClickEvent$inboundSchema;
    /** @deprecated use `ClickEvent$outboundSchema` instead. */
    export const outboundSchema = ClickEvent$outboundSchema;
    /** @deprecated use `ClickEvent$Outbound` instead. */
    export type Outbound = ClickEvent$Outbound;
}
