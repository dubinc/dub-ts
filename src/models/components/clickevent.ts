/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TagSchema,
  TagSchema$inboundSchema,
  TagSchema$Outbound,
  TagSchema$outboundSchema,
} from "./tagschema.js";

export const Event = {
  Click: "click",
} as const;
export type Event = ClosedEnum<typeof Event>;

export type Click = {
  id: string;
  timestamp: string;
  url: string;
  country: string;
  city: string;
  region: string;
  continent: string;
  device: string;
  browser: string;
  os: string;
  trigger?: string | null | undefined;
  referer: string;
  refererUrl: string;
  qr: boolean;
  ip: string;
};

export type ClickEventTestVariants = {
  url: string;
  percentage: number;
};

export type Link = {
  /**
   * The unique ID of the short link.
   */
  id: string;
  /**
   * The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
   */
  domain: string;
  /**
   * The short link slug. If not provided, a random 7-character slug will be generated.
   */
  key: string;
  url: string;
  trackConversion: boolean;
  /**
   * The ID of the link in your database. If set, it can be used to identify the link in future API requests (must be prefixed with 'ext_' when passed as a query parameter). This key is unique across your workspace.
   */
  externalId: string | null;
  /**
   * The ID of the tenant that created the link inside your system. If set, it can be used to fetch all links for a tenant.
   */
  tenantId: string | null;
  /**
   * The ID of the program the short link is associated with.
   */
  programId: string | null;
  /**
   * The ID of the partner the short link is associated with.
   */
  partnerId: string | null;
  archived: boolean;
  expiresAt: string;
  expiredUrl: string | null;
  /**
   * The password required to access the destination URL of the short link.
   */
  password: string | null;
  proxy: boolean;
  /**
   * The title of the short link. Will be used for Custom Link Previews if `proxy` is true.
   */
  title: string | null;
  /**
   * The description of the short link. Will be used for Custom Link Previews if `proxy` is true.
   */
  description: string | null;
  /**
   * The image of the short link. Will be used for Custom Link Previews if `proxy` is true.
   */
  image: string | null;
  /**
   * The custom link preview video (og:video). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
   */
  video: string | null;
  rewrite: boolean;
  doIndex: boolean;
  /**
   * The iOS destination URL for the short link for iOS device targeting.
   */
  ios: string | null;
  /**
   * The Android destination URL for the short link for Android device targeting.
   */
  android: string | null;
  /**
   * Geo targeting information for the short link in JSON format `{[COUNTRY]: https://example.com }`. See https://d.to/geo for more information.
   */
  geo: { [k: string]: string } | null;
  publicStats: boolean;
  /**
   * The tags assigned to the short link.
   */
  tags: Array<TagSchema> | null;
  /**
   * The unique ID of the folder assigned to the short link.
   */
  folderId: string | null;
  /**
   * The IDs of the webhooks that the short link is associated with.
   */
  webhookIds: Array<string>;
  /**
   * The comments for the short link.
   */
  comments: string | null;
  /**
   * The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
   */
  shortLink: string;
  /**
   * The full URL of the QR code for the short link (e.g. `https://api.dub.co/qr?url=https://dub.sh/try`).
   */
  qrCode: string;
  /**
   * The UTM source of the short link.
   */
  utmSource: string | null;
  /**
   * The UTM medium of the short link.
   */
  utmMedium: string | null;
  /**
   * The UTM campaign of the short link.
   */
  utmCampaign: string | null;
  /**
   * The UTM term of the short link.
   */
  utmTerm: string | null;
  /**
   * The UTM content of the short link.
   */
  utmContent: string | null;
  /**
   * An array of A/B test URLs and the percentage of traffic to send to each URL.
   */
  testVariants?: Array<ClickEventTestVariants> | null | undefined;
  testStartedAt: string | null;
  testCompletedAt: string | null;
  userId: string | null;
  /**
   * The workspace ID of the short link.
   */
  workspaceId: string;
  /**
   * The number of clicks on the short link.
   */
  clicks?: number | undefined;
  /**
   * The number of leads the short link has generated.
   */
  leads?: number | undefined;
  /**
   * The number of leads that converted to paying customers.
   */
  conversions?: number | undefined;
  /**
   * The total number of sales (includes recurring sales) generated by the short link.
   */
  sales?: number | undefined;
  /**
   * The total dollar value of sales (in cents) generated by the short link.
   */
  saleAmount?: number | undefined;
  lastClicked: string;
  createdAt: string;
  updatedAt: string;
  /**
   * Deprecated: Use `tags` instead. The unique ID of the tag assigned to the short link.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  tagId: string | null;
  /**
   * Deprecated: Use `workspaceId` instead. The project ID of the short link.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  projectId: string;
};

export type ClickEvent = {
  event: Event;
  timestamp: string;
  click: Click;
  link: Link;
  /**
   * Deprecated: Use `click.id` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  clickId: string;
  /**
   * Deprecated: Use `link.id` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  linkId: string;
  /**
   * Deprecated: Use `link.domain` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  domain: string;
  /**
   * Deprecated: Use `link.key` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  key: string;
  /**
   * Deprecated: Use `click.url` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  url: string;
  /**
   * Deprecated: Use `click.continent` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  continent: string;
  /**
   * Deprecated: Use `click.country` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  country: string;
  /**
   * Deprecated: Use `click.city` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  city: string;
  /**
   * Deprecated: Use `click.device` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  device: string;
  /**
   * Deprecated: Use `click.browser` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  browser: string;
  /**
   * Deprecated: Use `click.os` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  os: string;
  /**
   * Deprecated: Use `click.qr` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  qr: number;
  /**
   * Deprecated: Use `click.ip` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  ip: string;
};

/** @internal */
export const Event$inboundSchema: z.ZodNativeEnum<typeof Event> = z.nativeEnum(
  Event,
);

/** @internal */
export const Event$outboundSchema: z.ZodNativeEnum<typeof Event> =
  Event$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Event$ {
  /** @deprecated use `Event$inboundSchema` instead. */
  export const inboundSchema = Event$inboundSchema;
  /** @deprecated use `Event$outboundSchema` instead. */
  export const outboundSchema = Event$outboundSchema;
}

/** @internal */
export const Click$inboundSchema: z.ZodType<Click, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    timestamp: z.string(),
    url: z.string(),
    country: z.string(),
    city: z.string(),
    region: z.string(),
    continent: z.string(),
    device: z.string(),
    browser: z.string(),
    os: z.string(),
    trigger: z.nullable(z.string()).optional(),
    referer: z.string(),
    refererUrl: z.string(),
    qr: z.boolean(),
    ip: z.string(),
  });

/** @internal */
export type Click$Outbound = {
  id: string;
  timestamp: string;
  url: string;
  country: string;
  city: string;
  region: string;
  continent: string;
  device: string;
  browser: string;
  os: string;
  trigger?: string | null | undefined;
  referer: string;
  refererUrl: string;
  qr: boolean;
  ip: string;
};

/** @internal */
export const Click$outboundSchema: z.ZodType<
  Click$Outbound,
  z.ZodTypeDef,
  Click
> = z.object({
  id: z.string(),
  timestamp: z.string(),
  url: z.string(),
  country: z.string(),
  city: z.string(),
  region: z.string(),
  continent: z.string(),
  device: z.string(),
  browser: z.string(),
  os: z.string(),
  trigger: z.nullable(z.string()).optional(),
  referer: z.string(),
  refererUrl: z.string(),
  qr: z.boolean(),
  ip: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Click$ {
  /** @deprecated use `Click$inboundSchema` instead. */
  export const inboundSchema = Click$inboundSchema;
  /** @deprecated use `Click$outboundSchema` instead. */
  export const outboundSchema = Click$outboundSchema;
  /** @deprecated use `Click$Outbound` instead. */
  export type Outbound = Click$Outbound;
}

export function clickToJSON(click: Click): string {
  return JSON.stringify(Click$outboundSchema.parse(click));
}

export function clickFromJSON(
  jsonString: string,
): SafeParseResult<Click, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Click$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Click' from JSON`,
  );
}

/** @internal */
export const ClickEventTestVariants$inboundSchema: z.ZodType<
  ClickEventTestVariants,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  percentage: z.number(),
});

/** @internal */
export type ClickEventTestVariants$Outbound = {
  url: string;
  percentage: number;
};

/** @internal */
export const ClickEventTestVariants$outboundSchema: z.ZodType<
  ClickEventTestVariants$Outbound,
  z.ZodTypeDef,
  ClickEventTestVariants
> = z.object({
  url: z.string(),
  percentage: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClickEventTestVariants$ {
  /** @deprecated use `ClickEventTestVariants$inboundSchema` instead. */
  export const inboundSchema = ClickEventTestVariants$inboundSchema;
  /** @deprecated use `ClickEventTestVariants$outboundSchema` instead. */
  export const outboundSchema = ClickEventTestVariants$outboundSchema;
  /** @deprecated use `ClickEventTestVariants$Outbound` instead. */
  export type Outbound = ClickEventTestVariants$Outbound;
}

export function clickEventTestVariantsToJSON(
  clickEventTestVariants: ClickEventTestVariants,
): string {
  return JSON.stringify(
    ClickEventTestVariants$outboundSchema.parse(clickEventTestVariants),
  );
}

export function clickEventTestVariantsFromJSON(
  jsonString: string,
): SafeParseResult<ClickEventTestVariants, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClickEventTestVariants$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClickEventTestVariants' from JSON`,
  );
}

/** @internal */
export const Link$inboundSchema: z.ZodType<Link, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    domain: z.string(),
    key: z.string(),
    url: z.string(),
    trackConversion: z.boolean(),
    externalId: z.nullable(z.string()),
    tenantId: z.nullable(z.string()),
    programId: z.nullable(z.string()),
    partnerId: z.nullable(z.string()),
    archived: z.boolean(),
    expiresAt: z.string(),
    expiredUrl: z.nullable(z.string()),
    password: z.nullable(z.string()),
    proxy: z.boolean(),
    title: z.nullable(z.string()),
    description: z.nullable(z.string()),
    image: z.nullable(z.string()),
    video: z.nullable(z.string()),
    rewrite: z.boolean(),
    doIndex: z.boolean(),
    ios: z.nullable(z.string()),
    android: z.nullable(z.string()),
    geo: z.nullable(z.record(z.string())),
    publicStats: z.boolean(),
    tags: z.nullable(z.array(TagSchema$inboundSchema)),
    folderId: z.nullable(z.string()),
    webhookIds: z.array(z.string()),
    comments: z.nullable(z.string()),
    shortLink: z.string(),
    qrCode: z.string(),
    utm_source: z.nullable(z.string()),
    utm_medium: z.nullable(z.string()),
    utm_campaign: z.nullable(z.string()),
    utm_term: z.nullable(z.string()),
    utm_content: z.nullable(z.string()),
    testVariants: z.nullable(
      z.array(z.lazy(() => ClickEventTestVariants$inboundSchema)),
    ).optional(),
    testStartedAt: z.nullable(z.string()),
    testCompletedAt: z.nullable(z.string()),
    userId: z.nullable(z.string()),
    workspaceId: z.string(),
    clicks: z.number().default(0),
    leads: z.number().default(0),
    conversions: z.number().default(0),
    sales: z.number().default(0),
    saleAmount: z.number().default(0),
    lastClicked: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    tagId: z.nullable(z.string()),
    projectId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "utm_source": "utmSource",
      "utm_medium": "utmMedium",
      "utm_campaign": "utmCampaign",
      "utm_term": "utmTerm",
      "utm_content": "utmContent",
    });
  });

/** @internal */
export type Link$Outbound = {
  id: string;
  domain: string;
  key: string;
  url: string;
  trackConversion: boolean;
  externalId: string | null;
  tenantId: string | null;
  programId: string | null;
  partnerId: string | null;
  archived: boolean;
  expiresAt: string;
  expiredUrl: string | null;
  password: string | null;
  proxy: boolean;
  title: string | null;
  description: string | null;
  image: string | null;
  video: string | null;
  rewrite: boolean;
  doIndex: boolean;
  ios: string | null;
  android: string | null;
  geo: { [k: string]: string } | null;
  publicStats: boolean;
  tags: Array<TagSchema$Outbound> | null;
  folderId: string | null;
  webhookIds: Array<string>;
  comments: string | null;
  shortLink: string;
  qrCode: string;
  utm_source: string | null;
  utm_medium: string | null;
  utm_campaign: string | null;
  utm_term: string | null;
  utm_content: string | null;
  testVariants?: Array<ClickEventTestVariants$Outbound> | null | undefined;
  testStartedAt: string | null;
  testCompletedAt: string | null;
  userId: string | null;
  workspaceId: string;
  clicks: number;
  leads: number;
  conversions: number;
  sales: number;
  saleAmount: number;
  lastClicked: string;
  createdAt: string;
  updatedAt: string;
  tagId: string | null;
  projectId: string;
};

/** @internal */
export const Link$outboundSchema: z.ZodType<Link$Outbound, z.ZodTypeDef, Link> =
  z.object({
    id: z.string(),
    domain: z.string(),
    key: z.string(),
    url: z.string(),
    trackConversion: z.boolean(),
    externalId: z.nullable(z.string()),
    tenantId: z.nullable(z.string()),
    programId: z.nullable(z.string()),
    partnerId: z.nullable(z.string()),
    archived: z.boolean(),
    expiresAt: z.string(),
    expiredUrl: z.nullable(z.string()),
    password: z.nullable(z.string()),
    proxy: z.boolean(),
    title: z.nullable(z.string()),
    description: z.nullable(z.string()),
    image: z.nullable(z.string()),
    video: z.nullable(z.string()),
    rewrite: z.boolean(),
    doIndex: z.boolean(),
    ios: z.nullable(z.string()),
    android: z.nullable(z.string()),
    geo: z.nullable(z.record(z.string())),
    publicStats: z.boolean(),
    tags: z.nullable(z.array(TagSchema$outboundSchema)),
    folderId: z.nullable(z.string()),
    webhookIds: z.array(z.string()),
    comments: z.nullable(z.string()),
    shortLink: z.string(),
    qrCode: z.string(),
    utmSource: z.nullable(z.string()),
    utmMedium: z.nullable(z.string()),
    utmCampaign: z.nullable(z.string()),
    utmTerm: z.nullable(z.string()),
    utmContent: z.nullable(z.string()),
    testVariants: z.nullable(
      z.array(z.lazy(() => ClickEventTestVariants$outboundSchema)),
    ).optional(),
    testStartedAt: z.nullable(z.string()),
    testCompletedAt: z.nullable(z.string()),
    userId: z.nullable(z.string()),
    workspaceId: z.string(),
    clicks: z.number().default(0),
    leads: z.number().default(0),
    conversions: z.number().default(0),
    sales: z.number().default(0),
    saleAmount: z.number().default(0),
    lastClicked: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    tagId: z.nullable(z.string()),
    projectId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      utmSource: "utm_source",
      utmMedium: "utm_medium",
      utmCampaign: "utm_campaign",
      utmTerm: "utm_term",
      utmContent: "utm_content",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Link$ {
  /** @deprecated use `Link$inboundSchema` instead. */
  export const inboundSchema = Link$inboundSchema;
  /** @deprecated use `Link$outboundSchema` instead. */
  export const outboundSchema = Link$outboundSchema;
  /** @deprecated use `Link$Outbound` instead. */
  export type Outbound = Link$Outbound;
}

export function linkToJSON(link: Link): string {
  return JSON.stringify(Link$outboundSchema.parse(link));
}

export function linkFromJSON(
  jsonString: string,
): SafeParseResult<Link, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Link$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Link' from JSON`,
  );
}

/** @internal */
export const ClickEvent$inboundSchema: z.ZodType<
  ClickEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: Event$inboundSchema,
  timestamp: z.string(),
  click: z.lazy(() => Click$inboundSchema),
  link: z.lazy(() => Link$inboundSchema),
  click_id: z.string(),
  link_id: z.string(),
  domain: z.string(),
  key: z.string(),
  url: z.string(),
  continent: z.string(),
  country: z.string(),
  city: z.string(),
  device: z.string(),
  browser: z.string(),
  os: z.string(),
  qr: z.number(),
  ip: z.string(),
}).transform((v) => {
  return remap$(v, {
    "click_id": "clickId",
    "link_id": "linkId",
  });
});

/** @internal */
export type ClickEvent$Outbound = {
  event: string;
  timestamp: string;
  click: Click$Outbound;
  link: Link$Outbound;
  click_id: string;
  link_id: string;
  domain: string;
  key: string;
  url: string;
  continent: string;
  country: string;
  city: string;
  device: string;
  browser: string;
  os: string;
  qr: number;
  ip: string;
};

/** @internal */
export const ClickEvent$outboundSchema: z.ZodType<
  ClickEvent$Outbound,
  z.ZodTypeDef,
  ClickEvent
> = z.object({
  event: Event$outboundSchema,
  timestamp: z.string(),
  click: z.lazy(() => Click$outboundSchema),
  link: z.lazy(() => Link$outboundSchema),
  clickId: z.string(),
  linkId: z.string(),
  domain: z.string(),
  key: z.string(),
  url: z.string(),
  continent: z.string(),
  country: z.string(),
  city: z.string(),
  device: z.string(),
  browser: z.string(),
  os: z.string(),
  qr: z.number(),
  ip: z.string(),
}).transform((v) => {
  return remap$(v, {
    clickId: "click_id",
    linkId: "link_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClickEvent$ {
  /** @deprecated use `ClickEvent$inboundSchema` instead. */
  export const inboundSchema = ClickEvent$inboundSchema;
  /** @deprecated use `ClickEvent$outboundSchema` instead. */
  export const outboundSchema = ClickEvent$outboundSchema;
  /** @deprecated use `ClickEvent$Outbound` instead. */
  export type Outbound = ClickEvent$Outbound;
}

export function clickEventToJSON(clickEvent: ClickEvent): string {
  return JSON.stringify(ClickEvent$outboundSchema.parse(clickEvent));
}

export function clickEventFromJSON(
  jsonString: string,
): SafeParseResult<ClickEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClickEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClickEvent' from JSON`,
  );
}
