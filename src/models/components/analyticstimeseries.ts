/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AnalyticsTimeseries = {
  /**
   * The starting timestamp of the interval
   */
  start: string;
  /**
   * The number of clicks in the interval
   */
  clicks?: number | undefined;
  /**
   * The number of leads in the interval
   */
  leads?: number | undefined;
  /**
   * The number of sales in the interval
   */
  sales?: number | undefined;
  /**
   * The total amount of sales in the interval, in cents
   */
  saleAmount?: number | undefined;
};

/** @internal */
export const AnalyticsTimeseries$inboundSchema: z.ZodType<
  AnalyticsTimeseries,
  z.ZodTypeDef,
  unknown
> = z.object({
  start: z.string(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
});

/** @internal */
export type AnalyticsTimeseries$Outbound = {
  start: string;
  clicks: number;
  leads: number;
  sales: number;
  saleAmount: number;
};

/** @internal */
export const AnalyticsTimeseries$outboundSchema: z.ZodType<
  AnalyticsTimeseries$Outbound,
  z.ZodTypeDef,
  AnalyticsTimeseries
> = z.object({
  start: z.string(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyticsTimeseries$ {
  /** @deprecated use `AnalyticsTimeseries$inboundSchema` instead. */
  export const inboundSchema = AnalyticsTimeseries$inboundSchema;
  /** @deprecated use `AnalyticsTimeseries$outboundSchema` instead. */
  export const outboundSchema = AnalyticsTimeseries$outboundSchema;
  /** @deprecated use `AnalyticsTimeseries$Outbound` instead. */
  export type Outbound = AnalyticsTimeseries$Outbound;
}

export function analyticsTimeseriesToJSON(
  analyticsTimeseries: AnalyticsTimeseries,
): string {
  return JSON.stringify(
    AnalyticsTimeseries$outboundSchema.parse(analyticsTimeseries),
  );
}

export function analyticsTimeseriesFromJSON(
  jsonString: string,
): SafeParseResult<AnalyticsTimeseries, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyticsTimeseries$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyticsTimeseries' from JSON`,
  );
}
