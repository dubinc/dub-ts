/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Region = {
  Wildcard: "*",
} as const;
export type Region = ClosedEnum<typeof Region>;

export const City = {
  Wildcard: "*",
} as const;
export type City = ClosedEnum<typeof City>;

export type AnalyticsCountries = {
  /**
   * The 2-letter ISO 3166-1 country code of the country. Learn more: https://d.to/geo
   */
  country: string;
  region?: Region | undefined;
  city?: City | undefined;
  /**
   * The number of clicks from this country
   */
  clicks?: number | undefined;
  /**
   * The number of leads from this country
   */
  leads?: number | undefined;
  /**
   * The number of sales from this country
   */
  sales?: number | undefined;
  /**
   * The total amount of sales from this country, in cents
   */
  saleAmount?: number | undefined;
};

/** @internal */
export const Region$inboundSchema: z.ZodNativeEnum<typeof Region> = z
  .nativeEnum(Region);

/** @internal */
export const Region$outboundSchema: z.ZodNativeEnum<typeof Region> =
  Region$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Region$ {
  /** @deprecated use `Region$inboundSchema` instead. */
  export const inboundSchema = Region$inboundSchema;
  /** @deprecated use `Region$outboundSchema` instead. */
  export const outboundSchema = Region$outboundSchema;
}

/** @internal */
export const City$inboundSchema: z.ZodNativeEnum<typeof City> = z.nativeEnum(
  City,
);

/** @internal */
export const City$outboundSchema: z.ZodNativeEnum<typeof City> =
  City$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace City$ {
  /** @deprecated use `City$inboundSchema` instead. */
  export const inboundSchema = City$inboundSchema;
  /** @deprecated use `City$outboundSchema` instead. */
  export const outboundSchema = City$outboundSchema;
}

/** @internal */
export const AnalyticsCountries$inboundSchema: z.ZodType<
  AnalyticsCountries,
  z.ZodTypeDef,
  unknown
> = z.object({
  country: z.string(),
  region: Region$inboundSchema.default("*"),
  city: City$inboundSchema.default("*"),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
});

/** @internal */
export type AnalyticsCountries$Outbound = {
  country: string;
  region: string;
  city: string;
  clicks: number;
  leads: number;
  sales: number;
  saleAmount: number;
};

/** @internal */
export const AnalyticsCountries$outboundSchema: z.ZodType<
  AnalyticsCountries$Outbound,
  z.ZodTypeDef,
  AnalyticsCountries
> = z.object({
  country: z.string(),
  region: Region$outboundSchema.default("*"),
  city: City$outboundSchema.default("*"),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyticsCountries$ {
  /** @deprecated use `AnalyticsCountries$inboundSchema` instead. */
  export const inboundSchema = AnalyticsCountries$inboundSchema;
  /** @deprecated use `AnalyticsCountries$outboundSchema` instead. */
  export const outboundSchema = AnalyticsCountries$outboundSchema;
  /** @deprecated use `AnalyticsCountries$Outbound` instead. */
  export type Outbound = AnalyticsCountries$Outbound;
}

export function analyticsCountriesToJSON(
  analyticsCountries: AnalyticsCountries,
): string {
  return JSON.stringify(
    AnalyticsCountries$outboundSchema.parse(analyticsCountries),
  );
}

export function analyticsCountriesFromJSON(
  jsonString: string,
): SafeParseResult<AnalyticsCountries, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyticsCountries$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyticsCountries' from JSON`,
  );
}
