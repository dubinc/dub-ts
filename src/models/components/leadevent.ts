/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const LeadEventEvent = {
    Lead: "lead",
} as const;
export type LeadEventEvent = ClosedEnum<typeof LeadEventEvent>;

export type LeadEvent = {
    event: LeadEventEvent;
    timestamp: string;
    eventId: string;
    eventName: string;
    customerName: string;
    customerEmail: string;
    customerAvatar: string;
    clickId: string;
    linkId: string;
    domain: string;
    key: string;
    url: string;
    continent: string | null;
    country: string | null;
    city: string | null;
    device: string | null;
    browser: string | null;
    os: string | null;
    referer: string | null;
    qr: number | null;
    ip: string | null;
};

/** @internal */
export const LeadEventEvent$inboundSchema: z.ZodNativeEnum<typeof LeadEventEvent> =
    z.nativeEnum(LeadEventEvent);

/** @internal */
export const LeadEventEvent$outboundSchema: z.ZodNativeEnum<typeof LeadEventEvent> =
    LeadEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadEventEvent$ {
    /** @deprecated use `LeadEventEvent$inboundSchema` instead. */
    export const inboundSchema = LeadEventEvent$inboundSchema;
    /** @deprecated use `LeadEventEvent$outboundSchema` instead. */
    export const outboundSchema = LeadEventEvent$outboundSchema;
}

/** @internal */
export const LeadEvent$inboundSchema: z.ZodType<LeadEvent, z.ZodTypeDef, unknown> = z
    .object({
        event: LeadEventEvent$inboundSchema,
        timestamp: z.string(),
        event_id: z.string(),
        event_name: z.string(),
        customer_name: z.string(),
        customer_email: z.string(),
        customer_avatar: z.string(),
        click_id: z.string(),
        link_id: z.string(),
        domain: z.string(),
        key: z.string(),
        url: z.string(),
        continent: z.nullable(z.string()),
        country: z.nullable(z.string()),
        city: z.nullable(z.string()),
        device: z.nullable(z.string()),
        browser: z.nullable(z.string()),
        os: z.nullable(z.string()),
        referer: z.nullable(z.string()),
        qr: z.nullable(z.number()),
        ip: z.nullable(z.string()),
    })
    .transform((v) => {
        return remap$(v, {
            event_id: "eventId",
            event_name: "eventName",
            customer_name: "customerName",
            customer_email: "customerEmail",
            customer_avatar: "customerAvatar",
            click_id: "clickId",
            link_id: "linkId",
        });
    });

/** @internal */
export type LeadEvent$Outbound = {
    event: string;
    timestamp: string;
    event_id: string;
    event_name: string;
    customer_name: string;
    customer_email: string;
    customer_avatar: string;
    click_id: string;
    link_id: string;
    domain: string;
    key: string;
    url: string;
    continent: string | null;
    country: string | null;
    city: string | null;
    device: string | null;
    browser: string | null;
    os: string | null;
    referer: string | null;
    qr: number | null;
    ip: string | null;
};

/** @internal */
export const LeadEvent$outboundSchema: z.ZodType<LeadEvent$Outbound, z.ZodTypeDef, LeadEvent> = z
    .object({
        event: LeadEventEvent$outboundSchema,
        timestamp: z.string(),
        eventId: z.string(),
        eventName: z.string(),
        customerName: z.string(),
        customerEmail: z.string(),
        customerAvatar: z.string(),
        clickId: z.string(),
        linkId: z.string(),
        domain: z.string(),
        key: z.string(),
        url: z.string(),
        continent: z.nullable(z.string()),
        country: z.nullable(z.string()),
        city: z.nullable(z.string()),
        device: z.nullable(z.string()),
        browser: z.nullable(z.string()),
        os: z.nullable(z.string()),
        referer: z.nullable(z.string()),
        qr: z.nullable(z.number()),
        ip: z.nullable(z.string()),
    })
    .transform((v) => {
        return remap$(v, {
            eventId: "event_id",
            eventName: "event_name",
            customerName: "customer_name",
            customerEmail: "customer_email",
            customerAvatar: "customer_avatar",
            clickId: "click_id",
            linkId: "link_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadEvent$ {
    /** @deprecated use `LeadEvent$inboundSchema` instead. */
    export const inboundSchema = LeadEvent$inboundSchema;
    /** @deprecated use `LeadEvent$outboundSchema` instead. */
    export const outboundSchema = LeadEvent$outboundSchema;
    /** @deprecated use `LeadEvent$Outbound` instead. */
    export type Outbound = LeadEvent$Outbound;
}
