/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TagSchema,
  TagSchema$inboundSchema,
  TagSchema$Outbound,
  TagSchema$outboundSchema,
} from "./tagschema.js";

export const LeadCreatedEventEvent = {
  LeadCreated: "lead.created",
} as const;
export type LeadCreatedEventEvent = ClosedEnum<typeof LeadCreatedEventEvent>;

export type LeadCreatedEventCustomer = {
  /**
   * The unique ID of the customer. You may use either the customer's `id` on Dub (obtained via `/customers` endpoint) or their `externalId` (unique ID within your system, prefixed with `ext_`, e.g. `ext_123`).
   */
  id: string;
  /**
   * Unique identifier for the customer in the client's app.
   */
  externalId: string;
  /**
   * Name of the customer.
   */
  name: string;
  /**
   * Email of the customer.
   */
  email?: string | null | undefined;
  /**
   * Avatar URL of the customer.
   */
  avatar?: string | null | undefined;
  /**
   * Country of the customer.
   */
  country?: string | null | undefined;
  /**
   * Total number of sales for the customer.
   */
  sales?: number | null | undefined;
  /**
   * Total amount of sales for the customer.
   */
  saleAmount?: number | null | undefined;
  /**
   * The date the customer was created.
   */
  createdAt: string;
};

export type LeadCreatedEventClick = {
  id: string;
  timestamp: string;
  url: string;
  country: string;
  city: string;
  region: string;
  continent: string;
  device: string;
  browser: string;
  os: string;
  trigger?: string | null | undefined;
  referer: string;
  refererUrl: string;
  qr: boolean;
  ip: string;
};

export type LeadCreatedEventTestVariants = {
  url: string;
  percentage: number;
};

export type LeadCreatedEventLink = {
  /**
   * The unique ID of the short link.
   */
  id: string;
  /**
   * The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
   */
  domain: string;
  /**
   * The short link slug. If not provided, a random 7-character slug will be generated.
   */
  key: string;
  url: string;
  trackConversion: boolean;
  /**
   * The ID of the link in your database. If set, it can be used to identify the link in future API requests (must be prefixed with 'ext_' when passed as a query parameter). This key is unique across your workspace.
   */
  externalId: string | null;
  /**
   * The ID of the tenant that created the link inside your system. If set, it can be used to fetch all links for a tenant.
   */
  tenantId: string | null;
  /**
   * The ID of the program the short link is associated with.
   */
  programId: string | null;
  /**
   * The ID of the partner the short link is associated with.
   */
  partnerId: string | null;
  archived: boolean;
  expiresAt: string;
  expiredUrl: string | null;
  /**
   * The password required to access the destination URL of the short link.
   */
  password: string | null;
  proxy: boolean;
  /**
   * The title of the short link. Will be used for Custom Link Previews if `proxy` is true.
   */
  title: string | null;
  /**
   * The description of the short link. Will be used for Custom Link Previews if `proxy` is true.
   */
  description: string | null;
  /**
   * The image of the short link. Will be used for Custom Link Previews if `proxy` is true.
   */
  image: string | null;
  /**
   * The custom link preview video (og:video). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
   */
  video: string | null;
  rewrite: boolean;
  doIndex: boolean;
  /**
   * The iOS destination URL for the short link for iOS device targeting.
   */
  ios: string | null;
  /**
   * The Android destination URL for the short link for Android device targeting.
   */
  android: string | null;
  /**
   * Geo targeting information for the short link in JSON format `{[COUNTRY]: https://example.com }`. See https://d.to/geo for more information.
   */
  geo: { [k: string]: string } | null;
  publicStats: boolean;
  /**
   * The tags assigned to the short link.
   */
  tags: Array<TagSchema> | null;
  /**
   * The unique ID of the folder assigned to the short link.
   */
  folderId: string | null;
  /**
   * The IDs of the webhooks that the short link is associated with.
   */
  webhookIds: Array<string>;
  /**
   * The comments for the short link.
   */
  comments: string | null;
  /**
   * The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
   */
  shortLink: string;
  /**
   * The full URL of the QR code for the short link (e.g. `https://api.dub.co/qr?url=https://dub.sh/try`).
   */
  qrCode: string;
  /**
   * The UTM source of the short link.
   */
  utmSource: string | null;
  /**
   * The UTM medium of the short link.
   */
  utmMedium: string | null;
  /**
   * The UTM campaign of the short link.
   */
  utmCampaign: string | null;
  /**
   * The UTM term of the short link.
   */
  utmTerm: string | null;
  /**
   * The UTM content of the short link.
   */
  utmContent: string | null;
  /**
   * An array of A/B test URLs and the percentage of traffic to send to each URL.
   */
  testVariants?: Array<LeadCreatedEventTestVariants> | null | undefined;
  testStartedAt: string | null;
  testCompletedAt: string | null;
  userId: string | null;
  /**
   * The workspace ID of the short link.
   */
  workspaceId: string;
  /**
   * The number of clicks on the short link.
   */
  clicks?: number | undefined;
  /**
   * The number of leads the short link has generated.
   */
  leads?: number | undefined;
  /**
   * The number of leads that converted to paying customers.
   */
  conversions?: number | undefined;
  /**
   * The total number of sales (includes recurring sales) generated by the short link.
   */
  sales?: number | undefined;
  /**
   * The total dollar value of sales (in cents) generated by the short link.
   */
  saleAmount?: number | undefined;
  lastClicked: string;
  createdAt: string;
  updatedAt: string;
  /**
   * Deprecated: Use `tags` instead. The unique ID of the tag assigned to the short link.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  tagId: string | null;
  /**
   * Deprecated: Use `workspaceId` instead. The project ID of the short link.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  projectId: string;
};

export type Partner = {
  /**
   * The partner's unique ID on Dub.
   */
  id: string;
  /**
   * The partner's full legal name.
   */
  name: string;
  /**
   * The partner's email address. Should be a unique value across Dub.
   */
  email: string | null;
  /**
   * The partner's avatar image.
   */
  image: string | null;
  /**
   * The date when the partner enabled payouts.
   */
  payoutsEnabledAt: string | null;
  /**
   * The partner's country (required for tax purposes).
   */
  country: string | null;
  groupId?: string | null | undefined;
  totalClicks: number;
  totalLeads: number;
  totalConversions: number;
  totalSales: number;
  totalSaleAmount: number;
  totalCommissions: number;
};

export type LeadCreatedEventData = {
  eventName: string;
  customer: LeadCreatedEventCustomer;
  click: LeadCreatedEventClick;
  link: LeadCreatedEventLink;
  partner?: Partner | null | undefined;
  metadata: { [k: string]: any } | null;
};

/**
 * Triggered when a lead is created.
 */
export type LeadCreatedEvent = {
  id: string;
  event: LeadCreatedEventEvent;
  createdAt: string;
  data: LeadCreatedEventData;
};

/** @internal */
export const LeadCreatedEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof LeadCreatedEventEvent
> = z.nativeEnum(LeadCreatedEventEvent);

/** @internal */
export const LeadCreatedEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof LeadCreatedEventEvent
> = LeadCreatedEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreatedEventEvent$ {
  /** @deprecated use `LeadCreatedEventEvent$inboundSchema` instead. */
  export const inboundSchema = LeadCreatedEventEvent$inboundSchema;
  /** @deprecated use `LeadCreatedEventEvent$outboundSchema` instead. */
  export const outboundSchema = LeadCreatedEventEvent$outboundSchema;
}

/** @internal */
export const LeadCreatedEventCustomer$inboundSchema: z.ZodType<
  LeadCreatedEventCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  externalId: z.string(),
  name: z.string(),
  email: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  sales: z.nullable(z.number()).optional(),
  saleAmount: z.nullable(z.number()).optional(),
  createdAt: z.string(),
});

/** @internal */
export type LeadCreatedEventCustomer$Outbound = {
  id: string;
  externalId: string;
  name: string;
  email?: string | null | undefined;
  avatar?: string | null | undefined;
  country?: string | null | undefined;
  sales?: number | null | undefined;
  saleAmount?: number | null | undefined;
  createdAt: string;
};

/** @internal */
export const LeadCreatedEventCustomer$outboundSchema: z.ZodType<
  LeadCreatedEventCustomer$Outbound,
  z.ZodTypeDef,
  LeadCreatedEventCustomer
> = z.object({
  id: z.string(),
  externalId: z.string(),
  name: z.string(),
  email: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  sales: z.nullable(z.number()).optional(),
  saleAmount: z.nullable(z.number()).optional(),
  createdAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreatedEventCustomer$ {
  /** @deprecated use `LeadCreatedEventCustomer$inboundSchema` instead. */
  export const inboundSchema = LeadCreatedEventCustomer$inboundSchema;
  /** @deprecated use `LeadCreatedEventCustomer$outboundSchema` instead. */
  export const outboundSchema = LeadCreatedEventCustomer$outboundSchema;
  /** @deprecated use `LeadCreatedEventCustomer$Outbound` instead. */
  export type Outbound = LeadCreatedEventCustomer$Outbound;
}

export function leadCreatedEventCustomerToJSON(
  leadCreatedEventCustomer: LeadCreatedEventCustomer,
): string {
  return JSON.stringify(
    LeadCreatedEventCustomer$outboundSchema.parse(leadCreatedEventCustomer),
  );
}

export function leadCreatedEventCustomerFromJSON(
  jsonString: string,
): SafeParseResult<LeadCreatedEventCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadCreatedEventCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadCreatedEventCustomer' from JSON`,
  );
}

/** @internal */
export const LeadCreatedEventClick$inboundSchema: z.ZodType<
  LeadCreatedEventClick,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  timestamp: z.string(),
  url: z.string(),
  country: z.string(),
  city: z.string(),
  region: z.string(),
  continent: z.string(),
  device: z.string(),
  browser: z.string(),
  os: z.string(),
  trigger: z.nullable(z.string()).optional(),
  referer: z.string(),
  refererUrl: z.string(),
  qr: z.boolean(),
  ip: z.string(),
});

/** @internal */
export type LeadCreatedEventClick$Outbound = {
  id: string;
  timestamp: string;
  url: string;
  country: string;
  city: string;
  region: string;
  continent: string;
  device: string;
  browser: string;
  os: string;
  trigger?: string | null | undefined;
  referer: string;
  refererUrl: string;
  qr: boolean;
  ip: string;
};

/** @internal */
export const LeadCreatedEventClick$outboundSchema: z.ZodType<
  LeadCreatedEventClick$Outbound,
  z.ZodTypeDef,
  LeadCreatedEventClick
> = z.object({
  id: z.string(),
  timestamp: z.string(),
  url: z.string(),
  country: z.string(),
  city: z.string(),
  region: z.string(),
  continent: z.string(),
  device: z.string(),
  browser: z.string(),
  os: z.string(),
  trigger: z.nullable(z.string()).optional(),
  referer: z.string(),
  refererUrl: z.string(),
  qr: z.boolean(),
  ip: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreatedEventClick$ {
  /** @deprecated use `LeadCreatedEventClick$inboundSchema` instead. */
  export const inboundSchema = LeadCreatedEventClick$inboundSchema;
  /** @deprecated use `LeadCreatedEventClick$outboundSchema` instead. */
  export const outboundSchema = LeadCreatedEventClick$outboundSchema;
  /** @deprecated use `LeadCreatedEventClick$Outbound` instead. */
  export type Outbound = LeadCreatedEventClick$Outbound;
}

export function leadCreatedEventClickToJSON(
  leadCreatedEventClick: LeadCreatedEventClick,
): string {
  return JSON.stringify(
    LeadCreatedEventClick$outboundSchema.parse(leadCreatedEventClick),
  );
}

export function leadCreatedEventClickFromJSON(
  jsonString: string,
): SafeParseResult<LeadCreatedEventClick, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadCreatedEventClick$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadCreatedEventClick' from JSON`,
  );
}

/** @internal */
export const LeadCreatedEventTestVariants$inboundSchema: z.ZodType<
  LeadCreatedEventTestVariants,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  percentage: z.number(),
});

/** @internal */
export type LeadCreatedEventTestVariants$Outbound = {
  url: string;
  percentage: number;
};

/** @internal */
export const LeadCreatedEventTestVariants$outboundSchema: z.ZodType<
  LeadCreatedEventTestVariants$Outbound,
  z.ZodTypeDef,
  LeadCreatedEventTestVariants
> = z.object({
  url: z.string(),
  percentage: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreatedEventTestVariants$ {
  /** @deprecated use `LeadCreatedEventTestVariants$inboundSchema` instead. */
  export const inboundSchema = LeadCreatedEventTestVariants$inboundSchema;
  /** @deprecated use `LeadCreatedEventTestVariants$outboundSchema` instead. */
  export const outboundSchema = LeadCreatedEventTestVariants$outboundSchema;
  /** @deprecated use `LeadCreatedEventTestVariants$Outbound` instead. */
  export type Outbound = LeadCreatedEventTestVariants$Outbound;
}

export function leadCreatedEventTestVariantsToJSON(
  leadCreatedEventTestVariants: LeadCreatedEventTestVariants,
): string {
  return JSON.stringify(
    LeadCreatedEventTestVariants$outboundSchema.parse(
      leadCreatedEventTestVariants,
    ),
  );
}

export function leadCreatedEventTestVariantsFromJSON(
  jsonString: string,
): SafeParseResult<LeadCreatedEventTestVariants, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadCreatedEventTestVariants$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadCreatedEventTestVariants' from JSON`,
  );
}

/** @internal */
export const LeadCreatedEventLink$inboundSchema: z.ZodType<
  LeadCreatedEventLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  domain: z.string(),
  key: z.string(),
  url: z.string(),
  trackConversion: z.boolean(),
  externalId: z.nullable(z.string()),
  tenantId: z.nullable(z.string()),
  programId: z.nullable(z.string()),
  partnerId: z.nullable(z.string()),
  archived: z.boolean(),
  expiresAt: z.string(),
  expiredUrl: z.nullable(z.string()),
  password: z.nullable(z.string()),
  proxy: z.boolean(),
  title: z.nullable(z.string()),
  description: z.nullable(z.string()),
  image: z.nullable(z.string()),
  video: z.nullable(z.string()),
  rewrite: z.boolean(),
  doIndex: z.boolean(),
  ios: z.nullable(z.string()),
  android: z.nullable(z.string()),
  geo: z.nullable(z.record(z.string())),
  publicStats: z.boolean(),
  tags: z.nullable(z.array(TagSchema$inboundSchema)),
  folderId: z.nullable(z.string()),
  webhookIds: z.array(z.string()),
  comments: z.nullable(z.string()),
  shortLink: z.string(),
  qrCode: z.string(),
  utm_source: z.nullable(z.string()),
  utm_medium: z.nullable(z.string()),
  utm_campaign: z.nullable(z.string()),
  utm_term: z.nullable(z.string()),
  utm_content: z.nullable(z.string()),
  testVariants: z.nullable(
    z.array(z.lazy(() => LeadCreatedEventTestVariants$inboundSchema)),
  ).optional(),
  testStartedAt: z.nullable(z.string()),
  testCompletedAt: z.nullable(z.string()),
  userId: z.nullable(z.string()),
  workspaceId: z.string(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  conversions: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
  lastClicked: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  tagId: z.nullable(z.string()),
  projectId: z.string(),
}).transform((v) => {
  return remap$(v, {
    "utm_source": "utmSource",
    "utm_medium": "utmMedium",
    "utm_campaign": "utmCampaign",
    "utm_term": "utmTerm",
    "utm_content": "utmContent",
  });
});

/** @internal */
export type LeadCreatedEventLink$Outbound = {
  id: string;
  domain: string;
  key: string;
  url: string;
  trackConversion: boolean;
  externalId: string | null;
  tenantId: string | null;
  programId: string | null;
  partnerId: string | null;
  archived: boolean;
  expiresAt: string;
  expiredUrl: string | null;
  password: string | null;
  proxy: boolean;
  title: string | null;
  description: string | null;
  image: string | null;
  video: string | null;
  rewrite: boolean;
  doIndex: boolean;
  ios: string | null;
  android: string | null;
  geo: { [k: string]: string } | null;
  publicStats: boolean;
  tags: Array<TagSchema$Outbound> | null;
  folderId: string | null;
  webhookIds: Array<string>;
  comments: string | null;
  shortLink: string;
  qrCode: string;
  utm_source: string | null;
  utm_medium: string | null;
  utm_campaign: string | null;
  utm_term: string | null;
  utm_content: string | null;
  testVariants?:
    | Array<LeadCreatedEventTestVariants$Outbound>
    | null
    | undefined;
  testStartedAt: string | null;
  testCompletedAt: string | null;
  userId: string | null;
  workspaceId: string;
  clicks: number;
  leads: number;
  conversions: number;
  sales: number;
  saleAmount: number;
  lastClicked: string;
  createdAt: string;
  updatedAt: string;
  tagId: string | null;
  projectId: string;
};

/** @internal */
export const LeadCreatedEventLink$outboundSchema: z.ZodType<
  LeadCreatedEventLink$Outbound,
  z.ZodTypeDef,
  LeadCreatedEventLink
> = z.object({
  id: z.string(),
  domain: z.string(),
  key: z.string(),
  url: z.string(),
  trackConversion: z.boolean(),
  externalId: z.nullable(z.string()),
  tenantId: z.nullable(z.string()),
  programId: z.nullable(z.string()),
  partnerId: z.nullable(z.string()),
  archived: z.boolean(),
  expiresAt: z.string(),
  expiredUrl: z.nullable(z.string()),
  password: z.nullable(z.string()),
  proxy: z.boolean(),
  title: z.nullable(z.string()),
  description: z.nullable(z.string()),
  image: z.nullable(z.string()),
  video: z.nullable(z.string()),
  rewrite: z.boolean(),
  doIndex: z.boolean(),
  ios: z.nullable(z.string()),
  android: z.nullable(z.string()),
  geo: z.nullable(z.record(z.string())),
  publicStats: z.boolean(),
  tags: z.nullable(z.array(TagSchema$outboundSchema)),
  folderId: z.nullable(z.string()),
  webhookIds: z.array(z.string()),
  comments: z.nullable(z.string()),
  shortLink: z.string(),
  qrCode: z.string(),
  utmSource: z.nullable(z.string()),
  utmMedium: z.nullable(z.string()),
  utmCampaign: z.nullable(z.string()),
  utmTerm: z.nullable(z.string()),
  utmContent: z.nullable(z.string()),
  testVariants: z.nullable(
    z.array(z.lazy(() => LeadCreatedEventTestVariants$outboundSchema)),
  ).optional(),
  testStartedAt: z.nullable(z.string()),
  testCompletedAt: z.nullable(z.string()),
  userId: z.nullable(z.string()),
  workspaceId: z.string(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  conversions: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
  lastClicked: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  tagId: z.nullable(z.string()),
  projectId: z.string(),
}).transform((v) => {
  return remap$(v, {
    utmSource: "utm_source",
    utmMedium: "utm_medium",
    utmCampaign: "utm_campaign",
    utmTerm: "utm_term",
    utmContent: "utm_content",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreatedEventLink$ {
  /** @deprecated use `LeadCreatedEventLink$inboundSchema` instead. */
  export const inboundSchema = LeadCreatedEventLink$inboundSchema;
  /** @deprecated use `LeadCreatedEventLink$outboundSchema` instead. */
  export const outboundSchema = LeadCreatedEventLink$outboundSchema;
  /** @deprecated use `LeadCreatedEventLink$Outbound` instead. */
  export type Outbound = LeadCreatedEventLink$Outbound;
}

export function leadCreatedEventLinkToJSON(
  leadCreatedEventLink: LeadCreatedEventLink,
): string {
  return JSON.stringify(
    LeadCreatedEventLink$outboundSchema.parse(leadCreatedEventLink),
  );
}

export function leadCreatedEventLinkFromJSON(
  jsonString: string,
): SafeParseResult<LeadCreatedEventLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadCreatedEventLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadCreatedEventLink' from JSON`,
  );
}

/** @internal */
export const Partner$inboundSchema: z.ZodType<Partner, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    name: z.string(),
    email: z.nullable(z.string()),
    image: z.nullable(z.string()),
    payoutsEnabledAt: z.nullable(z.string()),
    country: z.nullable(z.string()),
    groupId: z.nullable(z.string()).optional(),
    totalClicks: z.number(),
    totalLeads: z.number(),
    totalConversions: z.number(),
    totalSales: z.number(),
    totalSaleAmount: z.number(),
    totalCommissions: z.number(),
  });

/** @internal */
export type Partner$Outbound = {
  id: string;
  name: string;
  email: string | null;
  image: string | null;
  payoutsEnabledAt: string | null;
  country: string | null;
  groupId?: string | null | undefined;
  totalClicks: number;
  totalLeads: number;
  totalConversions: number;
  totalSales: number;
  totalSaleAmount: number;
  totalCommissions: number;
};

/** @internal */
export const Partner$outboundSchema: z.ZodType<
  Partner$Outbound,
  z.ZodTypeDef,
  Partner
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.nullable(z.string()),
  image: z.nullable(z.string()),
  payoutsEnabledAt: z.nullable(z.string()),
  country: z.nullable(z.string()),
  groupId: z.nullable(z.string()).optional(),
  totalClicks: z.number(),
  totalLeads: z.number(),
  totalConversions: z.number(),
  totalSales: z.number(),
  totalSaleAmount: z.number(),
  totalCommissions: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Partner$ {
  /** @deprecated use `Partner$inboundSchema` instead. */
  export const inboundSchema = Partner$inboundSchema;
  /** @deprecated use `Partner$outboundSchema` instead. */
  export const outboundSchema = Partner$outboundSchema;
  /** @deprecated use `Partner$Outbound` instead. */
  export type Outbound = Partner$Outbound;
}

export function partnerToJSON(partner: Partner): string {
  return JSON.stringify(Partner$outboundSchema.parse(partner));
}

export function partnerFromJSON(
  jsonString: string,
): SafeParseResult<Partner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Partner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Partner' from JSON`,
  );
}

/** @internal */
export const LeadCreatedEventData$inboundSchema: z.ZodType<
  LeadCreatedEventData,
  z.ZodTypeDef,
  unknown
> = z.object({
  eventName: z.string(),
  customer: z.lazy(() => LeadCreatedEventCustomer$inboundSchema),
  click: z.lazy(() => LeadCreatedEventClick$inboundSchema),
  link: z.lazy(() => LeadCreatedEventLink$inboundSchema),
  partner: z.nullable(z.lazy(() => Partner$inboundSchema)).optional(),
  metadata: z.nullable(z.record(z.any())),
});

/** @internal */
export type LeadCreatedEventData$Outbound = {
  eventName: string;
  customer: LeadCreatedEventCustomer$Outbound;
  click: LeadCreatedEventClick$Outbound;
  link: LeadCreatedEventLink$Outbound;
  partner?: Partner$Outbound | null | undefined;
  metadata: { [k: string]: any } | null;
};

/** @internal */
export const LeadCreatedEventData$outboundSchema: z.ZodType<
  LeadCreatedEventData$Outbound,
  z.ZodTypeDef,
  LeadCreatedEventData
> = z.object({
  eventName: z.string(),
  customer: z.lazy(() => LeadCreatedEventCustomer$outboundSchema),
  click: z.lazy(() => LeadCreatedEventClick$outboundSchema),
  link: z.lazy(() => LeadCreatedEventLink$outboundSchema),
  partner: z.nullable(z.lazy(() => Partner$outboundSchema)).optional(),
  metadata: z.nullable(z.record(z.any())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreatedEventData$ {
  /** @deprecated use `LeadCreatedEventData$inboundSchema` instead. */
  export const inboundSchema = LeadCreatedEventData$inboundSchema;
  /** @deprecated use `LeadCreatedEventData$outboundSchema` instead. */
  export const outboundSchema = LeadCreatedEventData$outboundSchema;
  /** @deprecated use `LeadCreatedEventData$Outbound` instead. */
  export type Outbound = LeadCreatedEventData$Outbound;
}

export function leadCreatedEventDataToJSON(
  leadCreatedEventData: LeadCreatedEventData,
): string {
  return JSON.stringify(
    LeadCreatedEventData$outboundSchema.parse(leadCreatedEventData),
  );
}

export function leadCreatedEventDataFromJSON(
  jsonString: string,
): SafeParseResult<LeadCreatedEventData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadCreatedEventData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadCreatedEventData' from JSON`,
  );
}

/** @internal */
export const LeadCreatedEvent$inboundSchema: z.ZodType<
  LeadCreatedEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  event: LeadCreatedEventEvent$inboundSchema,
  createdAt: z.string(),
  data: z.lazy(() => LeadCreatedEventData$inboundSchema),
});

/** @internal */
export type LeadCreatedEvent$Outbound = {
  id: string;
  event: string;
  createdAt: string;
  data: LeadCreatedEventData$Outbound;
};

/** @internal */
export const LeadCreatedEvent$outboundSchema: z.ZodType<
  LeadCreatedEvent$Outbound,
  z.ZodTypeDef,
  LeadCreatedEvent
> = z.object({
  id: z.string(),
  event: LeadCreatedEventEvent$outboundSchema,
  createdAt: z.string(),
  data: z.lazy(() => LeadCreatedEventData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreatedEvent$ {
  /** @deprecated use `LeadCreatedEvent$inboundSchema` instead. */
  export const inboundSchema = LeadCreatedEvent$inboundSchema;
  /** @deprecated use `LeadCreatedEvent$outboundSchema` instead. */
  export const outboundSchema = LeadCreatedEvent$outboundSchema;
  /** @deprecated use `LeadCreatedEvent$Outbound` instead. */
  export type Outbound = LeadCreatedEvent$Outbound;
}

export function leadCreatedEventToJSON(
  leadCreatedEvent: LeadCreatedEvent,
): string {
  return JSON.stringify(
    LeadCreatedEvent$outboundSchema.parse(leadCreatedEvent),
  );
}

export function leadCreatedEventFromJSON(
  jsonString: string,
): SafeParseResult<LeadCreatedEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadCreatedEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadCreatedEvent' from JSON`,
  );
}
