/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PartnerEnrolledEventEvent = {
  PartnerEnrolled: "partner.enrolled",
} as const;
export type PartnerEnrolledEventEvent = ClosedEnum<
  typeof PartnerEnrolledEventEvent
>;

/**
 * The status of the partner's enrollment in the program.
 */
export const Status = {
  Pending: "pending",
  Approved: "approved",
  Rejected: "rejected",
  Invited: "invited",
  Declined: "declined",
  Banned: "banned",
  Archived: "archived",
} as const;
/**
 * The status of the partner's enrollment in the program.
 */
export type Status = ClosedEnum<typeof Status>;

export type PartnerEnrolledEventLink = {
  /**
   * The unique ID of the short link.
   */
  id: string;
  /**
   * The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
   */
  domain: string;
  /**
   * The short link slug. If not provided, a random 7-character slug will be generated.
   */
  key: string;
  /**
   * The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
   */
  shortLink: string;
  /**
   * The destination URL of the short link.
   */
  url: string;
  /**
   * The number of clicks on the short link.
   */
  clicks?: number | undefined;
  /**
   * The number of leads the short link has generated.
   */
  leads?: number | undefined;
  /**
   * The total number of sales (includes recurring sales) generated by the short link.
   */
  sales?: number | undefined;
  /**
   * The total dollar value of sales (in cents) generated by the short link.
   */
  saleAmount?: number | undefined;
};

/**
 * If the partner was banned from the program, this is the reason for the ban.
 */
export const BannedReason = {
  TosViolation: "tos_violation",
  InappropriateContent: "inappropriate_content",
  FakeTraffic: "fake_traffic",
  Fraud: "fraud",
  Spam: "spam",
  BrandAbuse: "brand_abuse",
} as const;
/**
 * If the partner was banned from the program, this is the reason for the ban.
 */
export type BannedReason = ClosedEnum<typeof BannedReason>;

export type PartnerEnrolledEventData = {
  /**
   * The partner's unique ID on Dub.
   */
  id: string;
  /**
   * The partner's full legal name.
   */
  name: string;
  /**
   * The partner's email address. Should be a unique value across Dub.
   */
  email: string | null;
  /**
   * The partner's avatar image.
   */
  image: string | null;
  /**
   * A brief description of the partner and their background.
   */
  description?: string | null | undefined;
  /**
   * The partner's country (required for tax purposes).
   */
  country: string | null;
  /**
   * The partner's PayPal email (for receiving payouts via PayPal).
   */
  paypalEmail: string | null;
  /**
   * The partner's Stripe Connect ID (for receiving payouts via Stripe).
   */
  stripeConnectId: string | null;
  /**
   * The date when the partner enabled payouts.
   */
  payoutsEnabledAt: string | null;
  /**
   * The program's unique ID on Dub.
   */
  programId: string;
  /**
   * The partner's group ID on Dub.
   */
  groupId?: string | null | undefined;
  /**
   * The partner's unique ID on Dub.
   */
  partnerId: string;
  /**
   * The partner's unique ID within your database. Can be useful for associating the partner with a user in your database and retrieving/update their data in the future.
   */
  tenantId: string | null;
  createdAt: string;
  /**
   * The status of the partner's enrollment in the program.
   */
  status: Status;
  /**
   * The partner's referral links in this program.
   */
  links: Array<PartnerEnrolledEventLink> | null;
  /**
   * The total commissions paid to the partner for their referrals. Defaults to 0 if `includeExpandedFields` is false.
   */
  totalCommissions?: number | undefined;
  clickRewardId?: string | null | undefined;
  leadRewardId?: string | null | undefined;
  saleRewardId?: string | null | undefined;
  discountId?: string | null | undefined;
  /**
   * If the partner submitted an application to join the program, this is the ID of the application.
   */
  applicationId?: string | null | undefined;
  /**
   * If the partner was banned from the program, this is the date of the ban.
   */
  bannedAt?: string | null | undefined;
  /**
   * If the partner was banned from the program, this is the reason for the ban.
   */
  bannedReason?: BannedReason | null | undefined;
  /**
   * The total number of clicks on the partner's links. Defaults to 0 if `includeExpandedFields` is false.
   */
  clicks?: number | undefined;
  /**
   * The total number of leads generated by the partner's links. Defaults to 0 if `includeExpandedFields` is false.
   */
  leads?: number | undefined;
  /**
   * The total number of leads that converted to paying customers. Defaults to 0 if `includeExpandedFields` is false.
   */
  conversions?: number | undefined;
  /**
   * The total number of sales generated by the partner's links (includes recurring sales). Defaults to 0 if `includeExpandedFields` is false.
   */
  sales?: number | undefined;
  /**
   * The total amount of sales (in cents) generated by the partner's links. Defaults to 0 if `includeExpandedFields` is false.
   */
  saleAmount?: number | undefined;
  /**
   * The total net revenue generated by the partner. Defaults to 0 if `includeExpandedFields` is false.
   */
  netRevenue?: number | undefined;
  /**
   * The partner's website URL (including the https protocol).
   */
  website?: string | null | undefined;
  websiteTxtRecord?: string | null | undefined;
  websiteVerifiedAt?: string | null | undefined;
  /**
   * The partner's YouTube channel username (e.g. `johndoe`).
   */
  youtube?: string | null | undefined;
  youtubeVerifiedAt?: string | null | undefined;
  youtubeSubscriberCount?: number | null | undefined;
  youtubeViewCount?: number | null | undefined;
  /**
   * The partner's Twitter username (e.g. `johndoe`).
   */
  twitter?: string | null | undefined;
  twitterVerifiedAt?: string | null | undefined;
  /**
   * The partner's LinkedIn username (e.g. `johndoe`).
   */
  linkedin?: string | null | undefined;
  linkedinVerifiedAt?: string | null | undefined;
  /**
   * The partner's Instagram username (e.g. `johndoe`).
   */
  instagram?: string | null | undefined;
  instagramVerifiedAt?: string | null | undefined;
  /**
   * The partner's TikTok username (e.g. `johndoe`).
   */
  tiktok?: string | null | undefined;
  tiktokVerifiedAt?: string | null | undefined;
};

/**
 * Triggered when a partner is enrolled.
 */
export type PartnerEnrolledEvent = {
  id: string;
  event: PartnerEnrolledEventEvent;
  createdAt: string;
  data: PartnerEnrolledEventData;
};

/** @internal */
export const PartnerEnrolledEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof PartnerEnrolledEventEvent
> = z.nativeEnum(PartnerEnrolledEventEvent);

/** @internal */
export const PartnerEnrolledEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof PartnerEnrolledEventEvent
> = PartnerEnrolledEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PartnerEnrolledEventEvent$ {
  /** @deprecated use `PartnerEnrolledEventEvent$inboundSchema` instead. */
  export const inboundSchema = PartnerEnrolledEventEvent$inboundSchema;
  /** @deprecated use `PartnerEnrolledEventEvent$outboundSchema` instead. */
  export const outboundSchema = PartnerEnrolledEventEvent$outboundSchema;
}

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const PartnerEnrolledEventLink$inboundSchema: z.ZodType<
  PartnerEnrolledEventLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  domain: z.string(),
  key: z.string(),
  shortLink: z.string(),
  url: z.string(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
});

/** @internal */
export type PartnerEnrolledEventLink$Outbound = {
  id: string;
  domain: string;
  key: string;
  shortLink: string;
  url: string;
  clicks: number;
  leads: number;
  sales: number;
  saleAmount: number;
};

/** @internal */
export const PartnerEnrolledEventLink$outboundSchema: z.ZodType<
  PartnerEnrolledEventLink$Outbound,
  z.ZodTypeDef,
  PartnerEnrolledEventLink
> = z.object({
  id: z.string(),
  domain: z.string(),
  key: z.string(),
  shortLink: z.string(),
  url: z.string(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PartnerEnrolledEventLink$ {
  /** @deprecated use `PartnerEnrolledEventLink$inboundSchema` instead. */
  export const inboundSchema = PartnerEnrolledEventLink$inboundSchema;
  /** @deprecated use `PartnerEnrolledEventLink$outboundSchema` instead. */
  export const outboundSchema = PartnerEnrolledEventLink$outboundSchema;
  /** @deprecated use `PartnerEnrolledEventLink$Outbound` instead. */
  export type Outbound = PartnerEnrolledEventLink$Outbound;
}

export function partnerEnrolledEventLinkToJSON(
  partnerEnrolledEventLink: PartnerEnrolledEventLink,
): string {
  return JSON.stringify(
    PartnerEnrolledEventLink$outboundSchema.parse(partnerEnrolledEventLink),
  );
}

export function partnerEnrolledEventLinkFromJSON(
  jsonString: string,
): SafeParseResult<PartnerEnrolledEventLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PartnerEnrolledEventLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PartnerEnrolledEventLink' from JSON`,
  );
}

/** @internal */
export const BannedReason$inboundSchema: z.ZodNativeEnum<typeof BannedReason> =
  z.nativeEnum(BannedReason);

/** @internal */
export const BannedReason$outboundSchema: z.ZodNativeEnum<typeof BannedReason> =
  BannedReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BannedReason$ {
  /** @deprecated use `BannedReason$inboundSchema` instead. */
  export const inboundSchema = BannedReason$inboundSchema;
  /** @deprecated use `BannedReason$outboundSchema` instead. */
  export const outboundSchema = BannedReason$outboundSchema;
}

/** @internal */
export const PartnerEnrolledEventData$inboundSchema: z.ZodType<
  PartnerEnrolledEventData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.nullable(z.string()),
  image: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()),
  paypalEmail: z.nullable(z.string()),
  stripeConnectId: z.nullable(z.string()),
  payoutsEnabledAt: z.nullable(z.string()),
  programId: z.string(),
  groupId: z.nullable(z.string()).optional(),
  partnerId: z.string(),
  tenantId: z.nullable(z.string()),
  createdAt: z.string(),
  status: Status$inboundSchema,
  links: z.nullable(
    z.array(z.lazy(() => PartnerEnrolledEventLink$inboundSchema)),
  ),
  totalCommissions: z.number().default(0),
  clickRewardId: z.nullable(z.string()).optional(),
  leadRewardId: z.nullable(z.string()).optional(),
  saleRewardId: z.nullable(z.string()).optional(),
  discountId: z.nullable(z.string()).optional(),
  applicationId: z.nullable(z.string()).optional(),
  bannedAt: z.nullable(z.string()).optional(),
  bannedReason: z.nullable(BannedReason$inboundSchema).optional(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  conversions: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
  netRevenue: z.number().default(0),
  website: z.nullable(z.string()).optional(),
  websiteTxtRecord: z.nullable(z.string()).optional(),
  websiteVerifiedAt: z.nullable(z.string()).optional(),
  youtube: z.nullable(z.string()).optional(),
  youtubeVerifiedAt: z.nullable(z.string()).optional(),
  youtubeSubscriberCount: z.nullable(z.number()).optional(),
  youtubeViewCount: z.nullable(z.number()).optional(),
  twitter: z.nullable(z.string()).optional(),
  twitterVerifiedAt: z.nullable(z.string()).optional(),
  linkedin: z.nullable(z.string()).optional(),
  linkedinVerifiedAt: z.nullable(z.string()).optional(),
  instagram: z.nullable(z.string()).optional(),
  instagramVerifiedAt: z.nullable(z.string()).optional(),
  tiktok: z.nullable(z.string()).optional(),
  tiktokVerifiedAt: z.nullable(z.string()).optional(),
});

/** @internal */
export type PartnerEnrolledEventData$Outbound = {
  id: string;
  name: string;
  email: string | null;
  image: string | null;
  description?: string | null | undefined;
  country: string | null;
  paypalEmail: string | null;
  stripeConnectId: string | null;
  payoutsEnabledAt: string | null;
  programId: string;
  groupId?: string | null | undefined;
  partnerId: string;
  tenantId: string | null;
  createdAt: string;
  status: string;
  links: Array<PartnerEnrolledEventLink$Outbound> | null;
  totalCommissions: number;
  clickRewardId?: string | null | undefined;
  leadRewardId?: string | null | undefined;
  saleRewardId?: string | null | undefined;
  discountId?: string | null | undefined;
  applicationId?: string | null | undefined;
  bannedAt?: string | null | undefined;
  bannedReason?: string | null | undefined;
  clicks: number;
  leads: number;
  conversions: number;
  sales: number;
  saleAmount: number;
  netRevenue: number;
  website?: string | null | undefined;
  websiteTxtRecord?: string | null | undefined;
  websiteVerifiedAt?: string | null | undefined;
  youtube?: string | null | undefined;
  youtubeVerifiedAt?: string | null | undefined;
  youtubeSubscriberCount?: number | null | undefined;
  youtubeViewCount?: number | null | undefined;
  twitter?: string | null | undefined;
  twitterVerifiedAt?: string | null | undefined;
  linkedin?: string | null | undefined;
  linkedinVerifiedAt?: string | null | undefined;
  instagram?: string | null | undefined;
  instagramVerifiedAt?: string | null | undefined;
  tiktok?: string | null | undefined;
  tiktokVerifiedAt?: string | null | undefined;
};

/** @internal */
export const PartnerEnrolledEventData$outboundSchema: z.ZodType<
  PartnerEnrolledEventData$Outbound,
  z.ZodTypeDef,
  PartnerEnrolledEventData
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.nullable(z.string()),
  image: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()),
  paypalEmail: z.nullable(z.string()),
  stripeConnectId: z.nullable(z.string()),
  payoutsEnabledAt: z.nullable(z.string()),
  programId: z.string(),
  groupId: z.nullable(z.string()).optional(),
  partnerId: z.string(),
  tenantId: z.nullable(z.string()),
  createdAt: z.string(),
  status: Status$outboundSchema,
  links: z.nullable(
    z.array(z.lazy(() => PartnerEnrolledEventLink$outboundSchema)),
  ),
  totalCommissions: z.number().default(0),
  clickRewardId: z.nullable(z.string()).optional(),
  leadRewardId: z.nullable(z.string()).optional(),
  saleRewardId: z.nullable(z.string()).optional(),
  discountId: z.nullable(z.string()).optional(),
  applicationId: z.nullable(z.string()).optional(),
  bannedAt: z.nullable(z.string()).optional(),
  bannedReason: z.nullable(BannedReason$outboundSchema).optional(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  conversions: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
  netRevenue: z.number().default(0),
  website: z.nullable(z.string()).optional(),
  websiteTxtRecord: z.nullable(z.string()).optional(),
  websiteVerifiedAt: z.nullable(z.string()).optional(),
  youtube: z.nullable(z.string()).optional(),
  youtubeVerifiedAt: z.nullable(z.string()).optional(),
  youtubeSubscriberCount: z.nullable(z.number()).optional(),
  youtubeViewCount: z.nullable(z.number()).optional(),
  twitter: z.nullable(z.string()).optional(),
  twitterVerifiedAt: z.nullable(z.string()).optional(),
  linkedin: z.nullable(z.string()).optional(),
  linkedinVerifiedAt: z.nullable(z.string()).optional(),
  instagram: z.nullable(z.string()).optional(),
  instagramVerifiedAt: z.nullable(z.string()).optional(),
  tiktok: z.nullable(z.string()).optional(),
  tiktokVerifiedAt: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PartnerEnrolledEventData$ {
  /** @deprecated use `PartnerEnrolledEventData$inboundSchema` instead. */
  export const inboundSchema = PartnerEnrolledEventData$inboundSchema;
  /** @deprecated use `PartnerEnrolledEventData$outboundSchema` instead. */
  export const outboundSchema = PartnerEnrolledEventData$outboundSchema;
  /** @deprecated use `PartnerEnrolledEventData$Outbound` instead. */
  export type Outbound = PartnerEnrolledEventData$Outbound;
}

export function partnerEnrolledEventDataToJSON(
  partnerEnrolledEventData: PartnerEnrolledEventData,
): string {
  return JSON.stringify(
    PartnerEnrolledEventData$outboundSchema.parse(partnerEnrolledEventData),
  );
}

export function partnerEnrolledEventDataFromJSON(
  jsonString: string,
): SafeParseResult<PartnerEnrolledEventData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PartnerEnrolledEventData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PartnerEnrolledEventData' from JSON`,
  );
}

/** @internal */
export const PartnerEnrolledEvent$inboundSchema: z.ZodType<
  PartnerEnrolledEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  event: PartnerEnrolledEventEvent$inboundSchema,
  createdAt: z.string(),
  data: z.lazy(() => PartnerEnrolledEventData$inboundSchema),
});

/** @internal */
export type PartnerEnrolledEvent$Outbound = {
  id: string;
  event: string;
  createdAt: string;
  data: PartnerEnrolledEventData$Outbound;
};

/** @internal */
export const PartnerEnrolledEvent$outboundSchema: z.ZodType<
  PartnerEnrolledEvent$Outbound,
  z.ZodTypeDef,
  PartnerEnrolledEvent
> = z.object({
  id: z.string(),
  event: PartnerEnrolledEventEvent$outboundSchema,
  createdAt: z.string(),
  data: z.lazy(() => PartnerEnrolledEventData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PartnerEnrolledEvent$ {
  /** @deprecated use `PartnerEnrolledEvent$inboundSchema` instead. */
  export const inboundSchema = PartnerEnrolledEvent$inboundSchema;
  /** @deprecated use `PartnerEnrolledEvent$outboundSchema` instead. */
  export const outboundSchema = PartnerEnrolledEvent$outboundSchema;
  /** @deprecated use `PartnerEnrolledEvent$Outbound` instead. */
  export type Outbound = PartnerEnrolledEvent$Outbound;
}

export function partnerEnrolledEventToJSON(
  partnerEnrolledEvent: PartnerEnrolledEvent,
): string {
  return JSON.stringify(
    PartnerEnrolledEvent$outboundSchema.parse(partnerEnrolledEvent),
  );
}

export function partnerEnrolledEventFromJSON(
  jsonString: string,
): SafeParseResult<PartnerEnrolledEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PartnerEnrolledEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PartnerEnrolledEvent' from JSON`,
  );
}
