/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AnalyticsCities = {
  /**
   * The 2-letter ISO 3166-1 country code of the country where this city is located. Learn more: https://d.to/geo
   */
  country: string;
  /**
   * The 2-letter ISO 3166-2 region code representing the region associated with the location of the user.
   */
  region: string;
  /**
   * The name of the city
   */
  city: string;
  /**
   * The number of clicks from this city
   */
  clicks?: number | undefined;
  /**
   * The number of leads from this city
   */
  leads?: number | undefined;
  /**
   * The number of sales from this city
   */
  sales?: number | undefined;
  /**
   * The total amount of sales from this city, in cents
   */
  saleAmount?: number | undefined;
};

/** @internal */
export const AnalyticsCities$inboundSchema: z.ZodType<
  AnalyticsCities,
  z.ZodTypeDef,
  unknown
> = z.object({
  country: z.string(),
  region: z.string(),
  city: z.string(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
});

/** @internal */
export type AnalyticsCities$Outbound = {
  country: string;
  region: string;
  city: string;
  clicks: number;
  leads: number;
  sales: number;
  saleAmount: number;
};

/** @internal */
export const AnalyticsCities$outboundSchema: z.ZodType<
  AnalyticsCities$Outbound,
  z.ZodTypeDef,
  AnalyticsCities
> = z.object({
  country: z.string(),
  region: z.string(),
  city: z.string(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyticsCities$ {
  /** @deprecated use `AnalyticsCities$inboundSchema` instead. */
  export const inboundSchema = AnalyticsCities$inboundSchema;
  /** @deprecated use `AnalyticsCities$outboundSchema` instead. */
  export const outboundSchema = AnalyticsCities$outboundSchema;
  /** @deprecated use `AnalyticsCities$Outbound` instead. */
  export type Outbound = AnalyticsCities$Outbound;
}

export function analyticsCitiesToJSON(
  analyticsCities: AnalyticsCities,
): string {
  return JSON.stringify(AnalyticsCities$outboundSchema.parse(analyticsCities));
}

export function analyticsCitiesFromJSON(
  jsonString: string,
): SafeParseResult<AnalyticsCities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyticsCities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyticsCities' from JSON`,
  );
}
