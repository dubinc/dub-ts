/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TagSchema,
  TagSchema$inboundSchema,
  TagSchema$Outbound,
  TagSchema$outboundSchema,
} from "./tagschema.js";

export const SaleEventEvent = {
  Sale: "sale",
} as const;
export type SaleEventEvent = ClosedEnum<typeof SaleEventEvent>;

/**
 * The payment processor via which the sale was made.
 */
export const PaymentProcessor = {
  Stripe: "stripe",
  Shopify: "shopify",
  Polar: "polar",
  Paddle: "paddle",
  Revenuecat: "revenuecat",
  Custom: "custom",
} as const;
/**
 * The payment processor via which the sale was made.
 */
export type PaymentProcessor = ClosedEnum<typeof PaymentProcessor>;

export type Sale = {
  /**
   * The amount of the sale in cents (for all two-decimal currencies). If the sale is in a zero-decimal currency, pass the full integer value (e.g. `1437` JPY). Learn more: https://d.to/currency
   */
  amount: number;
  /**
   * The invoice ID of the sale. Can be used as a idempotency key â€“ only one sale event can be recorded for a given invoice ID.
   */
  invoiceId?: string | null | undefined;
  /**
   * The payment processor via which the sale was made.
   */
  paymentProcessor?: PaymentProcessor | undefined;
};

export type SaleEventTestVariants = {
  url: string;
  percentage: number;
};

export type SaleEventLink = {
  /**
   * The unique ID of the short link.
   */
  id: string;
  /**
   * The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
   */
  domain: string;
  /**
   * The short link slug. If not provided, a random 7-character slug will be generated.
   */
  key: string;
  url: string;
  trackConversion: boolean;
  /**
   * The ID of the link in your database. If set, it can be used to identify the link in future API requests (must be prefixed with 'ext_' when passed as a query parameter). This key is unique across your workspace.
   */
  externalId: string | null;
  /**
   * The ID of the tenant that created the link inside your system. If set, it can be used to fetch all links for a tenant.
   */
  tenantId: string | null;
  /**
   * The ID of the program the short link is associated with.
   */
  programId: string | null;
  /**
   * The ID of the partner the short link is associated with.
   */
  partnerId: string | null;
  archived: boolean;
  expiresAt: string;
  expiredUrl: string | null;
  /**
   * The password required to access the destination URL of the short link.
   */
  password: string | null;
  proxy: boolean;
  /**
   * The title of the short link. Will be used for Custom Link Previews if `proxy` is true.
   */
  title: string | null;
  /**
   * The description of the short link. Will be used for Custom Link Previews if `proxy` is true.
   */
  description: string | null;
  /**
   * The image of the short link. Will be used for Custom Link Previews if `proxy` is true.
   */
  image: string | null;
  /**
   * The custom link preview video (og:video). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
   */
  video: string | null;
  rewrite: boolean;
  doIndex: boolean;
  /**
   * The iOS destination URL for the short link for iOS device targeting.
   */
  ios: string | null;
  /**
   * The Android destination URL for the short link for Android device targeting.
   */
  android: string | null;
  /**
   * Geo targeting information for the short link in JSON format `{[COUNTRY]: https://example.com }`. See https://d.to/geo for more information.
   */
  geo: { [k: string]: string } | null;
  publicStats: boolean;
  /**
   * The tags assigned to the short link.
   */
  tags: Array<TagSchema> | null;
  /**
   * The unique ID of the folder assigned to the short link.
   */
  folderId: string | null;
  /**
   * The IDs of the webhooks that the short link is associated with.
   */
  webhookIds: Array<string>;
  /**
   * The comments for the short link.
   */
  comments: string | null;
  /**
   * The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
   */
  shortLink: string;
  /**
   * The full URL of the QR code for the short link (e.g. `https://api.dub.co/qr?url=https://dub.sh/try`).
   */
  qrCode: string;
  /**
   * The UTM source of the short link.
   */
  utmSource: string | null;
  /**
   * The UTM medium of the short link.
   */
  utmMedium: string | null;
  /**
   * The UTM campaign of the short link.
   */
  utmCampaign: string | null;
  /**
   * The UTM term of the short link.
   */
  utmTerm: string | null;
  /**
   * The UTM content of the short link.
   */
  utmContent: string | null;
  /**
   * An array of A/B test URLs and the percentage of traffic to send to each URL.
   */
  testVariants?: Array<SaleEventTestVariants> | null | undefined;
  testStartedAt: string | null;
  testCompletedAt: string | null;
  userId: string | null;
  /**
   * The workspace ID of the short link.
   */
  workspaceId: string;
  /**
   * The number of clicks on the short link.
   */
  clicks?: number | undefined;
  /**
   * The number of leads the short link has generated.
   */
  leads?: number | undefined;
  /**
   * The number of leads that converted to paying customers.
   */
  conversions?: number | undefined;
  /**
   * The total number of sales (includes recurring sales) generated by the short link.
   */
  sales?: number | undefined;
  /**
   * The total dollar value of sales (in cents) generated by the short link.
   */
  saleAmount?: number | undefined;
  lastClicked: string;
  createdAt: string;
  updatedAt: string;
  /**
   * Deprecated: Use `tags` instead. The unique ID of the tag assigned to the short link.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  tagId: string | null;
  /**
   * Deprecated: Use `workspaceId` instead. The project ID of the short link.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  projectId: string;
};

export type SaleEventClick = {
  id: string;
  timestamp: string;
  url: string;
  country: string;
  city: string;
  region: string;
  continent: string;
  device: string;
  browser: string;
  os: string;
  trigger?: string | null | undefined;
  referer: string;
  refererUrl: string;
  qr: boolean;
  ip: string;
};

export type SaleEventCustomer = {
  /**
   * The unique ID of the customer. You may use either the customer's `id` on Dub (obtained via `/customers` endpoint) or their `externalId` (unique ID within your system, prefixed with `ext_`, e.g. `ext_123`).
   */
  id: string;
  /**
   * Unique identifier for the customer in the client's app.
   */
  externalId: string;
  /**
   * Name of the customer.
   */
  name: string;
  /**
   * Email of the customer.
   */
  email?: string | null | undefined;
  /**
   * Avatar URL of the customer.
   */
  avatar?: string | null | undefined;
  /**
   * Country of the customer.
   */
  country?: string | null | undefined;
  /**
   * Total number of sales for the customer.
   */
  sales?: number | null | undefined;
  /**
   * Total amount of sales for the customer.
   */
  saleAmount?: number | null | undefined;
  /**
   * The date the customer was created.
   */
  createdAt: string;
};

export type SaleEvent = {
  event: SaleEventEvent;
  timestamp: string;
  eventId: string;
  eventName: string;
  sale: Sale;
  metadata?: any | null | undefined;
  link: SaleEventLink;
  click: SaleEventClick;
  customer: SaleEventCustomer;
  /**
   * Deprecated: Use `sale.amount` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  saleAmount: number;
  /**
   * Deprecated: Use `sale.invoiceId` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  invoiceId: string;
  /**
   * Deprecated: Use `sale.paymentProcessor` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  paymentProcessor: string;
  /**
   * Deprecated: Use `click.id` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  clickId: string;
  /**
   * Deprecated: Use `link.id` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  linkId: string;
  /**
   * Deprecated: Use `link.domain` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  domain: string;
  /**
   * Deprecated: Use `link.key` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  key: string;
  /**
   * Deprecated: Use `click.url` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  url: string;
  /**
   * Deprecated: Use `click.continent` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  continent: string;
  /**
   * Deprecated: Use `click.country` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  country: string;
  /**
   * Deprecated: Use `click.city` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  city: string;
  /**
   * Deprecated: Use `click.device` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  device: string;
  /**
   * Deprecated: Use `click.browser` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  browser: string;
  /**
   * Deprecated: Use `click.os` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  os: string;
  /**
   * Deprecated: Use `click.qr` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  qr: number;
  /**
   * Deprecated: Use `click.ip` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  ip: string;
};

/** @internal */
export const SaleEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof SaleEventEvent
> = z.nativeEnum(SaleEventEvent);

/** @internal */
export const SaleEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof SaleEventEvent
> = SaleEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SaleEventEvent$ {
  /** @deprecated use `SaleEventEvent$inboundSchema` instead. */
  export const inboundSchema = SaleEventEvent$inboundSchema;
  /** @deprecated use `SaleEventEvent$outboundSchema` instead. */
  export const outboundSchema = SaleEventEvent$outboundSchema;
}

/** @internal */
export const PaymentProcessor$inboundSchema: z.ZodNativeEnum<
  typeof PaymentProcessor
> = z.nativeEnum(PaymentProcessor);

/** @internal */
export const PaymentProcessor$outboundSchema: z.ZodNativeEnum<
  typeof PaymentProcessor
> = PaymentProcessor$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentProcessor$ {
  /** @deprecated use `PaymentProcessor$inboundSchema` instead. */
  export const inboundSchema = PaymentProcessor$inboundSchema;
  /** @deprecated use `PaymentProcessor$outboundSchema` instead. */
  export const outboundSchema = PaymentProcessor$outboundSchema;
}

/** @internal */
export const Sale$inboundSchema: z.ZodType<Sale, z.ZodTypeDef, unknown> = z
  .object({
    amount: z.number().int(),
    invoiceId: z.nullable(z.string()).default(null),
    paymentProcessor: PaymentProcessor$inboundSchema.default("custom"),
  });

/** @internal */
export type Sale$Outbound = {
  amount: number;
  invoiceId: string | null;
  paymentProcessor: string;
};

/** @internal */
export const Sale$outboundSchema: z.ZodType<Sale$Outbound, z.ZodTypeDef, Sale> =
  z.object({
    amount: z.number().int(),
    invoiceId: z.nullable(z.string()).default(null),
    paymentProcessor: PaymentProcessor$outboundSchema.default("custom"),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sale$ {
  /** @deprecated use `Sale$inboundSchema` instead. */
  export const inboundSchema = Sale$inboundSchema;
  /** @deprecated use `Sale$outboundSchema` instead. */
  export const outboundSchema = Sale$outboundSchema;
  /** @deprecated use `Sale$Outbound` instead. */
  export type Outbound = Sale$Outbound;
}

export function saleToJSON(sale: Sale): string {
  return JSON.stringify(Sale$outboundSchema.parse(sale));
}

export function saleFromJSON(
  jsonString: string,
): SafeParseResult<Sale, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Sale$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Sale' from JSON`,
  );
}

/** @internal */
export const SaleEventTestVariants$inboundSchema: z.ZodType<
  SaleEventTestVariants,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  percentage: z.number(),
});

/** @internal */
export type SaleEventTestVariants$Outbound = {
  url: string;
  percentage: number;
};

/** @internal */
export const SaleEventTestVariants$outboundSchema: z.ZodType<
  SaleEventTestVariants$Outbound,
  z.ZodTypeDef,
  SaleEventTestVariants
> = z.object({
  url: z.string(),
  percentage: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SaleEventTestVariants$ {
  /** @deprecated use `SaleEventTestVariants$inboundSchema` instead. */
  export const inboundSchema = SaleEventTestVariants$inboundSchema;
  /** @deprecated use `SaleEventTestVariants$outboundSchema` instead. */
  export const outboundSchema = SaleEventTestVariants$outboundSchema;
  /** @deprecated use `SaleEventTestVariants$Outbound` instead. */
  export type Outbound = SaleEventTestVariants$Outbound;
}

export function saleEventTestVariantsToJSON(
  saleEventTestVariants: SaleEventTestVariants,
): string {
  return JSON.stringify(
    SaleEventTestVariants$outboundSchema.parse(saleEventTestVariants),
  );
}

export function saleEventTestVariantsFromJSON(
  jsonString: string,
): SafeParseResult<SaleEventTestVariants, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SaleEventTestVariants$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SaleEventTestVariants' from JSON`,
  );
}

/** @internal */
export const SaleEventLink$inboundSchema: z.ZodType<
  SaleEventLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  domain: z.string(),
  key: z.string(),
  url: z.string(),
  trackConversion: z.boolean(),
  externalId: z.nullable(z.string()),
  tenantId: z.nullable(z.string()),
  programId: z.nullable(z.string()),
  partnerId: z.nullable(z.string()),
  archived: z.boolean(),
  expiresAt: z.string(),
  expiredUrl: z.nullable(z.string()),
  password: z.nullable(z.string()),
  proxy: z.boolean(),
  title: z.nullable(z.string()),
  description: z.nullable(z.string()),
  image: z.nullable(z.string()),
  video: z.nullable(z.string()),
  rewrite: z.boolean(),
  doIndex: z.boolean(),
  ios: z.nullable(z.string()),
  android: z.nullable(z.string()),
  geo: z.nullable(z.record(z.string())),
  publicStats: z.boolean(),
  tags: z.nullable(z.array(TagSchema$inboundSchema)),
  folderId: z.nullable(z.string()),
  webhookIds: z.array(z.string()),
  comments: z.nullable(z.string()),
  shortLink: z.string(),
  qrCode: z.string(),
  utm_source: z.nullable(z.string()),
  utm_medium: z.nullable(z.string()),
  utm_campaign: z.nullable(z.string()),
  utm_term: z.nullable(z.string()),
  utm_content: z.nullable(z.string()),
  testVariants: z.nullable(
    z.array(z.lazy(() => SaleEventTestVariants$inboundSchema)),
  ).optional(),
  testStartedAt: z.nullable(z.string()),
  testCompletedAt: z.nullable(z.string()),
  userId: z.nullable(z.string()),
  workspaceId: z.string(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  conversions: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
  lastClicked: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  tagId: z.nullable(z.string()),
  projectId: z.string(),
}).transform((v) => {
  return remap$(v, {
    "utm_source": "utmSource",
    "utm_medium": "utmMedium",
    "utm_campaign": "utmCampaign",
    "utm_term": "utmTerm",
    "utm_content": "utmContent",
  });
});

/** @internal */
export type SaleEventLink$Outbound = {
  id: string;
  domain: string;
  key: string;
  url: string;
  trackConversion: boolean;
  externalId: string | null;
  tenantId: string | null;
  programId: string | null;
  partnerId: string | null;
  archived: boolean;
  expiresAt: string;
  expiredUrl: string | null;
  password: string | null;
  proxy: boolean;
  title: string | null;
  description: string | null;
  image: string | null;
  video: string | null;
  rewrite: boolean;
  doIndex: boolean;
  ios: string | null;
  android: string | null;
  geo: { [k: string]: string } | null;
  publicStats: boolean;
  tags: Array<TagSchema$Outbound> | null;
  folderId: string | null;
  webhookIds: Array<string>;
  comments: string | null;
  shortLink: string;
  qrCode: string;
  utm_source: string | null;
  utm_medium: string | null;
  utm_campaign: string | null;
  utm_term: string | null;
  utm_content: string | null;
  testVariants?: Array<SaleEventTestVariants$Outbound> | null | undefined;
  testStartedAt: string | null;
  testCompletedAt: string | null;
  userId: string | null;
  workspaceId: string;
  clicks: number;
  leads: number;
  conversions: number;
  sales: number;
  saleAmount: number;
  lastClicked: string;
  createdAt: string;
  updatedAt: string;
  tagId: string | null;
  projectId: string;
};

/** @internal */
export const SaleEventLink$outboundSchema: z.ZodType<
  SaleEventLink$Outbound,
  z.ZodTypeDef,
  SaleEventLink
> = z.object({
  id: z.string(),
  domain: z.string(),
  key: z.string(),
  url: z.string(),
  trackConversion: z.boolean(),
  externalId: z.nullable(z.string()),
  tenantId: z.nullable(z.string()),
  programId: z.nullable(z.string()),
  partnerId: z.nullable(z.string()),
  archived: z.boolean(),
  expiresAt: z.string(),
  expiredUrl: z.nullable(z.string()),
  password: z.nullable(z.string()),
  proxy: z.boolean(),
  title: z.nullable(z.string()),
  description: z.nullable(z.string()),
  image: z.nullable(z.string()),
  video: z.nullable(z.string()),
  rewrite: z.boolean(),
  doIndex: z.boolean(),
  ios: z.nullable(z.string()),
  android: z.nullable(z.string()),
  geo: z.nullable(z.record(z.string())),
  publicStats: z.boolean(),
  tags: z.nullable(z.array(TagSchema$outboundSchema)),
  folderId: z.nullable(z.string()),
  webhookIds: z.array(z.string()),
  comments: z.nullable(z.string()),
  shortLink: z.string(),
  qrCode: z.string(),
  utmSource: z.nullable(z.string()),
  utmMedium: z.nullable(z.string()),
  utmCampaign: z.nullable(z.string()),
  utmTerm: z.nullable(z.string()),
  utmContent: z.nullable(z.string()),
  testVariants: z.nullable(
    z.array(z.lazy(() => SaleEventTestVariants$outboundSchema)),
  ).optional(),
  testStartedAt: z.nullable(z.string()),
  testCompletedAt: z.nullable(z.string()),
  userId: z.nullable(z.string()),
  workspaceId: z.string(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  conversions: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
  lastClicked: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  tagId: z.nullable(z.string()),
  projectId: z.string(),
}).transform((v) => {
  return remap$(v, {
    utmSource: "utm_source",
    utmMedium: "utm_medium",
    utmCampaign: "utm_campaign",
    utmTerm: "utm_term",
    utmContent: "utm_content",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SaleEventLink$ {
  /** @deprecated use `SaleEventLink$inboundSchema` instead. */
  export const inboundSchema = SaleEventLink$inboundSchema;
  /** @deprecated use `SaleEventLink$outboundSchema` instead. */
  export const outboundSchema = SaleEventLink$outboundSchema;
  /** @deprecated use `SaleEventLink$Outbound` instead. */
  export type Outbound = SaleEventLink$Outbound;
}

export function saleEventLinkToJSON(saleEventLink: SaleEventLink): string {
  return JSON.stringify(SaleEventLink$outboundSchema.parse(saleEventLink));
}

export function saleEventLinkFromJSON(
  jsonString: string,
): SafeParseResult<SaleEventLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SaleEventLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SaleEventLink' from JSON`,
  );
}

/** @internal */
export const SaleEventClick$inboundSchema: z.ZodType<
  SaleEventClick,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  timestamp: z.string(),
  url: z.string(),
  country: z.string(),
  city: z.string(),
  region: z.string(),
  continent: z.string(),
  device: z.string(),
  browser: z.string(),
  os: z.string(),
  trigger: z.nullable(z.string()).optional(),
  referer: z.string(),
  refererUrl: z.string(),
  qr: z.boolean(),
  ip: z.string(),
});

/** @internal */
export type SaleEventClick$Outbound = {
  id: string;
  timestamp: string;
  url: string;
  country: string;
  city: string;
  region: string;
  continent: string;
  device: string;
  browser: string;
  os: string;
  trigger?: string | null | undefined;
  referer: string;
  refererUrl: string;
  qr: boolean;
  ip: string;
};

/** @internal */
export const SaleEventClick$outboundSchema: z.ZodType<
  SaleEventClick$Outbound,
  z.ZodTypeDef,
  SaleEventClick
> = z.object({
  id: z.string(),
  timestamp: z.string(),
  url: z.string(),
  country: z.string(),
  city: z.string(),
  region: z.string(),
  continent: z.string(),
  device: z.string(),
  browser: z.string(),
  os: z.string(),
  trigger: z.nullable(z.string()).optional(),
  referer: z.string(),
  refererUrl: z.string(),
  qr: z.boolean(),
  ip: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SaleEventClick$ {
  /** @deprecated use `SaleEventClick$inboundSchema` instead. */
  export const inboundSchema = SaleEventClick$inboundSchema;
  /** @deprecated use `SaleEventClick$outboundSchema` instead. */
  export const outboundSchema = SaleEventClick$outboundSchema;
  /** @deprecated use `SaleEventClick$Outbound` instead. */
  export type Outbound = SaleEventClick$Outbound;
}

export function saleEventClickToJSON(saleEventClick: SaleEventClick): string {
  return JSON.stringify(SaleEventClick$outboundSchema.parse(saleEventClick));
}

export function saleEventClickFromJSON(
  jsonString: string,
): SafeParseResult<SaleEventClick, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SaleEventClick$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SaleEventClick' from JSON`,
  );
}

/** @internal */
export const SaleEventCustomer$inboundSchema: z.ZodType<
  SaleEventCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  externalId: z.string(),
  name: z.string(),
  email: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  sales: z.nullable(z.number()).optional(),
  saleAmount: z.nullable(z.number()).optional(),
  createdAt: z.string(),
});

/** @internal */
export type SaleEventCustomer$Outbound = {
  id: string;
  externalId: string;
  name: string;
  email?: string | null | undefined;
  avatar?: string | null | undefined;
  country?: string | null | undefined;
  sales?: number | null | undefined;
  saleAmount?: number | null | undefined;
  createdAt: string;
};

/** @internal */
export const SaleEventCustomer$outboundSchema: z.ZodType<
  SaleEventCustomer$Outbound,
  z.ZodTypeDef,
  SaleEventCustomer
> = z.object({
  id: z.string(),
  externalId: z.string(),
  name: z.string(),
  email: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  sales: z.nullable(z.number()).optional(),
  saleAmount: z.nullable(z.number()).optional(),
  createdAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SaleEventCustomer$ {
  /** @deprecated use `SaleEventCustomer$inboundSchema` instead. */
  export const inboundSchema = SaleEventCustomer$inboundSchema;
  /** @deprecated use `SaleEventCustomer$outboundSchema` instead. */
  export const outboundSchema = SaleEventCustomer$outboundSchema;
  /** @deprecated use `SaleEventCustomer$Outbound` instead. */
  export type Outbound = SaleEventCustomer$Outbound;
}

export function saleEventCustomerToJSON(
  saleEventCustomer: SaleEventCustomer,
): string {
  return JSON.stringify(
    SaleEventCustomer$outboundSchema.parse(saleEventCustomer),
  );
}

export function saleEventCustomerFromJSON(
  jsonString: string,
): SafeParseResult<SaleEventCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SaleEventCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SaleEventCustomer' from JSON`,
  );
}

/** @internal */
export const SaleEvent$inboundSchema: z.ZodType<
  SaleEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: SaleEventEvent$inboundSchema,
  timestamp: z.string(),
  eventId: z.string(),
  eventName: z.string(),
  sale: z.lazy(() => Sale$inboundSchema),
  metadata: z.nullable(z.any()).optional(),
  link: z.lazy(() => SaleEventLink$inboundSchema),
  click: z.lazy(() => SaleEventClick$inboundSchema),
  customer: z.lazy(() => SaleEventCustomer$inboundSchema),
  saleAmount: z.number(),
  invoice_id: z.string(),
  payment_processor: z.string(),
  click_id: z.string(),
  link_id: z.string(),
  domain: z.string(),
  key: z.string(),
  url: z.string(),
  continent: z.string(),
  country: z.string(),
  city: z.string(),
  device: z.string(),
  browser: z.string(),
  os: z.string(),
  qr: z.number(),
  ip: z.string(),
}).transform((v) => {
  return remap$(v, {
    "invoice_id": "invoiceId",
    "payment_processor": "paymentProcessor",
    "click_id": "clickId",
    "link_id": "linkId",
  });
});

/** @internal */
export type SaleEvent$Outbound = {
  event: string;
  timestamp: string;
  eventId: string;
  eventName: string;
  sale: Sale$Outbound;
  metadata?: any | null | undefined;
  link: SaleEventLink$Outbound;
  click: SaleEventClick$Outbound;
  customer: SaleEventCustomer$Outbound;
  saleAmount: number;
  invoice_id: string;
  payment_processor: string;
  click_id: string;
  link_id: string;
  domain: string;
  key: string;
  url: string;
  continent: string;
  country: string;
  city: string;
  device: string;
  browser: string;
  os: string;
  qr: number;
  ip: string;
};

/** @internal */
export const SaleEvent$outboundSchema: z.ZodType<
  SaleEvent$Outbound,
  z.ZodTypeDef,
  SaleEvent
> = z.object({
  event: SaleEventEvent$outboundSchema,
  timestamp: z.string(),
  eventId: z.string(),
  eventName: z.string(),
  sale: z.lazy(() => Sale$outboundSchema),
  metadata: z.nullable(z.any()).optional(),
  link: z.lazy(() => SaleEventLink$outboundSchema),
  click: z.lazy(() => SaleEventClick$outboundSchema),
  customer: z.lazy(() => SaleEventCustomer$outboundSchema),
  saleAmount: z.number(),
  invoiceId: z.string(),
  paymentProcessor: z.string(),
  clickId: z.string(),
  linkId: z.string(),
  domain: z.string(),
  key: z.string(),
  url: z.string(),
  continent: z.string(),
  country: z.string(),
  city: z.string(),
  device: z.string(),
  browser: z.string(),
  os: z.string(),
  qr: z.number(),
  ip: z.string(),
}).transform((v) => {
  return remap$(v, {
    invoiceId: "invoice_id",
    paymentProcessor: "payment_processor",
    clickId: "click_id",
    linkId: "link_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SaleEvent$ {
  /** @deprecated use `SaleEvent$inboundSchema` instead. */
  export const inboundSchema = SaleEvent$inboundSchema;
  /** @deprecated use `SaleEvent$outboundSchema` instead. */
  export const outboundSchema = SaleEvent$outboundSchema;
  /** @deprecated use `SaleEvent$Outbound` instead. */
  export type Outbound = SaleEvent$Outbound;
}

export function saleEventToJSON(saleEvent: SaleEvent): string {
  return JSON.stringify(SaleEvent$outboundSchema.parse(saleEvent));
}

export function saleEventFromJSON(
  jsonString: string,
): SafeParseResult<SaleEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SaleEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SaleEvent' from JSON`,
  );
}
