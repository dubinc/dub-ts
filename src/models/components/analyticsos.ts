/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AnalyticsOS = {
  /**
   * The name of the OS
   */
  os: string;
  /**
   * The number of clicks from this OS
   */
  clicks?: number | undefined;
  /**
   * The number of leads from this OS
   */
  leads?: number | undefined;
  /**
   * The number of sales from this OS
   */
  sales?: number | undefined;
  /**
   * The total amount of sales from this OS, in cents
   */
  saleAmount?: number | undefined;
};

/** @internal */
export const AnalyticsOS$inboundSchema: z.ZodType<
  AnalyticsOS,
  z.ZodTypeDef,
  unknown
> = z.object({
  os: z.string(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
});

/** @internal */
export type AnalyticsOS$Outbound = {
  os: string;
  clicks: number;
  leads: number;
  sales: number;
  saleAmount: number;
};

/** @internal */
export const AnalyticsOS$outboundSchema: z.ZodType<
  AnalyticsOS$Outbound,
  z.ZodTypeDef,
  AnalyticsOS
> = z.object({
  os: z.string(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyticsOS$ {
  /** @deprecated use `AnalyticsOS$inboundSchema` instead. */
  export const inboundSchema = AnalyticsOS$inboundSchema;
  /** @deprecated use `AnalyticsOS$outboundSchema` instead. */
  export const outboundSchema = AnalyticsOS$outboundSchema;
  /** @deprecated use `AnalyticsOS$Outbound` instead. */
  export type Outbound = AnalyticsOS$Outbound;
}

export function analyticsOSToJSON(analyticsOS: AnalyticsOS): string {
  return JSON.stringify(AnalyticsOS$outboundSchema.parse(analyticsOS));
}

export function analyticsOSFromJSON(
  jsonString: string,
): SafeParseResult<AnalyticsOS, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyticsOS$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyticsOS' from JSON`,
  );
}
