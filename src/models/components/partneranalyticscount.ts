/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PartnerAnalyticsCount = {
  /**
   * The total number of clicks
   */
  clicks?: number | undefined;
  /**
   * The total number of leads
   */
  leads?: number | undefined;
  /**
   * The total number of sales
   */
  sales?: number | undefined;
  /**
   * The total amount of sales, in cents
   */
  saleAmount?: number | undefined;
  earnings?: number | undefined;
};

/** @internal */
export const PartnerAnalyticsCount$inboundSchema: z.ZodType<
  PartnerAnalyticsCount,
  z.ZodTypeDef,
  unknown
> = z.object({
  clicks: z.number().default(0),
  leads: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
  earnings: z.number().default(0),
});

/** @internal */
export type PartnerAnalyticsCount$Outbound = {
  clicks: number;
  leads: number;
  sales: number;
  saleAmount: number;
  earnings: number;
};

/** @internal */
export const PartnerAnalyticsCount$outboundSchema: z.ZodType<
  PartnerAnalyticsCount$Outbound,
  z.ZodTypeDef,
  PartnerAnalyticsCount
> = z.object({
  clicks: z.number().default(0),
  leads: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
  earnings: z.number().default(0),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PartnerAnalyticsCount$ {
  /** @deprecated use `PartnerAnalyticsCount$inboundSchema` instead. */
  export const inboundSchema = PartnerAnalyticsCount$inboundSchema;
  /** @deprecated use `PartnerAnalyticsCount$outboundSchema` instead. */
  export const outboundSchema = PartnerAnalyticsCount$outboundSchema;
  /** @deprecated use `PartnerAnalyticsCount$Outbound` instead. */
  export type Outbound = PartnerAnalyticsCount$Outbound;
}

export function partnerAnalyticsCountToJSON(
  partnerAnalyticsCount: PartnerAnalyticsCount,
): string {
  return JSON.stringify(
    PartnerAnalyticsCount$outboundSchema.parse(partnerAnalyticsCount),
  );
}

export function partnerAnalyticsCountFromJSON(
  jsonString: string,
): SafeParseResult<PartnerAnalyticsCount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PartnerAnalyticsCount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PartnerAnalyticsCount' from JSON`,
  );
}
