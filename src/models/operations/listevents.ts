/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of event to retrieve analytics for. Defaults to 'clicks'.
 */
export const QueryParamEvent = {
  Clicks: "clicks",
  Leads: "leads",
  Sales: "sales",
} as const;
/**
 * The type of event to retrieve analytics for. Defaults to 'clicks'.
 */
export type QueryParamEvent = ClosedEnum<typeof QueryParamEvent>;

/**
 * The interval to retrieve events for. Takes precedence over start and end. If undefined, defaults to 24h.
 */
export const QueryParamInterval = {
  TwentyFourh: "24h",
  Sevend: "7d",
  Thirtyd: "30d",
  Ninetyd: "90d",
  Oney: "1y",
  Mtd: "mtd",
  Qtd: "qtd",
  Ytd: "ytd",
  All: "all",
} as const;
/**
 * The interval to retrieve events for. Takes precedence over start and end. If undefined, defaults to 24h.
 */
export type QueryParamInterval = ClosedEnum<typeof QueryParamInterval>;

/**
 * The trigger to retrieve analytics for. If undefined, return both QR and link clicks.
 */
export const QueryParamTrigger = {
  Qr: "qr",
  Link: "link",
} as const;
/**
 * The trigger to retrieve analytics for. If undefined, return both QR and link clicks.
 */
export type QueryParamTrigger = ClosedEnum<typeof QueryParamTrigger>;

/**
 * The tag IDs to retrieve analytics for.
 */
export type ListEventsQueryParamTagIds = string | Array<string>;

/**
 * The sort order. The default is `desc`.
 */
export const QueryParamSortOrder = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The sort order. The default is `desc`.
 */
export type QueryParamSortOrder = ClosedEnum<typeof QueryParamSortOrder>;

/**
 * The field to sort the events by. The default is `timestamp`.
 */
export const QueryParamSortBy = {
  Timestamp: "timestamp",
} as const;
/**
 * The field to sort the events by. The default is `timestamp`.
 */
export type QueryParamSortBy = ClosedEnum<typeof QueryParamSortBy>;

/**
 * DEPRECATED. Use `sortOrder` instead.
 *
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export const Order = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * DEPRECATED. Use `sortOrder` instead.
 *
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type Order = ClosedEnum<typeof Order>;

export type ListEventsRequest = {
  /**
   * The type of event to retrieve analytics for. Defaults to 'clicks'.
   */
  event?: QueryParamEvent | undefined;
  /**
   * The domain to filter analytics for.
   */
  domain?: string | undefined;
  /**
   * The short link slug.
   */
  key?: string | undefined;
  /**
   * The unique ID of the short link on Dub.
   */
  linkId?: string | undefined;
  /**
   * This is the ID of the link in the your database. Must be prefixed with 'ext_' when passed as a query parameter.
   */
  externalId?: string | undefined;
  /**
   * The ID of the tenant that created the link inside your system.
   */
  tenantId?: string | undefined;
  /**
   * The ID of the program to retrieve analytics for.
   */
  programId?: string | undefined;
  /**
   * The ID of the partner to retrieve analytics for.
   */
  partnerId?: string | undefined;
  /**
   * The interval to retrieve events for. Takes precedence over start and end. If undefined, defaults to 24h.
   */
  interval?: QueryParamInterval | undefined;
  /**
   * The start date and time when to retrieve analytics from. Takes precedence over `interval`.
   */
  start?: string | undefined;
  /**
   * The end date and time when to retrieve analytics from. If not provided, defaults to the current date. Takes precedence over `interval`.
   */
  end?: string | undefined;
  /**
   * The IANA time zone code for aligning timeseries granularity (e.g. America/New_York). Defaults to UTC.
   */
  timezone?: string | undefined;
  /**
   * The country to retrieve analytics for.
   */
  country?: components.CountryCode | undefined;
  /**
   * The city to retrieve analytics for.
   */
  city?: string | undefined;
  /**
   * The ISO 3166-2 region code to retrieve analytics for.
   */
  region?: string | undefined;
  /**
   * The continent to retrieve analytics for.
   */
  continent?: components.ContinentCode | undefined;
  /**
   * The device to retrieve analytics for.
   */
  device?: string | undefined;
  /**
   * The browser to retrieve analytics for.
   */
  browser?: string | undefined;
  /**
   * The OS to retrieve analytics for.
   */
  os?: string | undefined;
  /**
   * The trigger to retrieve analytics for. If undefined, return both QR and link clicks.
   */
  trigger?: QueryParamTrigger | undefined;
  /**
   * The referer to retrieve analytics for.
   */
  referer?: string | undefined;
  /**
   * The full referer URL to retrieve analytics for.
   */
  refererUrl?: string | undefined;
  /**
   * The URL to retrieve analytics for.
   */
  url?: string | undefined;
  /**
   * Deprecated. Use `tagIds` instead. The tag ID to retrieve analytics for.
   */
  tagId?: string | undefined;
  /**
   * The tag IDs to retrieve analytics for.
   */
  tagIds?: string | Array<string> | undefined;
  /**
   * The folder ID to retrieve analytics for. If not provided, return analytics for unsorted links.
   */
  folderId?: string | undefined;
  /**
   * Deprecated. Use the `trigger` field instead. Filter for QR code scans. If true, filter for QR codes only. If false, filter for links only. If undefined, return both.
   */
  qr?: boolean | undefined;
  /**
   * Filter for root domains. If true, filter for domains only. If false, filter for links only. If undefined, return both.
   */
  root?: boolean | undefined;
  /**
   * The UTM source of the short link.
   */
  utmSource?: string | null | undefined;
  /**
   * The UTM medium of the short link.
   */
  utmMedium?: string | null | undefined;
  /**
   * The UTM campaign of the short link.
   */
  utmCampaign?: string | null | undefined;
  /**
   * The UTM term of the short link.
   */
  utmTerm?: string | null | undefined;
  /**
   * The UTM content of the short link.
   */
  utmContent?: string | null | undefined;
  page?: number | undefined;
  limit?: number | undefined;
  /**
   * The sort order. The default is `desc`.
   */
  sortOrder?: QueryParamSortOrder | undefined;
  /**
   * The field to sort the events by. The default is `timestamp`.
   */
  sortBy?: QueryParamSortBy | undefined;
  /**
   * DEPRECATED. Use `sortOrder` instead.
   */
  order?: Order | undefined;
};

/**
 * A list of events
 */
export type ListEventsResponseBody =
  | Array<components.ClickEvent>
  | Array<components.LeadEvent>
  | Array<components.SaleEvent>;

/** @internal */
export const QueryParamEvent$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamEvent
> = z.nativeEnum(QueryParamEvent);

/** @internal */
export const QueryParamEvent$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamEvent
> = QueryParamEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamEvent$ {
  /** @deprecated use `QueryParamEvent$inboundSchema` instead. */
  export const inboundSchema = QueryParamEvent$inboundSchema;
  /** @deprecated use `QueryParamEvent$outboundSchema` instead. */
  export const outboundSchema = QueryParamEvent$outboundSchema;
}

/** @internal */
export const QueryParamInterval$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamInterval
> = z.nativeEnum(QueryParamInterval);

/** @internal */
export const QueryParamInterval$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamInterval
> = QueryParamInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamInterval$ {
  /** @deprecated use `QueryParamInterval$inboundSchema` instead. */
  export const inboundSchema = QueryParamInterval$inboundSchema;
  /** @deprecated use `QueryParamInterval$outboundSchema` instead. */
  export const outboundSchema = QueryParamInterval$outboundSchema;
}

/** @internal */
export const QueryParamTrigger$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamTrigger
> = z.nativeEnum(QueryParamTrigger);

/** @internal */
export const QueryParamTrigger$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamTrigger
> = QueryParamTrigger$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamTrigger$ {
  /** @deprecated use `QueryParamTrigger$inboundSchema` instead. */
  export const inboundSchema = QueryParamTrigger$inboundSchema;
  /** @deprecated use `QueryParamTrigger$outboundSchema` instead. */
  export const outboundSchema = QueryParamTrigger$outboundSchema;
}

/** @internal */
export const ListEventsQueryParamTagIds$inboundSchema: z.ZodType<
  ListEventsQueryParamTagIds,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type ListEventsQueryParamTagIds$Outbound = string | Array<string>;

/** @internal */
export const ListEventsQueryParamTagIds$outboundSchema: z.ZodType<
  ListEventsQueryParamTagIds$Outbound,
  z.ZodTypeDef,
  ListEventsQueryParamTagIds
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEventsQueryParamTagIds$ {
  /** @deprecated use `ListEventsQueryParamTagIds$inboundSchema` instead. */
  export const inboundSchema = ListEventsQueryParamTagIds$inboundSchema;
  /** @deprecated use `ListEventsQueryParamTagIds$outboundSchema` instead. */
  export const outboundSchema = ListEventsQueryParamTagIds$outboundSchema;
  /** @deprecated use `ListEventsQueryParamTagIds$Outbound` instead. */
  export type Outbound = ListEventsQueryParamTagIds$Outbound;
}

export function listEventsQueryParamTagIdsToJSON(
  listEventsQueryParamTagIds: ListEventsQueryParamTagIds,
): string {
  return JSON.stringify(
    ListEventsQueryParamTagIds$outboundSchema.parse(listEventsQueryParamTagIds),
  );
}

export function listEventsQueryParamTagIdsFromJSON(
  jsonString: string,
): SafeParseResult<ListEventsQueryParamTagIds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEventsQueryParamTagIds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEventsQueryParamTagIds' from JSON`,
  );
}

/** @internal */
export const QueryParamSortOrder$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamSortOrder
> = z.nativeEnum(QueryParamSortOrder);

/** @internal */
export const QueryParamSortOrder$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamSortOrder
> = QueryParamSortOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamSortOrder$ {
  /** @deprecated use `QueryParamSortOrder$inboundSchema` instead. */
  export const inboundSchema = QueryParamSortOrder$inboundSchema;
  /** @deprecated use `QueryParamSortOrder$outboundSchema` instead. */
  export const outboundSchema = QueryParamSortOrder$outboundSchema;
}

/** @internal */
export const QueryParamSortBy$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamSortBy
> = z.nativeEnum(QueryParamSortBy);

/** @internal */
export const QueryParamSortBy$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamSortBy
> = QueryParamSortBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamSortBy$ {
  /** @deprecated use `QueryParamSortBy$inboundSchema` instead. */
  export const inboundSchema = QueryParamSortBy$inboundSchema;
  /** @deprecated use `QueryParamSortBy$outboundSchema` instead. */
  export const outboundSchema = QueryParamSortBy$outboundSchema;
}

/** @internal */
export const Order$inboundSchema: z.ZodNativeEnum<typeof Order> = z.nativeEnum(
  Order,
);

/** @internal */
export const Order$outboundSchema: z.ZodNativeEnum<typeof Order> =
  Order$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Order$ {
  /** @deprecated use `Order$inboundSchema` instead. */
  export const inboundSchema = Order$inboundSchema;
  /** @deprecated use `Order$outboundSchema` instead. */
  export const outboundSchema = Order$outboundSchema;
}

/** @internal */
export const ListEventsRequest$inboundSchema: z.ZodType<
  ListEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: QueryParamEvent$inboundSchema.default("clicks"),
  domain: z.string().optional(),
  key: z.string().optional(),
  linkId: z.string().optional(),
  externalId: z.string().optional(),
  tenantId: z.string().optional(),
  programId: z.string().optional(),
  partnerId: z.string().optional(),
  interval: QueryParamInterval$inboundSchema.default("24h"),
  start: z.string().optional(),
  end: z.string().optional(),
  timezone: z.string().default("UTC"),
  country: components.CountryCode$inboundSchema.optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  continent: components.ContinentCode$inboundSchema.optional(),
  device: z.string().optional(),
  browser: z.string().optional(),
  os: z.string().optional(),
  trigger: QueryParamTrigger$inboundSchema.optional(),
  referer: z.string().optional(),
  refererUrl: z.string().optional(),
  url: z.string().optional(),
  tagId: z.string().optional(),
  tagIds: z.union([z.string(), z.array(z.string())]).optional(),
  folderId: z.string().optional(),
  qr: z.boolean().optional(),
  root: z.boolean().optional(),
  utm_source: z.nullable(z.string()).optional(),
  utm_medium: z.nullable(z.string()).optional(),
  utm_campaign: z.nullable(z.string()).optional(),
  utm_term: z.nullable(z.string()).optional(),
  utm_content: z.nullable(z.string()).optional(),
  page: z.number().default(1),
  limit: z.number().default(100),
  sortOrder: QueryParamSortOrder$inboundSchema.default("desc"),
  sortBy: QueryParamSortBy$inboundSchema.default("timestamp"),
  order: Order$inboundSchema.default("desc"),
}).transform((v) => {
  return remap$(v, {
    "utm_source": "utmSource",
    "utm_medium": "utmMedium",
    "utm_campaign": "utmCampaign",
    "utm_term": "utmTerm",
    "utm_content": "utmContent",
  });
});

/** @internal */
export type ListEventsRequest$Outbound = {
  event: string;
  domain?: string | undefined;
  key?: string | undefined;
  linkId?: string | undefined;
  externalId?: string | undefined;
  tenantId?: string | undefined;
  programId?: string | undefined;
  partnerId?: string | undefined;
  interval: string;
  start?: string | undefined;
  end?: string | undefined;
  timezone: string;
  country?: string | undefined;
  city?: string | undefined;
  region?: string | undefined;
  continent?: string | undefined;
  device?: string | undefined;
  browser?: string | undefined;
  os?: string | undefined;
  trigger?: string | undefined;
  referer?: string | undefined;
  refererUrl?: string | undefined;
  url?: string | undefined;
  tagId?: string | undefined;
  tagIds?: string | Array<string> | undefined;
  folderId?: string | undefined;
  qr?: boolean | undefined;
  root?: boolean | undefined;
  utm_source?: string | null | undefined;
  utm_medium?: string | null | undefined;
  utm_campaign?: string | null | undefined;
  utm_term?: string | null | undefined;
  utm_content?: string | null | undefined;
  page: number;
  limit: number;
  sortOrder: string;
  sortBy: string;
  order: string;
};

/** @internal */
export const ListEventsRequest$outboundSchema: z.ZodType<
  ListEventsRequest$Outbound,
  z.ZodTypeDef,
  ListEventsRequest
> = z.object({
  event: QueryParamEvent$outboundSchema.default("clicks"),
  domain: z.string().optional(),
  key: z.string().optional(),
  linkId: z.string().optional(),
  externalId: z.string().optional(),
  tenantId: z.string().optional(),
  programId: z.string().optional(),
  partnerId: z.string().optional(),
  interval: QueryParamInterval$outboundSchema.default("24h"),
  start: z.string().optional(),
  end: z.string().optional(),
  timezone: z.string().default("UTC"),
  country: components.CountryCode$outboundSchema.optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  continent: components.ContinentCode$outboundSchema.optional(),
  device: z.string().optional(),
  browser: z.string().optional(),
  os: z.string().optional(),
  trigger: QueryParamTrigger$outboundSchema.optional(),
  referer: z.string().optional(),
  refererUrl: z.string().optional(),
  url: z.string().optional(),
  tagId: z.string().optional(),
  tagIds: z.union([z.string(), z.array(z.string())]).optional(),
  folderId: z.string().optional(),
  qr: z.boolean().optional(),
  root: z.boolean().optional(),
  utmSource: z.nullable(z.string()).optional(),
  utmMedium: z.nullable(z.string()).optional(),
  utmCampaign: z.nullable(z.string()).optional(),
  utmTerm: z.nullable(z.string()).optional(),
  utmContent: z.nullable(z.string()).optional(),
  page: z.number().default(1),
  limit: z.number().default(100),
  sortOrder: QueryParamSortOrder$outboundSchema.default("desc"),
  sortBy: QueryParamSortBy$outboundSchema.default("timestamp"),
  order: Order$outboundSchema.default("desc"),
}).transform((v) => {
  return remap$(v, {
    utmSource: "utm_source",
    utmMedium: "utm_medium",
    utmCampaign: "utm_campaign",
    utmTerm: "utm_term",
    utmContent: "utm_content",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEventsRequest$ {
  /** @deprecated use `ListEventsRequest$inboundSchema` instead. */
  export const inboundSchema = ListEventsRequest$inboundSchema;
  /** @deprecated use `ListEventsRequest$outboundSchema` instead. */
  export const outboundSchema = ListEventsRequest$outboundSchema;
  /** @deprecated use `ListEventsRequest$Outbound` instead. */
  export type Outbound = ListEventsRequest$Outbound;
}

export function listEventsRequestToJSON(
  listEventsRequest: ListEventsRequest,
): string {
  return JSON.stringify(
    ListEventsRequest$outboundSchema.parse(listEventsRequest),
  );
}

export function listEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEventsRequest' from JSON`,
  );
}

/** @internal */
export const ListEventsResponseBody$inboundSchema: z.ZodType<
  ListEventsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.array(components.ClickEvent$inboundSchema),
  z.array(components.LeadEvent$inboundSchema),
  z.array(components.SaleEvent$inboundSchema),
]);

/** @internal */
export type ListEventsResponseBody$Outbound =
  | Array<components.ClickEvent$Outbound>
  | Array<components.LeadEvent$Outbound>
  | Array<components.SaleEvent$Outbound>;

/** @internal */
export const ListEventsResponseBody$outboundSchema: z.ZodType<
  ListEventsResponseBody$Outbound,
  z.ZodTypeDef,
  ListEventsResponseBody
> = z.union([
  z.array(components.ClickEvent$outboundSchema),
  z.array(components.LeadEvent$outboundSchema),
  z.array(components.SaleEvent$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEventsResponseBody$ {
  /** @deprecated use `ListEventsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListEventsResponseBody$inboundSchema;
  /** @deprecated use `ListEventsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListEventsResponseBody$outboundSchema;
  /** @deprecated use `ListEventsResponseBody$Outbound` instead. */
  export type Outbound = ListEventsResponseBody$Outbound;
}

export function listEventsResponseBodyToJSON(
  listEventsResponseBody: ListEventsResponseBody,
): string {
  return JSON.stringify(
    ListEventsResponseBody$outboundSchema.parse(listEventsResponseBody),
  );
}

export function listEventsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListEventsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEventsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEventsResponseBody' from JSON`,
  );
}
