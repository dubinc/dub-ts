/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import * as components from "../components/index.js";

/**
 * The type of event to retrieve analytics for. Defaults to 'clicks'.
 */
export const QueryParamEvent = {
  Clicks: "clicks",
  Leads: "leads",
  Sales: "sales",
} as const;
/**
 * The type of event to retrieve analytics for. Defaults to 'clicks'.
 */
export type QueryParamEvent = ClosedEnum<typeof QueryParamEvent>;

/**
 * The interval to retrieve events for. Takes precedence over start and end. If undefined, defaults to 24h.
 */
export const QueryParamInterval = {
  TwentyFourh: "24h",
  Sevend: "7d",
  Thirtyd: "30d",
  Ninetyd: "90d",
  Ytd: "ytd",
  Oney: "1y",
  All: "all",
} as const;
/**
 * The interval to retrieve events for. Takes precedence over start and end. If undefined, defaults to 24h.
 */
export type QueryParamInterval = ClosedEnum<typeof QueryParamInterval>;

/**
 * The trigger to retrieve analytics for. If undefined, return both QR and link clicks.
 */
export const QueryParamTrigger = {
  Qr: "qr",
  Link: "link",
} as const;
/**
 * The trigger to retrieve analytics for. If undefined, return both QR and link clicks.
 */
export type QueryParamTrigger = ClosedEnum<typeof QueryParamTrigger>;

/**
 * The tag IDs to retrieve analytics for.
 */
export type ListEventsQueryParamTagIds = string | Array<string>;

export const Order = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type Order = ClosedEnum<typeof Order>;

export const SortBy = {
  Timestamp: "timestamp",
} as const;
export type SortBy = ClosedEnum<typeof SortBy>;

export type ListEventsRequest = {
  /**
   * The type of event to retrieve analytics for. Defaults to 'clicks'.
   */
  event?: QueryParamEvent | undefined;
  /**
   * The domain to filter analytics for.
   */
  domain?: string | undefined;
  /**
   * The short link slug.
   */
  key?: string | undefined;
  /**
   * The unique ID of the short link on Dub.
   */
  linkId?: string | undefined;
  /**
   * This is the ID of the link in the your database. Must be prefixed with 'ext_' when passed as a query parameter.
   */
  externalId?: string | undefined;
  /**
   * The interval to retrieve events for. Takes precedence over start and end. If undefined, defaults to 24h.
   */
  interval?: QueryParamInterval | undefined;
  /**
   * The start date and time when to retrieve analytics from.
   */
  start?: string | undefined;
  /**
   * The end date and time when to retrieve analytics from. If not provided, defaults to the current date.
   */
  end?: string | undefined;
  /**
   * The IANA time zone code for aligning timeseries granularity (e.g. America/New_York). Defaults to UTC.
   */
  timezone?: string | undefined;
  /**
   * The continent to retrieve analytics for.
   */
  continent?: components.ContinentCode | undefined;
  /**
   * The country to retrieve analytics for.
   */
  country?: components.CountryCode | undefined;
  /**
   * The city to retrieve analytics for.
   */
  city?: string | undefined;
  /**
   * The device to retrieve analytics for.
   */
  device?: string | undefined;
  /**
   * The browser to retrieve analytics for.
   */
  browser?: string | undefined;
  /**
   * The OS to retrieve analytics for.
   */
  os?: string | undefined;
  /**
   * The trigger to retrieve analytics for. If undefined, return both QR and link clicks.
   */
  trigger?: QueryParamTrigger | undefined;
  /**
   * The referer to retrieve analytics for.
   */
  referer?: string | undefined;
  /**
   * The full referer URL to retrieve analytics for.
   */
  refererUrl?: string | undefined;
  /**
   * The URL to retrieve analytics for.
   */
  url?: string | undefined;
  /**
   * Deprecated. Use `tagIds` instead. The tag ID to retrieve analytics for.
   */
  tagId?: string | undefined;
  /**
   * The tag IDs to retrieve analytics for.
   */
  tagIds?: string | Array<string> | undefined;
  /**
   * Deprecated. Use the `trigger` field instead. Filter for QR code scans. If true, filter for QR codes only. If false, filter for links only. If undefined, return both.
   */
  qr?: boolean | undefined;
  /**
   * Filter for root domains. If true, filter for domains only. If false, filter for links only. If undefined, return both.
   */
  root?: boolean | undefined;
  page?: number | undefined;
  limit?: number | undefined;
  order?: Order | undefined;
  sortBy?: SortBy | undefined;
};

/**
 * A list of events
 */
export type ListEventsResponseBody =
  | Array<components.ClickEvent>
  | Array<components.LeadEvent>
  | Array<components.SaleEvent>;

/** @internal */
export const QueryParamEvent$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamEvent
> = z.nativeEnum(QueryParamEvent);

/** @internal */
export const QueryParamEvent$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamEvent
> = QueryParamEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamEvent$ {
  /** @deprecated use `QueryParamEvent$inboundSchema` instead. */
  export const inboundSchema = QueryParamEvent$inboundSchema;
  /** @deprecated use `QueryParamEvent$outboundSchema` instead. */
  export const outboundSchema = QueryParamEvent$outboundSchema;
}

/** @internal */
export const QueryParamInterval$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamInterval
> = z.nativeEnum(QueryParamInterval);

/** @internal */
export const QueryParamInterval$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamInterval
> = QueryParamInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamInterval$ {
  /** @deprecated use `QueryParamInterval$inboundSchema` instead. */
  export const inboundSchema = QueryParamInterval$inboundSchema;
  /** @deprecated use `QueryParamInterval$outboundSchema` instead. */
  export const outboundSchema = QueryParamInterval$outboundSchema;
}

/** @internal */
export const QueryParamTrigger$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamTrigger
> = z.nativeEnum(QueryParamTrigger);

/** @internal */
export const QueryParamTrigger$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamTrigger
> = QueryParamTrigger$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamTrigger$ {
  /** @deprecated use `QueryParamTrigger$inboundSchema` instead. */
  export const inboundSchema = QueryParamTrigger$inboundSchema;
  /** @deprecated use `QueryParamTrigger$outboundSchema` instead. */
  export const outboundSchema = QueryParamTrigger$outboundSchema;
}

/** @internal */
export const ListEventsQueryParamTagIds$inboundSchema: z.ZodType<
  ListEventsQueryParamTagIds,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type ListEventsQueryParamTagIds$Outbound = string | Array<string>;

/** @internal */
export const ListEventsQueryParamTagIds$outboundSchema: z.ZodType<
  ListEventsQueryParamTagIds$Outbound,
  z.ZodTypeDef,
  ListEventsQueryParamTagIds
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEventsQueryParamTagIds$ {
  /** @deprecated use `ListEventsQueryParamTagIds$inboundSchema` instead. */
  export const inboundSchema = ListEventsQueryParamTagIds$inboundSchema;
  /** @deprecated use `ListEventsQueryParamTagIds$outboundSchema` instead. */
  export const outboundSchema = ListEventsQueryParamTagIds$outboundSchema;
  /** @deprecated use `ListEventsQueryParamTagIds$Outbound` instead. */
  export type Outbound = ListEventsQueryParamTagIds$Outbound;
}

/** @internal */
export const Order$inboundSchema: z.ZodNativeEnum<typeof Order> = z.nativeEnum(
  Order,
);

/** @internal */
export const Order$outboundSchema: z.ZodNativeEnum<typeof Order> =
  Order$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Order$ {
  /** @deprecated use `Order$inboundSchema` instead. */
  export const inboundSchema = Order$inboundSchema;
  /** @deprecated use `Order$outboundSchema` instead. */
  export const outboundSchema = Order$outboundSchema;
}

/** @internal */
export const SortBy$inboundSchema: z.ZodNativeEnum<typeof SortBy> = z
  .nativeEnum(SortBy);

/** @internal */
export const SortBy$outboundSchema: z.ZodNativeEnum<typeof SortBy> =
  SortBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SortBy$ {
  /** @deprecated use `SortBy$inboundSchema` instead. */
  export const inboundSchema = SortBy$inboundSchema;
  /** @deprecated use `SortBy$outboundSchema` instead. */
  export const outboundSchema = SortBy$outboundSchema;
}

/** @internal */
export const ListEventsRequest$inboundSchema: z.ZodType<
  ListEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: QueryParamEvent$inboundSchema.default("clicks"),
  domain: z.string().optional(),
  key: z.string().optional(),
  linkId: z.string().optional(),
  externalId: z.string().optional(),
  interval: QueryParamInterval$inboundSchema.default("24h"),
  start: z.string().optional(),
  end: z.string().optional(),
  timezone: z.string().default("UTC"),
  continent: components.ContinentCode$inboundSchema.optional(),
  country: components.CountryCode$inboundSchema.optional(),
  city: z.string().optional(),
  device: z.string().optional(),
  browser: z.string().optional(),
  os: z.string().optional(),
  trigger: QueryParamTrigger$inboundSchema.optional(),
  referer: z.string().optional(),
  refererUrl: z.string().optional(),
  url: z.string().optional(),
  tagId: z.string().optional(),
  tagIds: z.union([z.string(), z.array(z.string())]).optional(),
  qr: z.boolean().optional(),
  root: z.boolean().optional(),
  page: z.number().default(1),
  limit: z.number().default(100),
  order: Order$inboundSchema.default("desc"),
  sortBy: SortBy$inboundSchema.default("timestamp"),
});

/** @internal */
export type ListEventsRequest$Outbound = {
  event: string;
  domain?: string | undefined;
  key?: string | undefined;
  linkId?: string | undefined;
  externalId?: string | undefined;
  interval: string;
  start?: string | undefined;
  end?: string | undefined;
  timezone: string;
  continent?: string | undefined;
  country?: string | undefined;
  city?: string | undefined;
  device?: string | undefined;
  browser?: string | undefined;
  os?: string | undefined;
  trigger?: string | undefined;
  referer?: string | undefined;
  refererUrl?: string | undefined;
  url?: string | undefined;
  tagId?: string | undefined;
  tagIds?: string | Array<string> | undefined;
  qr?: boolean | undefined;
  root?: boolean | undefined;
  page: number;
  limit: number;
  order: string;
  sortBy: string;
};

/** @internal */
export const ListEventsRequest$outboundSchema: z.ZodType<
  ListEventsRequest$Outbound,
  z.ZodTypeDef,
  ListEventsRequest
> = z.object({
  event: QueryParamEvent$outboundSchema.default("clicks"),
  domain: z.string().optional(),
  key: z.string().optional(),
  linkId: z.string().optional(),
  externalId: z.string().optional(),
  interval: QueryParamInterval$outboundSchema.default("24h"),
  start: z.string().optional(),
  end: z.string().optional(),
  timezone: z.string().default("UTC"),
  continent: components.ContinentCode$outboundSchema.optional(),
  country: components.CountryCode$outboundSchema.optional(),
  city: z.string().optional(),
  device: z.string().optional(),
  browser: z.string().optional(),
  os: z.string().optional(),
  trigger: QueryParamTrigger$outboundSchema.optional(),
  referer: z.string().optional(),
  refererUrl: z.string().optional(),
  url: z.string().optional(),
  tagId: z.string().optional(),
  tagIds: z.union([z.string(), z.array(z.string())]).optional(),
  qr: z.boolean().optional(),
  root: z.boolean().optional(),
  page: z.number().default(1),
  limit: z.number().default(100),
  order: Order$outboundSchema.default("desc"),
  sortBy: SortBy$outboundSchema.default("timestamp"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEventsRequest$ {
  /** @deprecated use `ListEventsRequest$inboundSchema` instead. */
  export const inboundSchema = ListEventsRequest$inboundSchema;
  /** @deprecated use `ListEventsRequest$outboundSchema` instead. */
  export const outboundSchema = ListEventsRequest$outboundSchema;
  /** @deprecated use `ListEventsRequest$Outbound` instead. */
  export type Outbound = ListEventsRequest$Outbound;
}

/** @internal */
export const ListEventsResponseBody$inboundSchema: z.ZodType<
  ListEventsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.array(components.ClickEvent$inboundSchema),
  z.array(components.LeadEvent$inboundSchema),
  z.array(components.SaleEvent$inboundSchema),
]);

/** @internal */
export type ListEventsResponseBody$Outbound =
  | Array<components.ClickEvent$Outbound>
  | Array<components.LeadEvent$Outbound>
  | Array<components.SaleEvent$Outbound>;

/** @internal */
export const ListEventsResponseBody$outboundSchema: z.ZodType<
  ListEventsResponseBody$Outbound,
  z.ZodTypeDef,
  ListEventsResponseBody
> = z.union([
  z.array(components.ClickEvent$outboundSchema),
  z.array(components.LeadEvent$outboundSchema),
  z.array(components.SaleEvent$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEventsResponseBody$ {
  /** @deprecated use `ListEventsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListEventsResponseBody$inboundSchema;
  /** @deprecated use `ListEventsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListEventsResponseBody$outboundSchema;
  /** @deprecated use `ListEventsResponseBody$Outbound` instead. */
  export type Outbound = ListEventsResponseBody$Outbound;
}
