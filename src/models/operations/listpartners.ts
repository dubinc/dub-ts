/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A filter on the list based on the partner's `status` field.
 */
export const ListPartnersQueryParamStatus = {
  Pending: "pending",
  Approved: "approved",
  Rejected: "rejected",
  Invited: "invited",
  Declined: "declined",
  Banned: "banned",
  Archived: "archived",
} as const;
/**
 * A filter on the list based on the partner's `status` field.
 */
export type ListPartnersQueryParamStatus = ClosedEnum<
  typeof ListPartnersQueryParamStatus
>;

/**
 * The field to sort the partners by. The default is `saleAmount`.
 */
export const ListPartnersQueryParamSortBy = {
  CreatedAt: "createdAt",
  Clicks: "clicks",
  Leads: "leads",
  Conversions: "conversions",
  Sales: "sales",
  SaleAmount: "saleAmount",
  Commissions: "commissions",
  NetRevenue: "netRevenue",
} as const;
/**
 * The field to sort the partners by. The default is `saleAmount`.
 */
export type ListPartnersQueryParamSortBy = ClosedEnum<
  typeof ListPartnersQueryParamSortBy
>;

/**
 * The sort order. The default is `desc`.
 */
export const ListPartnersQueryParamSortOrder = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The sort order. The default is `desc`.
 */
export type ListPartnersQueryParamSortOrder = ClosedEnum<
  typeof ListPartnersQueryParamSortOrder
>;

export type ListPartnersRequest = {
  /**
   * A filter on the list based on the partner's `status` field.
   */
  status?: ListPartnersQueryParamStatus | undefined;
  /**
   * A filter on the list based on the partner's `country` field.
   */
  country?: string | undefined;
  /**
   * The field to sort the partners by. The default is `saleAmount`.
   */
  sortBy?: ListPartnersQueryParamSortBy | undefined;
  /**
   * The sort order. The default is `desc`.
   */
  sortOrder?: ListPartnersQueryParamSortOrder | undefined;
  /**
   * A case-sensitive filter on the list based on the partner's `tenantId` field. The value must be a string. Takes precedence over `search`.
   */
  tenantId?: string | undefined;
  /**
   * Whether to include stats fields on the partner (`clicks`, `leads`, `conversions`, `sales`, `saleAmount`, `commissions`, `netRevenue`). If false, those fields will be returned as 0.
   */
  includeExpandedFields?: boolean | undefined;
  /**
   * A search query to filter partners by name, email, or tenantId.
   */
  search?: string | undefined;
  /**
   * The page number for pagination.
   */
  page?: number | undefined;
  /**
   * The number of items per page.
   */
  pageSize?: number | undefined;
};

/**
 * The status of the partner's enrollment in the program.
 */
export const ListPartnersStatus = {
  Pending: "pending",
  Approved: "approved",
  Rejected: "rejected",
  Invited: "invited",
  Declined: "declined",
  Banned: "banned",
  Archived: "archived",
} as const;
/**
 * The status of the partner's enrollment in the program.
 */
export type ListPartnersStatus = ClosedEnum<typeof ListPartnersStatus>;

export type ListPartnersLink = {
  /**
   * The unique ID of the short link.
   */
  id: string;
  /**
   * The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
   */
  domain: string;
  /**
   * The short link slug. If not provided, a random 7-character slug will be generated.
   */
  key: string;
  /**
   * The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
   */
  shortLink: string;
  /**
   * The destination URL of the short link.
   */
  url: string;
  /**
   * The number of clicks on the short link.
   */
  clicks?: number | undefined;
  /**
   * The number of leads the short link has generated.
   */
  leads?: number | undefined;
  /**
   * The total number of sales (includes recurring sales) generated by the short link.
   */
  sales?: number | undefined;
  /**
   * The total dollar value of sales (in cents) generated by the short link.
   */
  saleAmount?: number | undefined;
};

/**
 * If the partner was banned from the program, this is the reason for the ban.
 */
export const ListPartnersBannedReason = {
  TosViolation: "tos_violation",
  InappropriateContent: "inappropriate_content",
  FakeTraffic: "fake_traffic",
  Fraud: "fraud",
  Spam: "spam",
  BrandAbuse: "brand_abuse",
} as const;
/**
 * If the partner was banned from the program, this is the reason for the ban.
 */
export type ListPartnersBannedReason = ClosedEnum<
  typeof ListPartnersBannedReason
>;

export type ListPartnersResponseBody = {
  /**
   * The partner's unique ID on Dub.
   */
  id: string;
  /**
   * The partner's full legal name.
   */
  name: string;
  /**
   * The partner's email address. Should be a unique value across Dub.
   */
  email: string | null;
  /**
   * The partner's avatar image.
   */
  image: string | null;
  /**
   * A brief description of the partner and their background.
   */
  description?: string | null | undefined;
  /**
   * The partner's country (required for tax purposes).
   */
  country: string | null;
  /**
   * The partner's PayPal email (for receiving payouts via PayPal).
   */
  paypalEmail: string | null;
  /**
   * The partner's Stripe Connect ID (for receiving payouts via Stripe).
   */
  stripeConnectId: string | null;
  /**
   * The date when the partner enabled payouts.
   */
  payoutsEnabledAt: string | null;
  /**
   * The program's unique ID on Dub.
   */
  programId: string;
  /**
   * The partner's group ID on Dub.
   */
  groupId?: string | null | undefined;
  /**
   * The partner's unique ID on Dub.
   */
  partnerId: string;
  /**
   * The partner's unique ID within your database. Can be useful for associating the partner with a user in your database and retrieving/update their data in the future.
   */
  tenantId: string | null;
  createdAt: string;
  /**
   * The status of the partner's enrollment in the program.
   */
  status: ListPartnersStatus;
  /**
   * The partner's referral links in this program.
   */
  links: Array<ListPartnersLink> | null;
  /**
   * The total commissions paid to the partner for their referrals. Defaults to 0 if `includeExpandedFields` is false.
   */
  totalCommissions?: number | undefined;
  clickRewardId?: string | null | undefined;
  leadRewardId?: string | null | undefined;
  saleRewardId?: string | null | undefined;
  discountId?: string | null | undefined;
  /**
   * If the partner submitted an application to join the program, this is the ID of the application.
   */
  applicationId?: string | null | undefined;
  /**
   * If the partner was banned from the program, this is the date of the ban.
   */
  bannedAt?: string | null | undefined;
  /**
   * If the partner was banned from the program, this is the reason for the ban.
   */
  bannedReason?: ListPartnersBannedReason | null | undefined;
  /**
   * The total number of clicks on the partner's links. Defaults to 0 if `includeExpandedFields` is false.
   */
  clicks?: number | undefined;
  /**
   * The total number of leads generated by the partner's links. Defaults to 0 if `includeExpandedFields` is false.
   */
  leads?: number | undefined;
  /**
   * The total number of leads that converted to paying customers. Defaults to 0 if `includeExpandedFields` is false.
   */
  conversions?: number | undefined;
  /**
   * The total number of sales generated by the partner's links (includes recurring sales). Defaults to 0 if `includeExpandedFields` is false.
   */
  sales?: number | undefined;
  /**
   * The total amount of sales (in cents) generated by the partner's links. Defaults to 0 if `includeExpandedFields` is false.
   */
  saleAmount?: number | undefined;
  /**
   * The total net revenue generated by the partner. Defaults to 0 if `includeExpandedFields` is false.
   */
  netRevenue?: number | undefined;
  /**
   * The partner's website URL (including the https protocol).
   */
  website?: string | null | undefined;
  websiteTxtRecord?: string | null | undefined;
  websiteVerifiedAt?: string | null | undefined;
  /**
   * The partner's YouTube channel username (e.g. `johndoe`).
   */
  youtube?: string | null | undefined;
  youtubeVerifiedAt?: string | null | undefined;
  youtubeSubscriberCount?: number | null | undefined;
  youtubeViewCount?: number | null | undefined;
  /**
   * The partner's Twitter username (e.g. `johndoe`).
   */
  twitter?: string | null | undefined;
  twitterVerifiedAt?: string | null | undefined;
  /**
   * The partner's LinkedIn username (e.g. `johndoe`).
   */
  linkedin?: string | null | undefined;
  linkedinVerifiedAt?: string | null | undefined;
  /**
   * The partner's Instagram username (e.g. `johndoe`).
   */
  instagram?: string | null | undefined;
  instagramVerifiedAt?: string | null | undefined;
  /**
   * The partner's TikTok username (e.g. `johndoe`).
   */
  tiktok?: string | null | undefined;
  tiktokVerifiedAt?: string | null | undefined;
};

/** @internal */
export const ListPartnersQueryParamStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListPartnersQueryParamStatus
> = z.nativeEnum(ListPartnersQueryParamStatus);

/** @internal */
export const ListPartnersQueryParamStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListPartnersQueryParamStatus
> = ListPartnersQueryParamStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPartnersQueryParamStatus$ {
  /** @deprecated use `ListPartnersQueryParamStatus$inboundSchema` instead. */
  export const inboundSchema = ListPartnersQueryParamStatus$inboundSchema;
  /** @deprecated use `ListPartnersQueryParamStatus$outboundSchema` instead. */
  export const outboundSchema = ListPartnersQueryParamStatus$outboundSchema;
}

/** @internal */
export const ListPartnersQueryParamSortBy$inboundSchema: z.ZodNativeEnum<
  typeof ListPartnersQueryParamSortBy
> = z.nativeEnum(ListPartnersQueryParamSortBy);

/** @internal */
export const ListPartnersQueryParamSortBy$outboundSchema: z.ZodNativeEnum<
  typeof ListPartnersQueryParamSortBy
> = ListPartnersQueryParamSortBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPartnersQueryParamSortBy$ {
  /** @deprecated use `ListPartnersQueryParamSortBy$inboundSchema` instead. */
  export const inboundSchema = ListPartnersQueryParamSortBy$inboundSchema;
  /** @deprecated use `ListPartnersQueryParamSortBy$outboundSchema` instead. */
  export const outboundSchema = ListPartnersQueryParamSortBy$outboundSchema;
}

/** @internal */
export const ListPartnersQueryParamSortOrder$inboundSchema: z.ZodNativeEnum<
  typeof ListPartnersQueryParamSortOrder
> = z.nativeEnum(ListPartnersQueryParamSortOrder);

/** @internal */
export const ListPartnersQueryParamSortOrder$outboundSchema: z.ZodNativeEnum<
  typeof ListPartnersQueryParamSortOrder
> = ListPartnersQueryParamSortOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPartnersQueryParamSortOrder$ {
  /** @deprecated use `ListPartnersQueryParamSortOrder$inboundSchema` instead. */
  export const inboundSchema = ListPartnersQueryParamSortOrder$inboundSchema;
  /** @deprecated use `ListPartnersQueryParamSortOrder$outboundSchema` instead. */
  export const outboundSchema = ListPartnersQueryParamSortOrder$outboundSchema;
}

/** @internal */
export const ListPartnersRequest$inboundSchema: z.ZodType<
  ListPartnersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: ListPartnersQueryParamStatus$inboundSchema.optional(),
  country: z.string().optional(),
  sortBy: ListPartnersQueryParamSortBy$inboundSchema.default("saleAmount"),
  sortOrder: ListPartnersQueryParamSortOrder$inboundSchema.default("desc"),
  tenantId: z.string().optional(),
  includeExpandedFields: z.boolean().optional(),
  search: z.string().optional(),
  page: z.number().default(1),
  pageSize: z.number().default(100),
});

/** @internal */
export type ListPartnersRequest$Outbound = {
  status?: string | undefined;
  country?: string | undefined;
  sortBy: string;
  sortOrder: string;
  tenantId?: string | undefined;
  includeExpandedFields?: boolean | undefined;
  search?: string | undefined;
  page: number;
  pageSize: number;
};

/** @internal */
export const ListPartnersRequest$outboundSchema: z.ZodType<
  ListPartnersRequest$Outbound,
  z.ZodTypeDef,
  ListPartnersRequest
> = z.object({
  status: ListPartnersQueryParamStatus$outboundSchema.optional(),
  country: z.string().optional(),
  sortBy: ListPartnersQueryParamSortBy$outboundSchema.default("saleAmount"),
  sortOrder: ListPartnersQueryParamSortOrder$outboundSchema.default("desc"),
  tenantId: z.string().optional(),
  includeExpandedFields: z.boolean().optional(),
  search: z.string().optional(),
  page: z.number().default(1),
  pageSize: z.number().default(100),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPartnersRequest$ {
  /** @deprecated use `ListPartnersRequest$inboundSchema` instead. */
  export const inboundSchema = ListPartnersRequest$inboundSchema;
  /** @deprecated use `ListPartnersRequest$outboundSchema` instead. */
  export const outboundSchema = ListPartnersRequest$outboundSchema;
  /** @deprecated use `ListPartnersRequest$Outbound` instead. */
  export type Outbound = ListPartnersRequest$Outbound;
}

export function listPartnersRequestToJSON(
  listPartnersRequest: ListPartnersRequest,
): string {
  return JSON.stringify(
    ListPartnersRequest$outboundSchema.parse(listPartnersRequest),
  );
}

export function listPartnersRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListPartnersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPartnersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPartnersRequest' from JSON`,
  );
}

/** @internal */
export const ListPartnersStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListPartnersStatus
> = z.nativeEnum(ListPartnersStatus);

/** @internal */
export const ListPartnersStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListPartnersStatus
> = ListPartnersStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPartnersStatus$ {
  /** @deprecated use `ListPartnersStatus$inboundSchema` instead. */
  export const inboundSchema = ListPartnersStatus$inboundSchema;
  /** @deprecated use `ListPartnersStatus$outboundSchema` instead. */
  export const outboundSchema = ListPartnersStatus$outboundSchema;
}

/** @internal */
export const ListPartnersLink$inboundSchema: z.ZodType<
  ListPartnersLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  domain: z.string(),
  key: z.string(),
  shortLink: z.string(),
  url: z.string(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
});

/** @internal */
export type ListPartnersLink$Outbound = {
  id: string;
  domain: string;
  key: string;
  shortLink: string;
  url: string;
  clicks: number;
  leads: number;
  sales: number;
  saleAmount: number;
};

/** @internal */
export const ListPartnersLink$outboundSchema: z.ZodType<
  ListPartnersLink$Outbound,
  z.ZodTypeDef,
  ListPartnersLink
> = z.object({
  id: z.string(),
  domain: z.string(),
  key: z.string(),
  shortLink: z.string(),
  url: z.string(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPartnersLink$ {
  /** @deprecated use `ListPartnersLink$inboundSchema` instead. */
  export const inboundSchema = ListPartnersLink$inboundSchema;
  /** @deprecated use `ListPartnersLink$outboundSchema` instead. */
  export const outboundSchema = ListPartnersLink$outboundSchema;
  /** @deprecated use `ListPartnersLink$Outbound` instead. */
  export type Outbound = ListPartnersLink$Outbound;
}

export function listPartnersLinkToJSON(
  listPartnersLink: ListPartnersLink,
): string {
  return JSON.stringify(
    ListPartnersLink$outboundSchema.parse(listPartnersLink),
  );
}

export function listPartnersLinkFromJSON(
  jsonString: string,
): SafeParseResult<ListPartnersLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPartnersLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPartnersLink' from JSON`,
  );
}

/** @internal */
export const ListPartnersBannedReason$inboundSchema: z.ZodNativeEnum<
  typeof ListPartnersBannedReason
> = z.nativeEnum(ListPartnersBannedReason);

/** @internal */
export const ListPartnersBannedReason$outboundSchema: z.ZodNativeEnum<
  typeof ListPartnersBannedReason
> = ListPartnersBannedReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPartnersBannedReason$ {
  /** @deprecated use `ListPartnersBannedReason$inboundSchema` instead. */
  export const inboundSchema = ListPartnersBannedReason$inboundSchema;
  /** @deprecated use `ListPartnersBannedReason$outboundSchema` instead. */
  export const outboundSchema = ListPartnersBannedReason$outboundSchema;
}

/** @internal */
export const ListPartnersResponseBody$inboundSchema: z.ZodType<
  ListPartnersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.nullable(z.string()),
  image: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()),
  paypalEmail: z.nullable(z.string()),
  stripeConnectId: z.nullable(z.string()),
  payoutsEnabledAt: z.nullable(z.string()),
  programId: z.string(),
  groupId: z.nullable(z.string()).optional(),
  partnerId: z.string(),
  tenantId: z.nullable(z.string()),
  createdAt: z.string(),
  status: ListPartnersStatus$inboundSchema,
  links: z.nullable(z.array(z.lazy(() => ListPartnersLink$inboundSchema))),
  totalCommissions: z.number().default(0),
  clickRewardId: z.nullable(z.string()).optional(),
  leadRewardId: z.nullable(z.string()).optional(),
  saleRewardId: z.nullable(z.string()).optional(),
  discountId: z.nullable(z.string()).optional(),
  applicationId: z.nullable(z.string()).optional(),
  bannedAt: z.nullable(z.string()).optional(),
  bannedReason: z.nullable(ListPartnersBannedReason$inboundSchema).optional(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  conversions: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
  netRevenue: z.number().default(0),
  website: z.nullable(z.string()).optional(),
  websiteTxtRecord: z.nullable(z.string()).optional(),
  websiteVerifiedAt: z.nullable(z.string()).optional(),
  youtube: z.nullable(z.string()).optional(),
  youtubeVerifiedAt: z.nullable(z.string()).optional(),
  youtubeSubscriberCount: z.nullable(z.number()).optional(),
  youtubeViewCount: z.nullable(z.number()).optional(),
  twitter: z.nullable(z.string()).optional(),
  twitterVerifiedAt: z.nullable(z.string()).optional(),
  linkedin: z.nullable(z.string()).optional(),
  linkedinVerifiedAt: z.nullable(z.string()).optional(),
  instagram: z.nullable(z.string()).optional(),
  instagramVerifiedAt: z.nullable(z.string()).optional(),
  tiktok: z.nullable(z.string()).optional(),
  tiktokVerifiedAt: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListPartnersResponseBody$Outbound = {
  id: string;
  name: string;
  email: string | null;
  image: string | null;
  description?: string | null | undefined;
  country: string | null;
  paypalEmail: string | null;
  stripeConnectId: string | null;
  payoutsEnabledAt: string | null;
  programId: string;
  groupId?: string | null | undefined;
  partnerId: string;
  tenantId: string | null;
  createdAt: string;
  status: string;
  links: Array<ListPartnersLink$Outbound> | null;
  totalCommissions: number;
  clickRewardId?: string | null | undefined;
  leadRewardId?: string | null | undefined;
  saleRewardId?: string | null | undefined;
  discountId?: string | null | undefined;
  applicationId?: string | null | undefined;
  bannedAt?: string | null | undefined;
  bannedReason?: string | null | undefined;
  clicks: number;
  leads: number;
  conversions: number;
  sales: number;
  saleAmount: number;
  netRevenue: number;
  website?: string | null | undefined;
  websiteTxtRecord?: string | null | undefined;
  websiteVerifiedAt?: string | null | undefined;
  youtube?: string | null | undefined;
  youtubeVerifiedAt?: string | null | undefined;
  youtubeSubscriberCount?: number | null | undefined;
  youtubeViewCount?: number | null | undefined;
  twitter?: string | null | undefined;
  twitterVerifiedAt?: string | null | undefined;
  linkedin?: string | null | undefined;
  linkedinVerifiedAt?: string | null | undefined;
  instagram?: string | null | undefined;
  instagramVerifiedAt?: string | null | undefined;
  tiktok?: string | null | undefined;
  tiktokVerifiedAt?: string | null | undefined;
};

/** @internal */
export const ListPartnersResponseBody$outboundSchema: z.ZodType<
  ListPartnersResponseBody$Outbound,
  z.ZodTypeDef,
  ListPartnersResponseBody
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.nullable(z.string()),
  image: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()),
  paypalEmail: z.nullable(z.string()),
  stripeConnectId: z.nullable(z.string()),
  payoutsEnabledAt: z.nullable(z.string()),
  programId: z.string(),
  groupId: z.nullable(z.string()).optional(),
  partnerId: z.string(),
  tenantId: z.nullable(z.string()),
  createdAt: z.string(),
  status: ListPartnersStatus$outboundSchema,
  links: z.nullable(z.array(z.lazy(() => ListPartnersLink$outboundSchema))),
  totalCommissions: z.number().default(0),
  clickRewardId: z.nullable(z.string()).optional(),
  leadRewardId: z.nullable(z.string()).optional(),
  saleRewardId: z.nullable(z.string()).optional(),
  discountId: z.nullable(z.string()).optional(),
  applicationId: z.nullable(z.string()).optional(),
  bannedAt: z.nullable(z.string()).optional(),
  bannedReason: z.nullable(ListPartnersBannedReason$outboundSchema).optional(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  conversions: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
  netRevenue: z.number().default(0),
  website: z.nullable(z.string()).optional(),
  websiteTxtRecord: z.nullable(z.string()).optional(),
  websiteVerifiedAt: z.nullable(z.string()).optional(),
  youtube: z.nullable(z.string()).optional(),
  youtubeVerifiedAt: z.nullable(z.string()).optional(),
  youtubeSubscriberCount: z.nullable(z.number()).optional(),
  youtubeViewCount: z.nullable(z.number()).optional(),
  twitter: z.nullable(z.string()).optional(),
  twitterVerifiedAt: z.nullable(z.string()).optional(),
  linkedin: z.nullable(z.string()).optional(),
  linkedinVerifiedAt: z.nullable(z.string()).optional(),
  instagram: z.nullable(z.string()).optional(),
  instagramVerifiedAt: z.nullable(z.string()).optional(),
  tiktok: z.nullable(z.string()).optional(),
  tiktokVerifiedAt: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPartnersResponseBody$ {
  /** @deprecated use `ListPartnersResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListPartnersResponseBody$inboundSchema;
  /** @deprecated use `ListPartnersResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListPartnersResponseBody$outboundSchema;
  /** @deprecated use `ListPartnersResponseBody$Outbound` instead. */
  export type Outbound = ListPartnersResponseBody$Outbound;
}

export function listPartnersResponseBodyToJSON(
  listPartnersResponseBody: ListPartnersResponseBody,
): string {
  return JSON.stringify(
    ListPartnersResponseBody$outboundSchema.parse(listPartnersResponseBody),
  );
}

export function listPartnersResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListPartnersResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPartnersResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPartnersResponseBody' from JSON`,
  );
}
