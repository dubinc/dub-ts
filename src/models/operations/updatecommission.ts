/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Useful for marking a commission as refunded, duplicate, canceled, or fraudulent. Takes precedence over `amount` and `modifyAmount`. When a commission is marked as refunded, duplicate, canceled, or fraudulent, it will be omitted from the payout, and the payout amount will be recalculated accordingly. Paid commissions cannot be updated.
 */
export const Status = {
  Refunded: "refunded",
  Duplicate: "duplicate",
  Canceled: "canceled",
  Fraud: "fraud",
} as const;
/**
 * Useful for marking a commission as refunded, duplicate, canceled, or fraudulent. Takes precedence over `amount` and `modifyAmount`. When a commission is marked as refunded, duplicate, canceled, or fraudulent, it will be omitted from the payout, and the payout amount will be recalculated accordingly. Paid commissions cannot be updated.
 */
export type Status = ClosedEnum<typeof Status>;

export type UpdateCommissionRequestBody = {
  /**
   * The new absolute amount for the sale. Paid commissions cannot be updated.
   */
  amount?: number | undefined;
  /**
   * Modify the current sale amount: use positive values to increase the amount, negative values to decrease it. Takes precedence over `amount`. Paid commissions cannot be updated.
   */
  modifyAmount?: number | undefined;
  /**
   * The currency of the sale amount to update. Accepts ISO 4217 currency codes.
   */
  currency?: string | undefined;
  /**
   * Useful for marking a commission as refunded, duplicate, canceled, or fraudulent. Takes precedence over `amount` and `modifyAmount`. When a commission is marked as refunded, duplicate, canceled, or fraudulent, it will be omitted from the payout, and the payout amount will be recalculated accordingly. Paid commissions cannot be updated.
   */
  status?: Status | undefined;
};

export type UpdateCommissionRequest = {
  /**
   * The commission's unique ID on Dub.
   */
  id: string;
  requestBody?: UpdateCommissionRequestBody | undefined;
};

export const UpdateCommissionType = {
  Click: "click",
  Lead: "lead",
  Sale: "sale",
  Custom: "custom",
} as const;
export type UpdateCommissionType = ClosedEnum<typeof UpdateCommissionType>;

export const UpdateCommissionStatus = {
  Pending: "pending",
  Processed: "processed",
  Paid: "paid",
  Refunded: "refunded",
  Duplicate: "duplicate",
  Fraud: "fraud",
  Canceled: "canceled",
} as const;
export type UpdateCommissionStatus = ClosedEnum<typeof UpdateCommissionStatus>;

/**
 * The updated commission.
 */
export type UpdateCommissionResponseBody = {
  /**
   * The commission's unique ID on Dub.
   */
  id: string;
  type?: UpdateCommissionType | undefined;
  amount: number;
  earnings: number;
  currency: string;
  status: UpdateCommissionStatus;
  invoiceId?: string | null | undefined;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const UpdateCommissionRequestBody$inboundSchema: z.ZodType<
  UpdateCommissionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().optional(),
  modifyAmount: z.number().optional(),
  currency: z.string().default("usd"),
  status: Status$inboundSchema.optional(),
});

/** @internal */
export type UpdateCommissionRequestBody$Outbound = {
  amount?: number | undefined;
  modifyAmount?: number | undefined;
  currency: string;
  status?: string | undefined;
};

/** @internal */
export const UpdateCommissionRequestBody$outboundSchema: z.ZodType<
  UpdateCommissionRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateCommissionRequestBody
> = z.object({
  amount: z.number().optional(),
  modifyAmount: z.number().optional(),
  currency: z.string().default("usd"),
  status: Status$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCommissionRequestBody$ {
  /** @deprecated use `UpdateCommissionRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateCommissionRequestBody$inboundSchema;
  /** @deprecated use `UpdateCommissionRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateCommissionRequestBody$outboundSchema;
  /** @deprecated use `UpdateCommissionRequestBody$Outbound` instead. */
  export type Outbound = UpdateCommissionRequestBody$Outbound;
}

export function updateCommissionRequestBodyToJSON(
  updateCommissionRequestBody: UpdateCommissionRequestBody,
): string {
  return JSON.stringify(
    UpdateCommissionRequestBody$outboundSchema.parse(
      updateCommissionRequestBody,
    ),
  );
}

export function updateCommissionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCommissionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCommissionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCommissionRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateCommissionRequest$inboundSchema: z.ZodType<
  UpdateCommissionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdateCommissionRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateCommissionRequest$Outbound = {
  id: string;
  RequestBody?: UpdateCommissionRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateCommissionRequest$outboundSchema: z.ZodType<
  UpdateCommissionRequest$Outbound,
  z.ZodTypeDef,
  UpdateCommissionRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdateCommissionRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCommissionRequest$ {
  /** @deprecated use `UpdateCommissionRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateCommissionRequest$inboundSchema;
  /** @deprecated use `UpdateCommissionRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateCommissionRequest$outboundSchema;
  /** @deprecated use `UpdateCommissionRequest$Outbound` instead. */
  export type Outbound = UpdateCommissionRequest$Outbound;
}

export function updateCommissionRequestToJSON(
  updateCommissionRequest: UpdateCommissionRequest,
): string {
  return JSON.stringify(
    UpdateCommissionRequest$outboundSchema.parse(updateCommissionRequest),
  );
}

export function updateCommissionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCommissionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCommissionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCommissionRequest' from JSON`,
  );
}

/** @internal */
export const UpdateCommissionType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateCommissionType
> = z.nativeEnum(UpdateCommissionType);

/** @internal */
export const UpdateCommissionType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateCommissionType
> = UpdateCommissionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCommissionType$ {
  /** @deprecated use `UpdateCommissionType$inboundSchema` instead. */
  export const inboundSchema = UpdateCommissionType$inboundSchema;
  /** @deprecated use `UpdateCommissionType$outboundSchema` instead. */
  export const outboundSchema = UpdateCommissionType$outboundSchema;
}

/** @internal */
export const UpdateCommissionStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateCommissionStatus
> = z.nativeEnum(UpdateCommissionStatus);

/** @internal */
export const UpdateCommissionStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateCommissionStatus
> = UpdateCommissionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCommissionStatus$ {
  /** @deprecated use `UpdateCommissionStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateCommissionStatus$inboundSchema;
  /** @deprecated use `UpdateCommissionStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateCommissionStatus$outboundSchema;
}

/** @internal */
export const UpdateCommissionResponseBody$inboundSchema: z.ZodType<
  UpdateCommissionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: UpdateCommissionType$inboundSchema.optional(),
  amount: z.number(),
  earnings: z.number(),
  currency: z.string(),
  status: UpdateCommissionStatus$inboundSchema,
  invoiceId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/** @internal */
export type UpdateCommissionResponseBody$Outbound = {
  id: string;
  type?: string | undefined;
  amount: number;
  earnings: number;
  currency: string;
  status: string;
  invoiceId?: string | null | undefined;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const UpdateCommissionResponseBody$outboundSchema: z.ZodType<
  UpdateCommissionResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateCommissionResponseBody
> = z.object({
  id: z.string(),
  type: UpdateCommissionType$outboundSchema.optional(),
  amount: z.number(),
  earnings: z.number(),
  currency: z.string(),
  status: UpdateCommissionStatus$outboundSchema,
  invoiceId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCommissionResponseBody$ {
  /** @deprecated use `UpdateCommissionResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateCommissionResponseBody$inboundSchema;
  /** @deprecated use `UpdateCommissionResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdateCommissionResponseBody$outboundSchema;
  /** @deprecated use `UpdateCommissionResponseBody$Outbound` instead. */
  export type Outbound = UpdateCommissionResponseBody$Outbound;
}

export function updateCommissionResponseBodyToJSON(
  updateCommissionResponseBody: UpdateCommissionResponseBody,
): string {
  return JSON.stringify(
    UpdateCommissionResponseBody$outboundSchema.parse(
      updateCommissionResponseBody,
    ),
  );
}

export function updateCommissionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCommissionResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCommissionResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCommissionResponseBody' from JSON`,
  );
}
