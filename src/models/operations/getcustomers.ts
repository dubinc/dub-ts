/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCustomersRequest = {
  /**
   * A case-sensitive filter on the list based on the customer's `email` field. The value must be a string. Takes precedence over `externalId`.
   */
  email?: string | undefined;
  /**
   * A case-sensitive filter on the list based on the customer's `externalId` field. The value must be a string. Takes precedence over `search`.
   */
  externalId?: string | undefined;
  /**
   * A search query to filter customers by email, externalId, or name. If `email` or `externalId` is provided, this will be ignored.
   */
  search?: string | undefined;
  /**
   * Whether to include expanded fields on the customer (`link`, `partner`, `discount`).
   */
  includeExpandedFields?: boolean | undefined;
  /**
   * The page number for pagination.
   */
  page?: number | undefined;
  /**
   * The number of items per page.
   */
  pageSize?: number | undefined;
};

export type GetCustomersLink = {
  /**
   * The unique ID of the short link.
   */
  id: string;
  /**
   * The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
   */
  domain: string;
  /**
   * The short link slug. If not provided, a random 7-character slug will be generated.
   */
  key: string;
  /**
   * The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
   */
  shortLink: string;
  /**
   * The ID of the program the short link is associated with.
   */
  programId: string | null;
};

export type GetCustomersPartner = {
  id: string;
  name: string;
  email: string | null;
  image: string | null;
};

export const GetCustomersType = {
  Percentage: "percentage",
  Flat: "flat",
} as const;
export type GetCustomersType = ClosedEnum<typeof GetCustomersType>;

export type Discount = {
  id: string;
  amount: number;
  type: GetCustomersType;
  maxDuration: number | null;
  description?: string | null | undefined;
  couponId: string | null;
  couponTestId: string | null;
  partnersCount?: number | null | undefined;
};

export type GetCustomersResponseBody = {
  /**
   * The unique ID of the customer. You may use either the customer's `id` on Dub (obtained via `/customers` endpoint) or their `externalId` (unique ID within your system, prefixed with `ext_`, e.g. `ext_123`).
   */
  id: string;
  /**
   * Unique identifier for the customer in the client's app.
   */
  externalId: string;
  /**
   * Name of the customer.
   */
  name: string;
  /**
   * Email of the customer.
   */
  email?: string | null | undefined;
  /**
   * Avatar URL of the customer.
   */
  avatar?: string | null | undefined;
  /**
   * Country of the customer.
   */
  country?: string | null | undefined;
  /**
   * The date the customer was created.
   */
  createdAt: string;
  link?: GetCustomersLink | null | undefined;
  programId?: string | null | undefined;
  partner?: GetCustomersPartner | null | undefined;
  discount?: Discount | null | undefined;
};

/** @internal */
export const GetCustomersRequest$inboundSchema: z.ZodType<
  GetCustomersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string().optional(),
  externalId: z.string().optional(),
  search: z.string().optional(),
  includeExpandedFields: z.boolean().optional(),
  page: z.number().default(1),
  pageSize: z.number().default(100),
});

/** @internal */
export type GetCustomersRequest$Outbound = {
  email?: string | undefined;
  externalId?: string | undefined;
  search?: string | undefined;
  includeExpandedFields?: boolean | undefined;
  page: number;
  pageSize: number;
};

/** @internal */
export const GetCustomersRequest$outboundSchema: z.ZodType<
  GetCustomersRequest$Outbound,
  z.ZodTypeDef,
  GetCustomersRequest
> = z.object({
  email: z.string().optional(),
  externalId: z.string().optional(),
  search: z.string().optional(),
  includeExpandedFields: z.boolean().optional(),
  page: z.number().default(1),
  pageSize: z.number().default(100),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomersRequest$ {
  /** @deprecated use `GetCustomersRequest$inboundSchema` instead. */
  export const inboundSchema = GetCustomersRequest$inboundSchema;
  /** @deprecated use `GetCustomersRequest$outboundSchema` instead. */
  export const outboundSchema = GetCustomersRequest$outboundSchema;
  /** @deprecated use `GetCustomersRequest$Outbound` instead. */
  export type Outbound = GetCustomersRequest$Outbound;
}

export function getCustomersRequestToJSON(
  getCustomersRequest: GetCustomersRequest,
): string {
  return JSON.stringify(
    GetCustomersRequest$outboundSchema.parse(getCustomersRequest),
  );
}

export function getCustomersRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomersRequest' from JSON`,
  );
}

/** @internal */
export const GetCustomersLink$inboundSchema: z.ZodType<
  GetCustomersLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  domain: z.string(),
  key: z.string(),
  shortLink: z.string(),
  programId: z.nullable(z.string()),
});

/** @internal */
export type GetCustomersLink$Outbound = {
  id: string;
  domain: string;
  key: string;
  shortLink: string;
  programId: string | null;
};

/** @internal */
export const GetCustomersLink$outboundSchema: z.ZodType<
  GetCustomersLink$Outbound,
  z.ZodTypeDef,
  GetCustomersLink
> = z.object({
  id: z.string(),
  domain: z.string(),
  key: z.string(),
  shortLink: z.string(),
  programId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomersLink$ {
  /** @deprecated use `GetCustomersLink$inboundSchema` instead. */
  export const inboundSchema = GetCustomersLink$inboundSchema;
  /** @deprecated use `GetCustomersLink$outboundSchema` instead. */
  export const outboundSchema = GetCustomersLink$outboundSchema;
  /** @deprecated use `GetCustomersLink$Outbound` instead. */
  export type Outbound = GetCustomersLink$Outbound;
}

export function getCustomersLinkToJSON(
  getCustomersLink: GetCustomersLink,
): string {
  return JSON.stringify(
    GetCustomersLink$outboundSchema.parse(getCustomersLink),
  );
}

export function getCustomersLinkFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomersLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomersLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomersLink' from JSON`,
  );
}

/** @internal */
export const GetCustomersPartner$inboundSchema: z.ZodType<
  GetCustomersPartner,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.nullable(z.string()),
  image: z.nullable(z.string()),
});

/** @internal */
export type GetCustomersPartner$Outbound = {
  id: string;
  name: string;
  email: string | null;
  image: string | null;
};

/** @internal */
export const GetCustomersPartner$outboundSchema: z.ZodType<
  GetCustomersPartner$Outbound,
  z.ZodTypeDef,
  GetCustomersPartner
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.nullable(z.string()),
  image: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomersPartner$ {
  /** @deprecated use `GetCustomersPartner$inboundSchema` instead. */
  export const inboundSchema = GetCustomersPartner$inboundSchema;
  /** @deprecated use `GetCustomersPartner$outboundSchema` instead. */
  export const outboundSchema = GetCustomersPartner$outboundSchema;
  /** @deprecated use `GetCustomersPartner$Outbound` instead. */
  export type Outbound = GetCustomersPartner$Outbound;
}

export function getCustomersPartnerToJSON(
  getCustomersPartner: GetCustomersPartner,
): string {
  return JSON.stringify(
    GetCustomersPartner$outboundSchema.parse(getCustomersPartner),
  );
}

export function getCustomersPartnerFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomersPartner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomersPartner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomersPartner' from JSON`,
  );
}

/** @internal */
export const GetCustomersType$inboundSchema: z.ZodNativeEnum<
  typeof GetCustomersType
> = z.nativeEnum(GetCustomersType);

/** @internal */
export const GetCustomersType$outboundSchema: z.ZodNativeEnum<
  typeof GetCustomersType
> = GetCustomersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomersType$ {
  /** @deprecated use `GetCustomersType$inboundSchema` instead. */
  export const inboundSchema = GetCustomersType$inboundSchema;
  /** @deprecated use `GetCustomersType$outboundSchema` instead. */
  export const outboundSchema = GetCustomersType$outboundSchema;
}

/** @internal */
export const Discount$inboundSchema: z.ZodType<
  Discount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  amount: z.number(),
  type: GetCustomersType$inboundSchema,
  maxDuration: z.nullable(z.number()),
  description: z.nullable(z.string()).optional(),
  couponId: z.nullable(z.string()),
  couponTestId: z.nullable(z.string()),
  partnersCount: z.nullable(z.number()).optional(),
});

/** @internal */
export type Discount$Outbound = {
  id: string;
  amount: number;
  type: string;
  maxDuration: number | null;
  description?: string | null | undefined;
  couponId: string | null;
  couponTestId: string | null;
  partnersCount?: number | null | undefined;
};

/** @internal */
export const Discount$outboundSchema: z.ZodType<
  Discount$Outbound,
  z.ZodTypeDef,
  Discount
> = z.object({
  id: z.string(),
  amount: z.number(),
  type: GetCustomersType$outboundSchema,
  maxDuration: z.nullable(z.number()),
  description: z.nullable(z.string()).optional(),
  couponId: z.nullable(z.string()),
  couponTestId: z.nullable(z.string()),
  partnersCount: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Discount$ {
  /** @deprecated use `Discount$inboundSchema` instead. */
  export const inboundSchema = Discount$inboundSchema;
  /** @deprecated use `Discount$outboundSchema` instead. */
  export const outboundSchema = Discount$outboundSchema;
  /** @deprecated use `Discount$Outbound` instead. */
  export type Outbound = Discount$Outbound;
}

export function discountToJSON(discount: Discount): string {
  return JSON.stringify(Discount$outboundSchema.parse(discount));
}

export function discountFromJSON(
  jsonString: string,
): SafeParseResult<Discount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Discount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Discount' from JSON`,
  );
}

/** @internal */
export const GetCustomersResponseBody$inboundSchema: z.ZodType<
  GetCustomersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  externalId: z.string(),
  name: z.string(),
  email: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  link: z.nullable(z.lazy(() => GetCustomersLink$inboundSchema)).optional(),
  programId: z.nullable(z.string()).optional(),
  partner: z.nullable(z.lazy(() => GetCustomersPartner$inboundSchema))
    .optional(),
  discount: z.nullable(z.lazy(() => Discount$inboundSchema)).optional(),
});

/** @internal */
export type GetCustomersResponseBody$Outbound = {
  id: string;
  externalId: string;
  name: string;
  email?: string | null | undefined;
  avatar?: string | null | undefined;
  country?: string | null | undefined;
  createdAt: string;
  link?: GetCustomersLink$Outbound | null | undefined;
  programId?: string | null | undefined;
  partner?: GetCustomersPartner$Outbound | null | undefined;
  discount?: Discount$Outbound | null | undefined;
};

/** @internal */
export const GetCustomersResponseBody$outboundSchema: z.ZodType<
  GetCustomersResponseBody$Outbound,
  z.ZodTypeDef,
  GetCustomersResponseBody
> = z.object({
  id: z.string(),
  externalId: z.string(),
  name: z.string(),
  email: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  link: z.nullable(z.lazy(() => GetCustomersLink$outboundSchema)).optional(),
  programId: z.nullable(z.string()).optional(),
  partner: z.nullable(z.lazy(() => GetCustomersPartner$outboundSchema))
    .optional(),
  discount: z.nullable(z.lazy(() => Discount$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomersResponseBody$ {
  /** @deprecated use `GetCustomersResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetCustomersResponseBody$inboundSchema;
  /** @deprecated use `GetCustomersResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetCustomersResponseBody$outboundSchema;
  /** @deprecated use `GetCustomersResponseBody$Outbound` instead. */
  export type Outbound = GetCustomersResponseBody$Outbound;
}

export function getCustomersResponseBodyToJSON(
  getCustomersResponseBody: GetCustomersResponseBody,
): string {
  return JSON.stringify(
    GetCustomersResponseBody$outboundSchema.parse(getCustomersResponseBody),
  );
}

export function getCustomersResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomersResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomersResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomersResponseBody' from JSON`,
  );
}
