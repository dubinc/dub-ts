/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The unique IDs of the tags assigned to the short link.
 */
export type CreatePartnerTagIds = string | Array<string>;

/**
 * The unique name of the tags assigned to the short link (case insensitive).
 */
export type CreatePartnerTagNames = string | Array<string>;

export type CreatePartnerTestVariants = {
  url: string;
  percentage: number;
};

/**
 * Additional properties that you can pass to the partner's short link. Will be used to override the default link properties for this partner.
 */
export type LinkProps = {
  /**
   * The length of the short link slug. Defaults to 7 if not provided. When used with `prefix`, the total length of the key will be `prefix.length + keyLength`.
   */
  keyLength?: number | undefined;
  /**
   * The ID of the link in your database. If set, it can be used to identify the link in future API requests (must be prefixed with 'ext_' when passed as a query parameter). This key is unique across your workspace.
   */
  externalId?: string | null | undefined;
  /**
   * The ID of the tenant that created the link inside your system. If set, it can be used to fetch all links for a tenant.
   */
  tenantId?: string | null | undefined;
  /**
   * The prefix of the short link slug for randomly-generated keys (e.g. if prefix is `/c/`, generated keys will be in the `/c/:key` format). Will be ignored if `key` is provided.
   */
  prefix?: string | undefined;
  /**
   * Whether the short link is archived. Defaults to `false` if not provided.
   */
  archived?: boolean | undefined;
  /**
   * The unique IDs of the tags assigned to the short link.
   */
  tagIds?: string | Array<string> | undefined;
  /**
   * The unique name of the tags assigned to the short link (case insensitive).
   */
  tagNames?: string | Array<string> | undefined;
  /**
   * The unique ID existing folder to assign the short link to.
   */
  folderId?: string | null | undefined;
  /**
   * The comments for the short link.
   */
  comments?: string | null | undefined;
  /**
   * The date and time when the short link will expire at.
   */
  expiresAt?: string | null | undefined;
  /**
   * The URL to redirect to when the short link has expired.
   */
  expiredUrl?: string | null | undefined;
  /**
   * The password required to access the destination URL of the short link.
   */
  password?: string | null | undefined;
  /**
   * Whether the short link uses Custom Link Previews feature. Defaults to `false` if not provided.
   */
  proxy?: boolean | undefined;
  /**
   * The custom link preview title (og:title). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
   */
  title?: string | null | undefined;
  /**
   * The custom link preview description (og:description). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
   */
  description?: string | null | undefined;
  /**
   * The custom link preview image (og:image). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
   */
  image?: string | null | undefined;
  /**
   * The custom link preview video (og:video). Will be used for Custom Link Previews if `proxy` is true. Learn more: https://d.to/og
   */
  video?: string | null | undefined;
  /**
   * Whether the short link uses link cloaking. Defaults to `false` if not provided.
   */
  rewrite?: boolean | undefined;
  /**
   * The iOS destination URL for the short link for iOS device targeting.
   */
  ios?: string | null | undefined;
  /**
   * The Android destination URL for the short link for Android device targeting.
   */
  android?: string | null | undefined;
  /**
   * Allow search engines to index your short link. Defaults to `false` if not provided. Learn more: https://d.to/noindex
   */
  doIndex?: boolean | undefined;
  /**
   * The UTM source of the short link. If set, this will populate or override the UTM source in the destination URL.
   */
  utmSource?: string | null | undefined;
  /**
   * The UTM medium of the short link. If set, this will populate or override the UTM medium in the destination URL.
   */
  utmMedium?: string | null | undefined;
  /**
   * The UTM campaign of the short link. If set, this will populate or override the UTM campaign in the destination URL.
   */
  utmCampaign?: string | null | undefined;
  /**
   * The UTM term of the short link. If set, this will populate or override the UTM term in the destination URL.
   */
  utmTerm?: string | null | undefined;
  /**
   * The UTM content of the short link. If set, this will populate or override the UTM content in the destination URL.
   */
  utmContent?: string | null | undefined;
  /**
   * The referral tag of the short link. If set, this will populate or override the `ref` query parameter in the destination URL.
   */
  ref?: string | null | undefined;
  /**
   * An array of A/B test URLs and the percentage of traffic to send to each URL.
   */
  testVariants?: Array<CreatePartnerTestVariants> | null | undefined;
  /**
   * The date and time when the tests started.
   */
  testStartedAt?: string | null | undefined;
  /**
   * The date and time when the tests were or will be completed.
   */
  testCompletedAt?: string | null | undefined;
};

export type CreatePartnerRequestBody = {
  /**
   * The partner's full name. If undefined, the partner's email will be used in lieu of their name (e.g. `john@acme.com`)
   */
  name?: string | null | undefined;
  /**
   * The partner's email address. Partners will be able to claim their profile by signing up at `partners.dub.co` with this email.
   */
  email: string;
  /**
   * The partner's unique username in your system (max 100 characters). This will be used to create a short link for the partner using your program's default domain. If not provided, Dub will try to generate a username from the partner's name or email.
   */
  username?: string | null | undefined;
  /**
   * The partner's avatar image. If not provided, a default avatar will be used.
   */
  image?: string | null | undefined;
  /**
   * The partner's unique ID in your system. Useful for retrieving the partner's links and stats later on. If not provided, the partner will be created as a standalone partner.
   */
  tenantId?: string | undefined;
  /**
   * The partner's country of residence. Must be passed as a 2-letter ISO 3166-1 country code. See https://d.to/geo for more information.
   */
  country?: string | null | undefined;
  /**
   * A brief description of the partner and their background. Max 5,000 characters.
   */
  description?: string | null | undefined;
  /**
   * Additional properties that you can pass to the partner's short link. Will be used to override the default link properties for this partner.
   */
  linkProps?: LinkProps | undefined;
};

/**
 * The status of the partner's enrollment in the program.
 */
export const CreatePartnerStatus = {
  Pending: "pending",
  Approved: "approved",
  Rejected: "rejected",
  Invited: "invited",
  Declined: "declined",
  Banned: "banned",
  Archived: "archived",
} as const;
/**
 * The status of the partner's enrollment in the program.
 */
export type CreatePartnerStatus = ClosedEnum<typeof CreatePartnerStatus>;

export type CreatePartnerLink = {
  /**
   * The unique ID of the short link.
   */
  id: string;
  /**
   * The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
   */
  domain: string;
  /**
   * The short link slug. If not provided, a random 7-character slug will be generated.
   */
  key: string;
  /**
   * The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
   */
  shortLink: string;
  /**
   * The destination URL of the short link.
   */
  url: string;
  /**
   * The number of clicks on the short link.
   */
  clicks?: number | undefined;
  /**
   * The number of leads the short link has generated.
   */
  leads?: number | undefined;
  /**
   * The total number of sales (includes recurring sales) generated by the short link.
   */
  sales?: number | undefined;
  /**
   * The total dollar value of sales (in cents) generated by the short link.
   */
  saleAmount?: number | undefined;
};

/**
 * If the partner was banned from the program, this is the reason for the ban.
 */
export const BannedReason = {
  TosViolation: "tos_violation",
  InappropriateContent: "inappropriate_content",
  FakeTraffic: "fake_traffic",
  Fraud: "fraud",
  Spam: "spam",
  BrandAbuse: "brand_abuse",
} as const;
/**
 * If the partner was banned from the program, this is the reason for the ban.
 */
export type BannedReason = ClosedEnum<typeof BannedReason>;

/**
 * The created partner
 */
export type CreatePartnerResponseBody = {
  /**
   * The partner's unique ID on Dub.
   */
  id: string;
  /**
   * The partner's full legal name.
   */
  name: string;
  /**
   * The partner's email address. Should be a unique value across Dub.
   */
  email: string | null;
  /**
   * The partner's avatar image.
   */
  image: string | null;
  /**
   * A brief description of the partner and their background.
   */
  description?: string | null | undefined;
  /**
   * The partner's country (required for tax purposes).
   */
  country: string | null;
  /**
   * The partner's PayPal email (for receiving payouts via PayPal).
   */
  paypalEmail: string | null;
  /**
   * The partner's Stripe Connect ID (for receiving payouts via Stripe).
   */
  stripeConnectId: string | null;
  /**
   * The date when the partner enabled payouts.
   */
  payoutsEnabledAt: string | null;
  /**
   * The partner's unique ID on Dub.
   */
  partnerId: string;
  /**
   * The partner's unique ID within your database. Can be useful for associating the partner with a user in your database and retrieving/update their data in the future.
   */
  tenantId: string | null;
  /**
   * The program's unique ID on Dub.
   */
  programId: string;
  createdAt: string;
  /**
   * The status of the partner's enrollment in the program.
   */
  status: CreatePartnerStatus;
  /**
   * The partner's referral links in this program.
   */
  links: Array<CreatePartnerLink> | null;
  /**
   * The total commissions paid to the partner for their referrals. Defaults to 0 if `includeExpandedFields` is false.
   */
  totalCommissions?: number | undefined;
  clickRewardId?: string | null | undefined;
  leadRewardId?: string | null | undefined;
  saleRewardId?: string | null | undefined;
  discountId?: string | null | undefined;
  /**
   * If the partner submitted an application to join the program, this is the ID of the application.
   */
  applicationId?: string | null | undefined;
  /**
   * If the partner was banned from the program, this is the date of the ban.
   */
  bannedAt?: string | null | undefined;
  /**
   * If the partner was banned from the program, this is the reason for the ban.
   */
  bannedReason?: BannedReason | null | undefined;
  /**
   * The total number of clicks on the partner's links. Defaults to 0 if `includeExpandedFields` is false.
   */
  clicks?: number | undefined;
  /**
   * The total number of leads generated by the partner's links. Defaults to 0 if `includeExpandedFields` is false.
   */
  leads?: number | undefined;
  /**
   * The total number of leads that converted to paying customers. Defaults to 0 if `includeExpandedFields` is false.
   */
  conversions?: number | undefined;
  /**
   * The total number of sales generated by the partner's links (includes recurring sales). Defaults to 0 if `includeExpandedFields` is false.
   */
  sales?: number | undefined;
  /**
   * The total amount of sales (in cents) generated by the partner's links. Defaults to 0 if `includeExpandedFields` is false.
   */
  saleAmount?: number | undefined;
  /**
   * The total net revenue generated by the partner. Defaults to 0 if `includeExpandedFields` is false.
   */
  netRevenue?: number | undefined;
  /**
   * The partner's website URL (including the https protocol).
   */
  website?: string | null | undefined;
  websiteTxtRecord?: string | null | undefined;
  websiteVerifiedAt?: string | null | undefined;
  /**
   * The partner's YouTube channel username (e.g. `johndoe`).
   */
  youtube?: string | null | undefined;
  youtubeVerifiedAt?: string | null | undefined;
  youtubeSubscriberCount?: number | null | undefined;
  youtubeViewCount?: number | null | undefined;
  /**
   * The partner's Twitter username (e.g. `johndoe`).
   */
  twitter?: string | null | undefined;
  twitterVerifiedAt?: string | null | undefined;
  /**
   * The partner's LinkedIn username (e.g. `johndoe`).
   */
  linkedin?: string | null | undefined;
  linkedinVerifiedAt?: string | null | undefined;
  /**
   * The partner's Instagram username (e.g. `johndoe`).
   */
  instagram?: string | null | undefined;
  instagramVerifiedAt?: string | null | undefined;
  /**
   * The partner's TikTok username (e.g. `johndoe`).
   */
  tiktok?: string | null | undefined;
  tiktokVerifiedAt?: string | null | undefined;
};

/** @internal */
export const CreatePartnerTagIds$inboundSchema: z.ZodType<
  CreatePartnerTagIds,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type CreatePartnerTagIds$Outbound = string | Array<string>;

/** @internal */
export const CreatePartnerTagIds$outboundSchema: z.ZodType<
  CreatePartnerTagIds$Outbound,
  z.ZodTypeDef,
  CreatePartnerTagIds
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePartnerTagIds$ {
  /** @deprecated use `CreatePartnerTagIds$inboundSchema` instead. */
  export const inboundSchema = CreatePartnerTagIds$inboundSchema;
  /** @deprecated use `CreatePartnerTagIds$outboundSchema` instead. */
  export const outboundSchema = CreatePartnerTagIds$outboundSchema;
  /** @deprecated use `CreatePartnerTagIds$Outbound` instead. */
  export type Outbound = CreatePartnerTagIds$Outbound;
}

export function createPartnerTagIdsToJSON(
  createPartnerTagIds: CreatePartnerTagIds,
): string {
  return JSON.stringify(
    CreatePartnerTagIds$outboundSchema.parse(createPartnerTagIds),
  );
}

export function createPartnerTagIdsFromJSON(
  jsonString: string,
): SafeParseResult<CreatePartnerTagIds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePartnerTagIds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePartnerTagIds' from JSON`,
  );
}

/** @internal */
export const CreatePartnerTagNames$inboundSchema: z.ZodType<
  CreatePartnerTagNames,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type CreatePartnerTagNames$Outbound = string | Array<string>;

/** @internal */
export const CreatePartnerTagNames$outboundSchema: z.ZodType<
  CreatePartnerTagNames$Outbound,
  z.ZodTypeDef,
  CreatePartnerTagNames
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePartnerTagNames$ {
  /** @deprecated use `CreatePartnerTagNames$inboundSchema` instead. */
  export const inboundSchema = CreatePartnerTagNames$inboundSchema;
  /** @deprecated use `CreatePartnerTagNames$outboundSchema` instead. */
  export const outboundSchema = CreatePartnerTagNames$outboundSchema;
  /** @deprecated use `CreatePartnerTagNames$Outbound` instead. */
  export type Outbound = CreatePartnerTagNames$Outbound;
}

export function createPartnerTagNamesToJSON(
  createPartnerTagNames: CreatePartnerTagNames,
): string {
  return JSON.stringify(
    CreatePartnerTagNames$outboundSchema.parse(createPartnerTagNames),
  );
}

export function createPartnerTagNamesFromJSON(
  jsonString: string,
): SafeParseResult<CreatePartnerTagNames, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePartnerTagNames$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePartnerTagNames' from JSON`,
  );
}

/** @internal */
export const CreatePartnerTestVariants$inboundSchema: z.ZodType<
  CreatePartnerTestVariants,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  percentage: z.number(),
});

/** @internal */
export type CreatePartnerTestVariants$Outbound = {
  url: string;
  percentage: number;
};

/** @internal */
export const CreatePartnerTestVariants$outboundSchema: z.ZodType<
  CreatePartnerTestVariants$Outbound,
  z.ZodTypeDef,
  CreatePartnerTestVariants
> = z.object({
  url: z.string(),
  percentage: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePartnerTestVariants$ {
  /** @deprecated use `CreatePartnerTestVariants$inboundSchema` instead. */
  export const inboundSchema = CreatePartnerTestVariants$inboundSchema;
  /** @deprecated use `CreatePartnerTestVariants$outboundSchema` instead. */
  export const outboundSchema = CreatePartnerTestVariants$outboundSchema;
  /** @deprecated use `CreatePartnerTestVariants$Outbound` instead. */
  export type Outbound = CreatePartnerTestVariants$Outbound;
}

export function createPartnerTestVariantsToJSON(
  createPartnerTestVariants: CreatePartnerTestVariants,
): string {
  return JSON.stringify(
    CreatePartnerTestVariants$outboundSchema.parse(createPartnerTestVariants),
  );
}

export function createPartnerTestVariantsFromJSON(
  jsonString: string,
): SafeParseResult<CreatePartnerTestVariants, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePartnerTestVariants$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePartnerTestVariants' from JSON`,
  );
}

/** @internal */
export const LinkProps$inboundSchema: z.ZodType<
  LinkProps,
  z.ZodTypeDef,
  unknown
> = z.object({
  keyLength: z.number().optional(),
  externalId: z.nullable(z.string()).optional(),
  tenantId: z.nullable(z.string()).optional(),
  prefix: z.string().optional(),
  archived: z.boolean().optional(),
  tagIds: z.union([z.string(), z.array(z.string())]).optional(),
  tagNames: z.union([z.string(), z.array(z.string())]).optional(),
  folderId: z.nullable(z.string()).optional(),
  comments: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  expiredUrl: z.nullable(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  proxy: z.boolean().optional(),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  video: z.nullable(z.string()).optional(),
  rewrite: z.boolean().optional(),
  ios: z.nullable(z.string()).optional(),
  android: z.nullable(z.string()).optional(),
  doIndex: z.boolean().optional(),
  utm_source: z.nullable(z.string()).optional(),
  utm_medium: z.nullable(z.string()).optional(),
  utm_campaign: z.nullable(z.string()).optional(),
  utm_term: z.nullable(z.string()).optional(),
  utm_content: z.nullable(z.string()).optional(),
  ref: z.nullable(z.string()).optional(),
  testVariants: z.nullable(
    z.array(z.lazy(() => CreatePartnerTestVariants$inboundSchema)),
  ).optional(),
  testStartedAt: z.nullable(z.string()).optional(),
  testCompletedAt: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "utm_source": "utmSource",
    "utm_medium": "utmMedium",
    "utm_campaign": "utmCampaign",
    "utm_term": "utmTerm",
    "utm_content": "utmContent",
  });
});

/** @internal */
export type LinkProps$Outbound = {
  keyLength?: number | undefined;
  externalId?: string | null | undefined;
  tenantId?: string | null | undefined;
  prefix?: string | undefined;
  archived?: boolean | undefined;
  tagIds?: string | Array<string> | undefined;
  tagNames?: string | Array<string> | undefined;
  folderId?: string | null | undefined;
  comments?: string | null | undefined;
  expiresAt?: string | null | undefined;
  expiredUrl?: string | null | undefined;
  password?: string | null | undefined;
  proxy?: boolean | undefined;
  title?: string | null | undefined;
  description?: string | null | undefined;
  image?: string | null | undefined;
  video?: string | null | undefined;
  rewrite?: boolean | undefined;
  ios?: string | null | undefined;
  android?: string | null | undefined;
  doIndex?: boolean | undefined;
  utm_source?: string | null | undefined;
  utm_medium?: string | null | undefined;
  utm_campaign?: string | null | undefined;
  utm_term?: string | null | undefined;
  utm_content?: string | null | undefined;
  ref?: string | null | undefined;
  testVariants?: Array<CreatePartnerTestVariants$Outbound> | null | undefined;
  testStartedAt?: string | null | undefined;
  testCompletedAt?: string | null | undefined;
};

/** @internal */
export const LinkProps$outboundSchema: z.ZodType<
  LinkProps$Outbound,
  z.ZodTypeDef,
  LinkProps
> = z.object({
  keyLength: z.number().optional(),
  externalId: z.nullable(z.string()).optional(),
  tenantId: z.nullable(z.string()).optional(),
  prefix: z.string().optional(),
  archived: z.boolean().optional(),
  tagIds: z.union([z.string(), z.array(z.string())]).optional(),
  tagNames: z.union([z.string(), z.array(z.string())]).optional(),
  folderId: z.nullable(z.string()).optional(),
  comments: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  expiredUrl: z.nullable(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  proxy: z.boolean().optional(),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  video: z.nullable(z.string()).optional(),
  rewrite: z.boolean().optional(),
  ios: z.nullable(z.string()).optional(),
  android: z.nullable(z.string()).optional(),
  doIndex: z.boolean().optional(),
  utmSource: z.nullable(z.string()).optional(),
  utmMedium: z.nullable(z.string()).optional(),
  utmCampaign: z.nullable(z.string()).optional(),
  utmTerm: z.nullable(z.string()).optional(),
  utmContent: z.nullable(z.string()).optional(),
  ref: z.nullable(z.string()).optional(),
  testVariants: z.nullable(
    z.array(z.lazy(() => CreatePartnerTestVariants$outboundSchema)),
  ).optional(),
  testStartedAt: z.nullable(z.string()).optional(),
  testCompletedAt: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    utmSource: "utm_source",
    utmMedium: "utm_medium",
    utmCampaign: "utm_campaign",
    utmTerm: "utm_term",
    utmContent: "utm_content",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkProps$ {
  /** @deprecated use `LinkProps$inboundSchema` instead. */
  export const inboundSchema = LinkProps$inboundSchema;
  /** @deprecated use `LinkProps$outboundSchema` instead. */
  export const outboundSchema = LinkProps$outboundSchema;
  /** @deprecated use `LinkProps$Outbound` instead. */
  export type Outbound = LinkProps$Outbound;
}

export function linkPropsToJSON(linkProps: LinkProps): string {
  return JSON.stringify(LinkProps$outboundSchema.parse(linkProps));
}

export function linkPropsFromJSON(
  jsonString: string,
): SafeParseResult<LinkProps, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkProps$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkProps' from JSON`,
  );
}

/** @internal */
export const CreatePartnerRequestBody$inboundSchema: z.ZodType<
  CreatePartnerRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  email: z.string(),
  username: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  tenantId: z.string().optional(),
  country: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  linkProps: z.lazy(() => LinkProps$inboundSchema).optional(),
});

/** @internal */
export type CreatePartnerRequestBody$Outbound = {
  name?: string | null | undefined;
  email: string;
  username?: string | null | undefined;
  image?: string | null | undefined;
  tenantId?: string | undefined;
  country?: string | null | undefined;
  description?: string | null | undefined;
  linkProps?: LinkProps$Outbound | undefined;
};

/** @internal */
export const CreatePartnerRequestBody$outboundSchema: z.ZodType<
  CreatePartnerRequestBody$Outbound,
  z.ZodTypeDef,
  CreatePartnerRequestBody
> = z.object({
  name: z.nullable(z.string()).optional(),
  email: z.string(),
  username: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  tenantId: z.string().optional(),
  country: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  linkProps: z.lazy(() => LinkProps$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePartnerRequestBody$ {
  /** @deprecated use `CreatePartnerRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreatePartnerRequestBody$inboundSchema;
  /** @deprecated use `CreatePartnerRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreatePartnerRequestBody$outboundSchema;
  /** @deprecated use `CreatePartnerRequestBody$Outbound` instead. */
  export type Outbound = CreatePartnerRequestBody$Outbound;
}

export function createPartnerRequestBodyToJSON(
  createPartnerRequestBody: CreatePartnerRequestBody,
): string {
  return JSON.stringify(
    CreatePartnerRequestBody$outboundSchema.parse(createPartnerRequestBody),
  );
}

export function createPartnerRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreatePartnerRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePartnerRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePartnerRequestBody' from JSON`,
  );
}

/** @internal */
export const CreatePartnerStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreatePartnerStatus
> = z.nativeEnum(CreatePartnerStatus);

/** @internal */
export const CreatePartnerStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreatePartnerStatus
> = CreatePartnerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePartnerStatus$ {
  /** @deprecated use `CreatePartnerStatus$inboundSchema` instead. */
  export const inboundSchema = CreatePartnerStatus$inboundSchema;
  /** @deprecated use `CreatePartnerStatus$outboundSchema` instead. */
  export const outboundSchema = CreatePartnerStatus$outboundSchema;
}

/** @internal */
export const CreatePartnerLink$inboundSchema: z.ZodType<
  CreatePartnerLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  domain: z.string(),
  key: z.string(),
  shortLink: z.string(),
  url: z.string(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
});

/** @internal */
export type CreatePartnerLink$Outbound = {
  id: string;
  domain: string;
  key: string;
  shortLink: string;
  url: string;
  clicks: number;
  leads: number;
  sales: number;
  saleAmount: number;
};

/** @internal */
export const CreatePartnerLink$outboundSchema: z.ZodType<
  CreatePartnerLink$Outbound,
  z.ZodTypeDef,
  CreatePartnerLink
> = z.object({
  id: z.string(),
  domain: z.string(),
  key: z.string(),
  shortLink: z.string(),
  url: z.string(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePartnerLink$ {
  /** @deprecated use `CreatePartnerLink$inboundSchema` instead. */
  export const inboundSchema = CreatePartnerLink$inboundSchema;
  /** @deprecated use `CreatePartnerLink$outboundSchema` instead. */
  export const outboundSchema = CreatePartnerLink$outboundSchema;
  /** @deprecated use `CreatePartnerLink$Outbound` instead. */
  export type Outbound = CreatePartnerLink$Outbound;
}

export function createPartnerLinkToJSON(
  createPartnerLink: CreatePartnerLink,
): string {
  return JSON.stringify(
    CreatePartnerLink$outboundSchema.parse(createPartnerLink),
  );
}

export function createPartnerLinkFromJSON(
  jsonString: string,
): SafeParseResult<CreatePartnerLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePartnerLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePartnerLink' from JSON`,
  );
}

/** @internal */
export const BannedReason$inboundSchema: z.ZodNativeEnum<typeof BannedReason> =
  z.nativeEnum(BannedReason);

/** @internal */
export const BannedReason$outboundSchema: z.ZodNativeEnum<typeof BannedReason> =
  BannedReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BannedReason$ {
  /** @deprecated use `BannedReason$inboundSchema` instead. */
  export const inboundSchema = BannedReason$inboundSchema;
  /** @deprecated use `BannedReason$outboundSchema` instead. */
  export const outboundSchema = BannedReason$outboundSchema;
}

/** @internal */
export const CreatePartnerResponseBody$inboundSchema: z.ZodType<
  CreatePartnerResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.nullable(z.string()),
  image: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()),
  paypalEmail: z.nullable(z.string()),
  stripeConnectId: z.nullable(z.string()),
  payoutsEnabledAt: z.nullable(z.string()),
  partnerId: z.string(),
  tenantId: z.nullable(z.string()),
  programId: z.string(),
  createdAt: z.string(),
  status: CreatePartnerStatus$inboundSchema,
  links: z.nullable(z.array(z.lazy(() => CreatePartnerLink$inboundSchema))),
  totalCommissions: z.number().default(0),
  clickRewardId: z.nullable(z.string()).optional(),
  leadRewardId: z.nullable(z.string()).optional(),
  saleRewardId: z.nullable(z.string()).optional(),
  discountId: z.nullable(z.string()).optional(),
  applicationId: z.nullable(z.string()).optional(),
  bannedAt: z.nullable(z.string()).optional(),
  bannedReason: z.nullable(BannedReason$inboundSchema).optional(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  conversions: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
  netRevenue: z.number().default(0),
  website: z.nullable(z.string()).optional(),
  websiteTxtRecord: z.nullable(z.string()).optional(),
  websiteVerifiedAt: z.nullable(z.string()).optional(),
  youtube: z.nullable(z.string()).optional(),
  youtubeVerifiedAt: z.nullable(z.string()).optional(),
  youtubeSubscriberCount: z.nullable(z.number()).optional(),
  youtubeViewCount: z.nullable(z.number()).optional(),
  twitter: z.nullable(z.string()).optional(),
  twitterVerifiedAt: z.nullable(z.string()).optional(),
  linkedin: z.nullable(z.string()).optional(),
  linkedinVerifiedAt: z.nullable(z.string()).optional(),
  instagram: z.nullable(z.string()).optional(),
  instagramVerifiedAt: z.nullable(z.string()).optional(),
  tiktok: z.nullable(z.string()).optional(),
  tiktokVerifiedAt: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreatePartnerResponseBody$Outbound = {
  id: string;
  name: string;
  email: string | null;
  image: string | null;
  description?: string | null | undefined;
  country: string | null;
  paypalEmail: string | null;
  stripeConnectId: string | null;
  payoutsEnabledAt: string | null;
  partnerId: string;
  tenantId: string | null;
  programId: string;
  createdAt: string;
  status: string;
  links: Array<CreatePartnerLink$Outbound> | null;
  totalCommissions: number;
  clickRewardId?: string | null | undefined;
  leadRewardId?: string | null | undefined;
  saleRewardId?: string | null | undefined;
  discountId?: string | null | undefined;
  applicationId?: string | null | undefined;
  bannedAt?: string | null | undefined;
  bannedReason?: string | null | undefined;
  clicks: number;
  leads: number;
  conversions: number;
  sales: number;
  saleAmount: number;
  netRevenue: number;
  website?: string | null | undefined;
  websiteTxtRecord?: string | null | undefined;
  websiteVerifiedAt?: string | null | undefined;
  youtube?: string | null | undefined;
  youtubeVerifiedAt?: string | null | undefined;
  youtubeSubscriberCount?: number | null | undefined;
  youtubeViewCount?: number | null | undefined;
  twitter?: string | null | undefined;
  twitterVerifiedAt?: string | null | undefined;
  linkedin?: string | null | undefined;
  linkedinVerifiedAt?: string | null | undefined;
  instagram?: string | null | undefined;
  instagramVerifiedAt?: string | null | undefined;
  tiktok?: string | null | undefined;
  tiktokVerifiedAt?: string | null | undefined;
};

/** @internal */
export const CreatePartnerResponseBody$outboundSchema: z.ZodType<
  CreatePartnerResponseBody$Outbound,
  z.ZodTypeDef,
  CreatePartnerResponseBody
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.nullable(z.string()),
  image: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()),
  paypalEmail: z.nullable(z.string()),
  stripeConnectId: z.nullable(z.string()),
  payoutsEnabledAt: z.nullable(z.string()),
  partnerId: z.string(),
  tenantId: z.nullable(z.string()),
  programId: z.string(),
  createdAt: z.string(),
  status: CreatePartnerStatus$outboundSchema,
  links: z.nullable(z.array(z.lazy(() => CreatePartnerLink$outboundSchema))),
  totalCommissions: z.number().default(0),
  clickRewardId: z.nullable(z.string()).optional(),
  leadRewardId: z.nullable(z.string()).optional(),
  saleRewardId: z.nullable(z.string()).optional(),
  discountId: z.nullable(z.string()).optional(),
  applicationId: z.nullable(z.string()).optional(),
  bannedAt: z.nullable(z.string()).optional(),
  bannedReason: z.nullable(BannedReason$outboundSchema).optional(),
  clicks: z.number().default(0),
  leads: z.number().default(0),
  conversions: z.number().default(0),
  sales: z.number().default(0),
  saleAmount: z.number().default(0),
  netRevenue: z.number().default(0),
  website: z.nullable(z.string()).optional(),
  websiteTxtRecord: z.nullable(z.string()).optional(),
  websiteVerifiedAt: z.nullable(z.string()).optional(),
  youtube: z.nullable(z.string()).optional(),
  youtubeVerifiedAt: z.nullable(z.string()).optional(),
  youtubeSubscriberCount: z.nullable(z.number()).optional(),
  youtubeViewCount: z.nullable(z.number()).optional(),
  twitter: z.nullable(z.string()).optional(),
  twitterVerifiedAt: z.nullable(z.string()).optional(),
  linkedin: z.nullable(z.string()).optional(),
  linkedinVerifiedAt: z.nullable(z.string()).optional(),
  instagram: z.nullable(z.string()).optional(),
  instagramVerifiedAt: z.nullable(z.string()).optional(),
  tiktok: z.nullable(z.string()).optional(),
  tiktokVerifiedAt: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePartnerResponseBody$ {
  /** @deprecated use `CreatePartnerResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreatePartnerResponseBody$inboundSchema;
  /** @deprecated use `CreatePartnerResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreatePartnerResponseBody$outboundSchema;
  /** @deprecated use `CreatePartnerResponseBody$Outbound` instead. */
  export type Outbound = CreatePartnerResponseBody$Outbound;
}

export function createPartnerResponseBodyToJSON(
  createPartnerResponseBody: CreatePartnerResponseBody,
): string {
  return JSON.stringify(
    CreatePartnerResponseBody$outboundSchema.parse(createPartnerResponseBody),
  );
}

export function createPartnerResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreatePartnerResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePartnerResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePartnerResponseBody' from JSON`,
  );
}
