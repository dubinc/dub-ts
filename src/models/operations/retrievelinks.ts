/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RetrieveLinksRequest = {
  partnerId?: string | undefined;
  tenantId?: string | undefined;
};

export type Link = {
  /**
   * The unique ID of the short link.
   */
  id: string;
  /**
   * The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
   */
  domain: string;
  /**
   * The short link slug. If not provided, a random 7-character slug will be generated.
   */
  key: string;
  /**
   * The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
   */
  shortLink: string;
  /**
   * The destination URL of the short link.
   */
  url: string;
  /**
   * The number of clicks on the short link.
   */
  clicks?: number | undefined;
  /**
   * The number of leads the short links has generated.
   */
  leads?: number | undefined;
  /**
   * The number of sales the short links has generated.
   */
  sales?: number | undefined;
  /**
   * The total dollar amount of sales the short links has generated (in cents).
   */
  saleAmount?: number | undefined;
};

/** @internal */
export const RetrieveLinksRequest$inboundSchema: z.ZodType<
  RetrieveLinksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  partnerId: z.string().optional(),
  tenantId: z.string().optional(),
});

/** @internal */
export type RetrieveLinksRequest$Outbound = {
  partnerId?: string | undefined;
  tenantId?: string | undefined;
};

/** @internal */
export const RetrieveLinksRequest$outboundSchema: z.ZodType<
  RetrieveLinksRequest$Outbound,
  z.ZodTypeDef,
  RetrieveLinksRequest
> = z.object({
  partnerId: z.string().optional(),
  tenantId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveLinksRequest$ {
  /** @deprecated use `RetrieveLinksRequest$inboundSchema` instead. */
  export const inboundSchema = RetrieveLinksRequest$inboundSchema;
  /** @deprecated use `RetrieveLinksRequest$outboundSchema` instead. */
  export const outboundSchema = RetrieveLinksRequest$outboundSchema;
  /** @deprecated use `RetrieveLinksRequest$Outbound` instead. */
  export type Outbound = RetrieveLinksRequest$Outbound;
}

export function retrieveLinksRequestToJSON(
  retrieveLinksRequest: RetrieveLinksRequest,
): string {
  return JSON.stringify(
    RetrieveLinksRequest$outboundSchema.parse(retrieveLinksRequest),
  );
}

export function retrieveLinksRequestFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveLinksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveLinksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveLinksRequest' from JSON`,
  );
}

/** @internal */
export const Link$inboundSchema: z.ZodType<Link, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    domain: z.string(),
    key: z.string(),
    shortLink: z.string(),
    url: z.string(),
    clicks: z.number().default(0),
    leads: z.number().default(0),
    sales: z.number().default(0),
    saleAmount: z.number().default(0),
  });

/** @internal */
export type Link$Outbound = {
  id: string;
  domain: string;
  key: string;
  shortLink: string;
  url: string;
  clicks: number;
  leads: number;
  sales: number;
  saleAmount: number;
};

/** @internal */
export const Link$outboundSchema: z.ZodType<Link$Outbound, z.ZodTypeDef, Link> =
  z.object({
    id: z.string(),
    domain: z.string(),
    key: z.string(),
    shortLink: z.string(),
    url: z.string(),
    clicks: z.number().default(0),
    leads: z.number().default(0),
    sales: z.number().default(0),
    saleAmount: z.number().default(0),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Link$ {
  /** @deprecated use `Link$inboundSchema` instead. */
  export const inboundSchema = Link$inboundSchema;
  /** @deprecated use `Link$outboundSchema` instead. */
  export const outboundSchema = Link$outboundSchema;
  /** @deprecated use `Link$Outbound` instead. */
  export type Outbound = Link$Outbound;
}

export function linkToJSON(link: Link): string {
  return JSON.stringify(Link$outboundSchema.parse(link));
}

export function linkFromJSON(
  jsonString: string,
): SafeParseResult<Link, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Link$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Link' from JSON`,
  );
}
