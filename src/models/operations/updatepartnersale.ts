/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdatePartnerSaleRequestBody = {
  programId: string;
  invoiceId: string;
  /**
   * The new absolute amount for the sale.
   */
  amount?: number | undefined;
  /**
   * Modify the current sale amount: use positive values to increase the amount, negative values to decrease it.
   */
  modifyAmount?: number | undefined;
  /**
   * The currency of the sale amount to update. Accepts ISO 4217 currency codes.
   */
  currency?: string | undefined;
};

export const UpdatePartnerSaleStatus = {
  Pending: "pending",
  Processed: "processed",
  Paid: "paid",
  Refunded: "refunded",
  Duplicate: "duplicate",
  Fraud: "fraud",
} as const;
export type UpdatePartnerSaleStatus = ClosedEnum<
  typeof UpdatePartnerSaleStatus
>;

/**
 * The updated sale.
 */
export type UpdatePartnerSaleResponseBody = {
  id: string;
  amount: number;
  earnings: number;
  currency: string;
  status: UpdatePartnerSaleStatus;
  invoiceId?: string | null | undefined;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const UpdatePartnerSaleRequestBody$inboundSchema: z.ZodType<
  UpdatePartnerSaleRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  programId: z.string(),
  invoiceId: z.string(),
  amount: z.number().optional(),
  modifyAmount: z.number().optional(),
  currency: z.string().default("usd"),
});

/** @internal */
export type UpdatePartnerSaleRequestBody$Outbound = {
  programId: string;
  invoiceId: string;
  amount?: number | undefined;
  modifyAmount?: number | undefined;
  currency: string;
};

/** @internal */
export const UpdatePartnerSaleRequestBody$outboundSchema: z.ZodType<
  UpdatePartnerSaleRequestBody$Outbound,
  z.ZodTypeDef,
  UpdatePartnerSaleRequestBody
> = z.object({
  programId: z.string(),
  invoiceId: z.string(),
  amount: z.number().optional(),
  modifyAmount: z.number().optional(),
  currency: z.string().default("usd"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePartnerSaleRequestBody$ {
  /** @deprecated use `UpdatePartnerSaleRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdatePartnerSaleRequestBody$inboundSchema;
  /** @deprecated use `UpdatePartnerSaleRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdatePartnerSaleRequestBody$outboundSchema;
  /** @deprecated use `UpdatePartnerSaleRequestBody$Outbound` instead. */
  export type Outbound = UpdatePartnerSaleRequestBody$Outbound;
}

export function updatePartnerSaleRequestBodyToJSON(
  updatePartnerSaleRequestBody: UpdatePartnerSaleRequestBody,
): string {
  return JSON.stringify(
    UpdatePartnerSaleRequestBody$outboundSchema.parse(
      updatePartnerSaleRequestBody,
    ),
  );
}

export function updatePartnerSaleRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePartnerSaleRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePartnerSaleRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePartnerSaleRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdatePartnerSaleStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePartnerSaleStatus
> = z.nativeEnum(UpdatePartnerSaleStatus);

/** @internal */
export const UpdatePartnerSaleStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePartnerSaleStatus
> = UpdatePartnerSaleStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePartnerSaleStatus$ {
  /** @deprecated use `UpdatePartnerSaleStatus$inboundSchema` instead. */
  export const inboundSchema = UpdatePartnerSaleStatus$inboundSchema;
  /** @deprecated use `UpdatePartnerSaleStatus$outboundSchema` instead. */
  export const outboundSchema = UpdatePartnerSaleStatus$outboundSchema;
}

/** @internal */
export const UpdatePartnerSaleResponseBody$inboundSchema: z.ZodType<
  UpdatePartnerSaleResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  amount: z.number(),
  earnings: z.number(),
  currency: z.string(),
  status: UpdatePartnerSaleStatus$inboundSchema,
  invoiceId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/** @internal */
export type UpdatePartnerSaleResponseBody$Outbound = {
  id: string;
  amount: number;
  earnings: number;
  currency: string;
  status: string;
  invoiceId?: string | null | undefined;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const UpdatePartnerSaleResponseBody$outboundSchema: z.ZodType<
  UpdatePartnerSaleResponseBody$Outbound,
  z.ZodTypeDef,
  UpdatePartnerSaleResponseBody
> = z.object({
  id: z.string(),
  amount: z.number(),
  earnings: z.number(),
  currency: z.string(),
  status: UpdatePartnerSaleStatus$outboundSchema,
  invoiceId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePartnerSaleResponseBody$ {
  /** @deprecated use `UpdatePartnerSaleResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdatePartnerSaleResponseBody$inboundSchema;
  /** @deprecated use `UpdatePartnerSaleResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdatePartnerSaleResponseBody$outboundSchema;
  /** @deprecated use `UpdatePartnerSaleResponseBody$Outbound` instead. */
  export type Outbound = UpdatePartnerSaleResponseBody$Outbound;
}

export function updatePartnerSaleResponseBodyToJSON(
  updatePartnerSaleResponseBody: UpdatePartnerSaleResponseBody,
): string {
  return JSON.stringify(
    UpdatePartnerSaleResponseBody$outboundSchema.parse(
      updatePartnerSaleResponseBody,
    ),
  );
}

export function updatePartnerSaleResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePartnerSaleResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePartnerSaleResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePartnerSaleResponseBody' from JSON`,
  );
}
