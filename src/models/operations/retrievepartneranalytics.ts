/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The interval to retrieve analytics for. If undefined, defaults to 24h.
 */
export const RetrievePartnerAnalyticsQueryParamInterval = {
  TwentyFourh: "24h",
  Sevend: "7d",
  Thirtyd: "30d",
  Ninetyd: "90d",
  Oney: "1y",
  Mtd: "mtd",
  Qtd: "qtd",
  Ytd: "ytd",
  All: "all",
  AllUnfiltered: "all_unfiltered",
} as const;
/**
 * The interval to retrieve analytics for. If undefined, defaults to 24h.
 */
export type RetrievePartnerAnalyticsQueryParamInterval = ClosedEnum<
  typeof RetrievePartnerAnalyticsQueryParamInterval
>;

/**
 * The parameter to group the analytics data points by. Defaults to `count` if undefined.
 */
export const RetrievePartnerAnalyticsQueryParamGroupBy = {
  TopLinks: "top_links",
  Timeseries: "timeseries",
  Count: "count",
} as const;
/**
 * The parameter to group the analytics data points by. Defaults to `count` if undefined.
 */
export type RetrievePartnerAnalyticsQueryParamGroupBy = ClosedEnum<
  typeof RetrievePartnerAnalyticsQueryParamGroupBy
>;

export type RetrievePartnerAnalyticsRequest = {
  /**
   * The ID of the partner to retrieve analytics for.
   */
  partnerId?: string | undefined;
  /**
   * The ID of the tenant that created the link inside your system.
   */
  tenantId?: string | undefined;
  /**
   * The interval to retrieve analytics for. If undefined, defaults to 24h.
   */
  interval?: RetrievePartnerAnalyticsQueryParamInterval | undefined;
  /**
   * The start date and time when to retrieve analytics from. Takes precedence over `interval`.
   */
  start?: string | undefined;
  /**
   * The end date and time when to retrieve analytics from. If not provided, defaults to the current date. Takes precedence over `interval`.
   */
  end?: string | undefined;
  /**
   * The IANA time zone code for aligning timeseries granularity (e.g. America/New_York). Defaults to UTC.
   */
  timezone?: string | undefined;
  /**
   * The parameter to group the analytics data points by. Defaults to `count` if undefined.
   */
  groupBy?: RetrievePartnerAnalyticsQueryParamGroupBy | undefined;
  /**
   * The ID of the program to retrieve analytics for.
   */
  programId: string;
};

/**
 * Partner analytics data
 */
export type RetrievePartnerAnalyticsResponseBody =
  | components.PartnerAnalyticsCount
  | Array<components.PartnerAnalyticsTimeseries>
  | Array<components.PartnerAnalyticsTopLinks>;

/** @internal */
export const RetrievePartnerAnalyticsQueryParamInterval$inboundSchema:
  z.ZodNativeEnum<typeof RetrievePartnerAnalyticsQueryParamInterval> = z
    .nativeEnum(RetrievePartnerAnalyticsQueryParamInterval);

/** @internal */
export const RetrievePartnerAnalyticsQueryParamInterval$outboundSchema:
  z.ZodNativeEnum<typeof RetrievePartnerAnalyticsQueryParamInterval> =
    RetrievePartnerAnalyticsQueryParamInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrievePartnerAnalyticsQueryParamInterval$ {
  /** @deprecated use `RetrievePartnerAnalyticsQueryParamInterval$inboundSchema` instead. */
  export const inboundSchema =
    RetrievePartnerAnalyticsQueryParamInterval$inboundSchema;
  /** @deprecated use `RetrievePartnerAnalyticsQueryParamInterval$outboundSchema` instead. */
  export const outboundSchema =
    RetrievePartnerAnalyticsQueryParamInterval$outboundSchema;
}

/** @internal */
export const RetrievePartnerAnalyticsQueryParamGroupBy$inboundSchema:
  z.ZodNativeEnum<typeof RetrievePartnerAnalyticsQueryParamGroupBy> = z
    .nativeEnum(RetrievePartnerAnalyticsQueryParamGroupBy);

/** @internal */
export const RetrievePartnerAnalyticsQueryParamGroupBy$outboundSchema:
  z.ZodNativeEnum<typeof RetrievePartnerAnalyticsQueryParamGroupBy> =
    RetrievePartnerAnalyticsQueryParamGroupBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrievePartnerAnalyticsQueryParamGroupBy$ {
  /** @deprecated use `RetrievePartnerAnalyticsQueryParamGroupBy$inboundSchema` instead. */
  export const inboundSchema =
    RetrievePartnerAnalyticsQueryParamGroupBy$inboundSchema;
  /** @deprecated use `RetrievePartnerAnalyticsQueryParamGroupBy$outboundSchema` instead. */
  export const outboundSchema =
    RetrievePartnerAnalyticsQueryParamGroupBy$outboundSchema;
}

/** @internal */
export const RetrievePartnerAnalyticsRequest$inboundSchema: z.ZodType<
  RetrievePartnerAnalyticsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  partnerId: z.string().optional(),
  tenantId: z.string().optional(),
  interval: RetrievePartnerAnalyticsQueryParamInterval$inboundSchema.optional(),
  start: z.string().optional(),
  end: z.string().optional(),
  timezone: z.string().default("UTC"),
  groupBy: RetrievePartnerAnalyticsQueryParamGroupBy$inboundSchema.default(
    "count",
  ),
  programId: z.string(),
});

/** @internal */
export type RetrievePartnerAnalyticsRequest$Outbound = {
  partnerId?: string | undefined;
  tenantId?: string | undefined;
  interval?: string | undefined;
  start?: string | undefined;
  end?: string | undefined;
  timezone: string;
  groupBy: string;
  programId: string;
};

/** @internal */
export const RetrievePartnerAnalyticsRequest$outboundSchema: z.ZodType<
  RetrievePartnerAnalyticsRequest$Outbound,
  z.ZodTypeDef,
  RetrievePartnerAnalyticsRequest
> = z.object({
  partnerId: z.string().optional(),
  tenantId: z.string().optional(),
  interval: RetrievePartnerAnalyticsQueryParamInterval$outboundSchema
    .optional(),
  start: z.string().optional(),
  end: z.string().optional(),
  timezone: z.string().default("UTC"),
  groupBy: RetrievePartnerAnalyticsQueryParamGroupBy$outboundSchema.default(
    "count",
  ),
  programId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrievePartnerAnalyticsRequest$ {
  /** @deprecated use `RetrievePartnerAnalyticsRequest$inboundSchema` instead. */
  export const inboundSchema = RetrievePartnerAnalyticsRequest$inboundSchema;
  /** @deprecated use `RetrievePartnerAnalyticsRequest$outboundSchema` instead. */
  export const outboundSchema = RetrievePartnerAnalyticsRequest$outboundSchema;
  /** @deprecated use `RetrievePartnerAnalyticsRequest$Outbound` instead. */
  export type Outbound = RetrievePartnerAnalyticsRequest$Outbound;
}

export function retrievePartnerAnalyticsRequestToJSON(
  retrievePartnerAnalyticsRequest: RetrievePartnerAnalyticsRequest,
): string {
  return JSON.stringify(
    RetrievePartnerAnalyticsRequest$outboundSchema.parse(
      retrievePartnerAnalyticsRequest,
    ),
  );
}

export function retrievePartnerAnalyticsRequestFromJSON(
  jsonString: string,
): SafeParseResult<RetrievePartnerAnalyticsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrievePartnerAnalyticsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrievePartnerAnalyticsRequest' from JSON`,
  );
}

/** @internal */
export const RetrievePartnerAnalyticsResponseBody$inboundSchema: z.ZodType<
  RetrievePartnerAnalyticsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.PartnerAnalyticsCount$inboundSchema,
  z.array(components.PartnerAnalyticsTimeseries$inboundSchema),
  z.array(components.PartnerAnalyticsTopLinks$inboundSchema),
]);

/** @internal */
export type RetrievePartnerAnalyticsResponseBody$Outbound =
  | components.PartnerAnalyticsCount$Outbound
  | Array<components.PartnerAnalyticsTimeseries$Outbound>
  | Array<components.PartnerAnalyticsTopLinks$Outbound>;

/** @internal */
export const RetrievePartnerAnalyticsResponseBody$outboundSchema: z.ZodType<
  RetrievePartnerAnalyticsResponseBody$Outbound,
  z.ZodTypeDef,
  RetrievePartnerAnalyticsResponseBody
> = z.union([
  components.PartnerAnalyticsCount$outboundSchema,
  z.array(components.PartnerAnalyticsTimeseries$outboundSchema),
  z.array(components.PartnerAnalyticsTopLinks$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrievePartnerAnalyticsResponseBody$ {
  /** @deprecated use `RetrievePartnerAnalyticsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RetrievePartnerAnalyticsResponseBody$inboundSchema;
  /** @deprecated use `RetrievePartnerAnalyticsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RetrievePartnerAnalyticsResponseBody$outboundSchema;
  /** @deprecated use `RetrievePartnerAnalyticsResponseBody$Outbound` instead. */
  export type Outbound = RetrievePartnerAnalyticsResponseBody$Outbound;
}

export function retrievePartnerAnalyticsResponseBodyToJSON(
  retrievePartnerAnalyticsResponseBody: RetrievePartnerAnalyticsResponseBody,
): string {
  return JSON.stringify(
    RetrievePartnerAnalyticsResponseBody$outboundSchema.parse(
      retrievePartnerAnalyticsResponseBody,
    ),
  );
}

export function retrievePartnerAnalyticsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RetrievePartnerAnalyticsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RetrievePartnerAnalyticsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrievePartnerAnalyticsResponseBody' from JSON`,
  );
}
