/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateCustomerRequestBody = {
  /**
   * Email of the customer in the client's app.
   */
  email?: string | null | undefined;
  /**
   * Name of the customer in the client's app. If not provided, a random name will be generated.
   */
  name?: string | null | undefined;
  /**
   * Avatar URL of the customer in the client's app.
   */
  avatar?: string | null | undefined;
  /**
   * Unique identifier for the customer in the client's app.
   */
  externalId: string;
};

/**
 * The customer was created.
 */
export type CreateCustomerResponseBody = {
  /**
   * The unique identifier of the customer in Dub.
   */
  id: string;
  /**
   * Unique identifier for the customer in the client's app.
   */
  externalId: string;
  /**
   * Name of the customer.
   */
  name: string;
  /**
   * Email of the customer.
   */
  email?: string | null | undefined;
  /**
   * Avatar URL of the customer.
   */
  avatar?: string | null | undefined;
  /**
   * The date the customer was created.
   */
  createdAt: string;
};

/** @internal */
export const CreateCustomerRequestBody$inboundSchema: z.ZodType<
  CreateCustomerRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  externalId: z.string(),
});

/** @internal */
export type CreateCustomerRequestBody$Outbound = {
  email?: string | null | undefined;
  name?: string | null | undefined;
  avatar?: string | null | undefined;
  externalId: string;
};

/** @internal */
export const CreateCustomerRequestBody$outboundSchema: z.ZodType<
  CreateCustomerRequestBody$Outbound,
  z.ZodTypeDef,
  CreateCustomerRequestBody
> = z.object({
  email: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  externalId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerRequestBody$ {
  /** @deprecated use `CreateCustomerRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerRequestBody$inboundSchema;
  /** @deprecated use `CreateCustomerRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerRequestBody$outboundSchema;
  /** @deprecated use `CreateCustomerRequestBody$Outbound` instead. */
  export type Outbound = CreateCustomerRequestBody$Outbound;
}

export function createCustomerRequestBodyToJSON(
  createCustomerRequestBody: CreateCustomerRequestBody,
): string {
  return JSON.stringify(
    CreateCustomerRequestBody$outboundSchema.parse(createCustomerRequestBody),
  );
}

export function createCustomerRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateCustomerResponseBody$inboundSchema: z.ZodType<
  CreateCustomerResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  externalId: z.string(),
  name: z.string(),
  email: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  createdAt: z.string(),
});

/** @internal */
export type CreateCustomerResponseBody$Outbound = {
  id: string;
  externalId: string;
  name: string;
  email?: string | null | undefined;
  avatar?: string | null | undefined;
  createdAt: string;
};

/** @internal */
export const CreateCustomerResponseBody$outboundSchema: z.ZodType<
  CreateCustomerResponseBody$Outbound,
  z.ZodTypeDef,
  CreateCustomerResponseBody
> = z.object({
  id: z.string(),
  externalId: z.string(),
  name: z.string(),
  email: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  createdAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerResponseBody$ {
  /** @deprecated use `CreateCustomerResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerResponseBody$inboundSchema;
  /** @deprecated use `CreateCustomerResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerResponseBody$outboundSchema;
  /** @deprecated use `CreateCustomerResponseBody$Outbound` instead. */
  export type Outbound = CreateCustomerResponseBody$Outbound;
}

export function createCustomerResponseBodyToJSON(
  createCustomerResponseBody: CreateCustomerResponseBody,
): string {
  return JSON.stringify(
    CreateCustomerResponseBody$outboundSchema.parse(createCustomerResponseBody),
  );
}

export function createCustomerResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerResponseBody' from JSON`,
  );
}
