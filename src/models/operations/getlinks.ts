/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as components from "../components/index.js";

/**
 * The tag IDs to filter the links by.
 */
export type QueryParamTagIds = string | Array<string>;

/**
 * The unique name of the tags assigned to the short link (case insensitive).
 */
export type QueryParamTagNames = string | Array<string>;

/**
 * The field to sort the links by. The default is `createdAt`, and sort order is always descending.
 */
export const Sort = {
  CreatedAt: "createdAt",
  Clicks: "clicks",
  LastClicked: "lastClicked",
} as const;
/**
 * The field to sort the links by. The default is `createdAt`, and sort order is always descending.
 */
export type Sort = ClosedEnum<typeof Sort>;

export type GetLinksRequest = {
  /**
   * The domain to filter the links by. E.g. `ac.me`. If not provided, all links for the workspace will be returned.
   */
  domain?: string | undefined;
  /**
   * The tag ID to filter the links by. This field is deprecated â€“ use `tagIds` instead.
   */
  tagId?: string | undefined;
  /**
   * The tag IDs to filter the links by.
   */
  tagIds?: string | Array<string> | undefined;
  /**
   * The unique name of the tags assigned to the short link (case insensitive).
   */
  tagNames?: string | Array<string> | undefined;
  /**
   * The search term to filter the links by. The search term will be matched against the short link slug and the destination url.
   */
  search?: string | undefined;
  /**
   * The user ID to filter the links by.
   */
  userId?: string | undefined;
  /**
   * Whether to include archived links in the response. Defaults to `false` if not provided.
   */
  showArchived?: boolean | undefined;
  /**
   * Whether to include tags in the response. Defaults to `false` if not provided.
   */
  withTags?: boolean | undefined;
  /**
   * The field to sort the links by. The default is `createdAt`, and sort order is always descending.
   */
  sort?: Sort | undefined;
  /**
   * The page number for pagination.
   */
  page?: number | undefined;
  /**
   * The number of items per page.
   */
  pageSize?: number | undefined;
};

export type GetLinksResponse = {
  result: Array<components.LinkSchema>;
};

/** @internal */
export const QueryParamTagIds$inboundSchema: z.ZodType<
  QueryParamTagIds,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type QueryParamTagIds$Outbound = string | Array<string>;

/** @internal */
export const QueryParamTagIds$outboundSchema: z.ZodType<
  QueryParamTagIds$Outbound,
  z.ZodTypeDef,
  QueryParamTagIds
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamTagIds$ {
  /** @deprecated use `QueryParamTagIds$inboundSchema` instead. */
  export const inboundSchema = QueryParamTagIds$inboundSchema;
  /** @deprecated use `QueryParamTagIds$outboundSchema` instead. */
  export const outboundSchema = QueryParamTagIds$outboundSchema;
  /** @deprecated use `QueryParamTagIds$Outbound` instead. */
  export type Outbound = QueryParamTagIds$Outbound;
}

/** @internal */
export const QueryParamTagNames$inboundSchema: z.ZodType<
  QueryParamTagNames,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type QueryParamTagNames$Outbound = string | Array<string>;

/** @internal */
export const QueryParamTagNames$outboundSchema: z.ZodType<
  QueryParamTagNames$Outbound,
  z.ZodTypeDef,
  QueryParamTagNames
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamTagNames$ {
  /** @deprecated use `QueryParamTagNames$inboundSchema` instead. */
  export const inboundSchema = QueryParamTagNames$inboundSchema;
  /** @deprecated use `QueryParamTagNames$outboundSchema` instead. */
  export const outboundSchema = QueryParamTagNames$outboundSchema;
  /** @deprecated use `QueryParamTagNames$Outbound` instead. */
  export type Outbound = QueryParamTagNames$Outbound;
}

/** @internal */
export const Sort$inboundSchema: z.ZodNativeEnum<typeof Sort> = z.nativeEnum(
  Sort,
);

/** @internal */
export const Sort$outboundSchema: z.ZodNativeEnum<typeof Sort> =
  Sort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sort$ {
  /** @deprecated use `Sort$inboundSchema` instead. */
  export const inboundSchema = Sort$inboundSchema;
  /** @deprecated use `Sort$outboundSchema` instead. */
  export const outboundSchema = Sort$outboundSchema;
}

/** @internal */
export const GetLinksRequest$inboundSchema: z.ZodType<
  GetLinksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string().optional(),
  tagId: z.string().optional(),
  tagIds: z.union([z.string(), z.array(z.string())]).optional(),
  tagNames: z.union([z.string(), z.array(z.string())]).optional(),
  search: z.string().optional(),
  userId: z.string().optional(),
  showArchived: z.boolean().default(false),
  withTags: z.boolean().default(false),
  sort: Sort$inboundSchema.default("createdAt"),
  page: z.number().default(1),
  pageSize: z.number().default(100),
});

/** @internal */
export type GetLinksRequest$Outbound = {
  domain?: string | undefined;
  tagId?: string | undefined;
  tagIds?: string | Array<string> | undefined;
  tagNames?: string | Array<string> | undefined;
  search?: string | undefined;
  userId?: string | undefined;
  showArchived: boolean;
  withTags: boolean;
  sort: string;
  page: number;
  pageSize: number;
};

/** @internal */
export const GetLinksRequest$outboundSchema: z.ZodType<
  GetLinksRequest$Outbound,
  z.ZodTypeDef,
  GetLinksRequest
> = z.object({
  domain: z.string().optional(),
  tagId: z.string().optional(),
  tagIds: z.union([z.string(), z.array(z.string())]).optional(),
  tagNames: z.union([z.string(), z.array(z.string())]).optional(),
  search: z.string().optional(),
  userId: z.string().optional(),
  showArchived: z.boolean().default(false),
  withTags: z.boolean().default(false),
  sort: Sort$outboundSchema.default("createdAt"),
  page: z.number().default(1),
  pageSize: z.number().default(100),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLinksRequest$ {
  /** @deprecated use `GetLinksRequest$inboundSchema` instead. */
  export const inboundSchema = GetLinksRequest$inboundSchema;
  /** @deprecated use `GetLinksRequest$outboundSchema` instead. */
  export const outboundSchema = GetLinksRequest$outboundSchema;
  /** @deprecated use `GetLinksRequest$Outbound` instead. */
  export type Outbound = GetLinksRequest$Outbound;
}

/** @internal */
export const GetLinksResponse$inboundSchema: z.ZodType<
  GetLinksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.array(components.LinkSchema$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type GetLinksResponse$Outbound = {
  Result: Array<components.LinkSchema$Outbound>;
};

/** @internal */
export const GetLinksResponse$outboundSchema: z.ZodType<
  GetLinksResponse$Outbound,
  z.ZodTypeDef,
  GetLinksResponse
> = z.object({
  result: z.array(components.LinkSchema$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLinksResponse$ {
  /** @deprecated use `GetLinksResponse$inboundSchema` instead. */
  export const inboundSchema = GetLinksResponse$inboundSchema;
  /** @deprecated use `GetLinksResponse$outboundSchema` instead. */
  export const outboundSchema = GetLinksResponse$outboundSchema;
  /** @deprecated use `GetLinksResponse$Outbound` instead. */
  export type Outbound = GetLinksResponse$Outbound;
}
