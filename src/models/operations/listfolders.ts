/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListFoldersRequest = {
  /**
   * The search term to filter the folders by.
   */
  search?: string | undefined;
};

/** @internal */
export const ListFoldersRequest$inboundSchema: z.ZodType<
  ListFoldersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  search: z.string().optional(),
});

/** @internal */
export type ListFoldersRequest$Outbound = {
  search?: string | undefined;
};

/** @internal */
export const ListFoldersRequest$outboundSchema: z.ZodType<
  ListFoldersRequest$Outbound,
  z.ZodTypeDef,
  ListFoldersRequest
> = z.object({
  search: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFoldersRequest$ {
  /** @deprecated use `ListFoldersRequest$inboundSchema` instead. */
  export const inboundSchema = ListFoldersRequest$inboundSchema;
  /** @deprecated use `ListFoldersRequest$outboundSchema` instead. */
  export const outboundSchema = ListFoldersRequest$outboundSchema;
  /** @deprecated use `ListFoldersRequest$Outbound` instead. */
  export type Outbound = ListFoldersRequest$Outbound;
}

export function listFoldersRequestToJSON(
  listFoldersRequest: ListFoldersRequest,
): string {
  return JSON.stringify(
    ListFoldersRequest$outboundSchema.parse(listFoldersRequest),
  );
}

export function listFoldersRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListFoldersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListFoldersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListFoldersRequest' from JSON`,
  );
}
