/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The access level of the folder within the workspace.
 */
export const UpdateFolderAccessLevel = {
  Write: "write",
  Read: "read",
} as const;
/**
 * The access level of the folder within the workspace.
 */
export type UpdateFolderAccessLevel = ClosedEnum<
  typeof UpdateFolderAccessLevel
>;

export type UpdateFolderRequestBody = {
  /**
   * The name of the folder.
   */
  name?: string | undefined;
  /**
   * The access level of the folder within the workspace.
   */
  accessLevel?: UpdateFolderAccessLevel | null | undefined;
};

export type UpdateFolderRequest = {
  /**
   * The ID of the folder to update.
   */
  id: string;
  requestBody?: UpdateFolderRequestBody | undefined;
};

/** @internal */
export const UpdateFolderAccessLevel$inboundSchema: z.ZodNativeEnum<
  typeof UpdateFolderAccessLevel
> = z.nativeEnum(UpdateFolderAccessLevel);

/** @internal */
export const UpdateFolderAccessLevel$outboundSchema: z.ZodNativeEnum<
  typeof UpdateFolderAccessLevel
> = UpdateFolderAccessLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFolderAccessLevel$ {
  /** @deprecated use `UpdateFolderAccessLevel$inboundSchema` instead. */
  export const inboundSchema = UpdateFolderAccessLevel$inboundSchema;
  /** @deprecated use `UpdateFolderAccessLevel$outboundSchema` instead. */
  export const outboundSchema = UpdateFolderAccessLevel$outboundSchema;
}

/** @internal */
export const UpdateFolderRequestBody$inboundSchema: z.ZodType<
  UpdateFolderRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  accessLevel: z.nullable(UpdateFolderAccessLevel$inboundSchema).default(null),
});

/** @internal */
export type UpdateFolderRequestBody$Outbound = {
  name?: string | undefined;
  accessLevel: string | null;
};

/** @internal */
export const UpdateFolderRequestBody$outboundSchema: z.ZodType<
  UpdateFolderRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateFolderRequestBody
> = z.object({
  name: z.string().optional(),
  accessLevel: z.nullable(UpdateFolderAccessLevel$outboundSchema).default(null),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFolderRequestBody$ {
  /** @deprecated use `UpdateFolderRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateFolderRequestBody$inboundSchema;
  /** @deprecated use `UpdateFolderRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateFolderRequestBody$outboundSchema;
  /** @deprecated use `UpdateFolderRequestBody$Outbound` instead. */
  export type Outbound = UpdateFolderRequestBody$Outbound;
}

export function updateFolderRequestBodyToJSON(
  updateFolderRequestBody: UpdateFolderRequestBody,
): string {
  return JSON.stringify(
    UpdateFolderRequestBody$outboundSchema.parse(updateFolderRequestBody),
  );
}

export function updateFolderRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFolderRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFolderRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFolderRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateFolderRequest$inboundSchema: z.ZodType<
  UpdateFolderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdateFolderRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateFolderRequest$Outbound = {
  id: string;
  RequestBody?: UpdateFolderRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateFolderRequest$outboundSchema: z.ZodType<
  UpdateFolderRequest$Outbound,
  z.ZodTypeDef,
  UpdateFolderRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdateFolderRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFolderRequest$ {
  /** @deprecated use `UpdateFolderRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateFolderRequest$inboundSchema;
  /** @deprecated use `UpdateFolderRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateFolderRequest$outboundSchema;
  /** @deprecated use `UpdateFolderRequest$Outbound` instead. */
  export type Outbound = UpdateFolderRequest$Outbound;
}

export function updateFolderRequestToJSON(
  updateFolderRequest: UpdateFolderRequest,
): string {
  return JSON.stringify(
    UpdateFolderRequest$outboundSchema.parse(updateFolderRequest),
  );
}

export function updateFolderRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFolderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFolderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFolderRequest' from JSON`,
  );
}
