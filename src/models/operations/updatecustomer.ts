/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type UpdateCustomerRequestBody = {
  /**
   * Email of the customer in the client's app.
   */
  email?: string | null | undefined;
  /**
   * Name of the customer in the client's app. If not provided, a random name will be generated.
   */
  name?: string | null | undefined;
  /**
   * Avatar URL of the customer in the client's app.
   */
  avatar?: string | null | undefined;
  /**
   * Unique identifier for the customer in the client's app.
   */
  externalId?: string | undefined;
};

export type UpdateCustomerRequest = {
  /**
   * The unique identifier of the customer in Dub.
   */
  id: string;
  requestBody?: UpdateCustomerRequestBody | undefined;
};

/**
 * The customer was updated.
 */
export type UpdateCustomerResponseBody = {
  /**
   * The unique identifier of the customer in Dub.
   */
  id: string;
  /**
   * Unique identifier for the customer in the client's app.
   */
  externalId: string;
  /**
   * Name of the customer.
   */
  name: string;
  /**
   * Email of the customer.
   */
  email?: string | null | undefined;
  /**
   * Avatar URL of the customer.
   */
  avatar?: string | null | undefined;
  /**
   * The date the customer was created.
   */
  createdAt: string;
};

/** @internal */
export const UpdateCustomerRequestBody$inboundSchema: z.ZodType<
  UpdateCustomerRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  externalId: z.string().optional(),
});

/** @internal */
export type UpdateCustomerRequestBody$Outbound = {
  email?: string | null | undefined;
  name?: string | null | undefined;
  avatar?: string | null | undefined;
  externalId?: string | undefined;
};

/** @internal */
export const UpdateCustomerRequestBody$outboundSchema: z.ZodType<
  UpdateCustomerRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateCustomerRequestBody
> = z.object({
  email: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  externalId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerRequestBody$ {
  /** @deprecated use `UpdateCustomerRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerRequestBody$inboundSchema;
  /** @deprecated use `UpdateCustomerRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerRequestBody$outboundSchema;
  /** @deprecated use `UpdateCustomerRequestBody$Outbound` instead. */
  export type Outbound = UpdateCustomerRequestBody$Outbound;
}

/** @internal */
export const UpdateCustomerRequest$inboundSchema: z.ZodType<
  UpdateCustomerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdateCustomerRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateCustomerRequest$Outbound = {
  id: string;
  RequestBody?: UpdateCustomerRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateCustomerRequest$outboundSchema: z.ZodType<
  UpdateCustomerRequest$Outbound,
  z.ZodTypeDef,
  UpdateCustomerRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdateCustomerRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerRequest$ {
  /** @deprecated use `UpdateCustomerRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerRequest$inboundSchema;
  /** @deprecated use `UpdateCustomerRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerRequest$outboundSchema;
  /** @deprecated use `UpdateCustomerRequest$Outbound` instead. */
  export type Outbound = UpdateCustomerRequest$Outbound;
}

/** @internal */
export const UpdateCustomerResponseBody$inboundSchema: z.ZodType<
  UpdateCustomerResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  externalId: z.string(),
  name: z.string(),
  email: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  createdAt: z.string(),
});

/** @internal */
export type UpdateCustomerResponseBody$Outbound = {
  id: string;
  externalId: string;
  name: string;
  email?: string | null | undefined;
  avatar?: string | null | undefined;
  createdAt: string;
};

/** @internal */
export const UpdateCustomerResponseBody$outboundSchema: z.ZodType<
  UpdateCustomerResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateCustomerResponseBody
> = z.object({
  id: z.string(),
  externalId: z.string(),
  name: z.string(),
  email: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  createdAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerResponseBody$ {
  /** @deprecated use `UpdateCustomerResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerResponseBody$inboundSchema;
  /** @deprecated use `UpdateCustomerResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerResponseBody$outboundSchema;
  /** @deprecated use `UpdateCustomerResponseBody$Outbound` instead. */
  export type Outbound = UpdateCustomerResponseBody$Outbound;
}
