/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCustomerRequest = {
  /**
   * The unique identifier of the customer in Dub.
   */
  id: string;
};

/**
 * The customer object.
 */
export type GetCustomerResponseBody = {
  /**
   * The unique identifier of the customer in Dub.
   */
  id: string;
  /**
   * Unique identifier for the customer in the client's app.
   */
  externalId: string;
  /**
   * Name of the customer.
   */
  name: string;
  /**
   * Email of the customer.
   */
  email?: string | null | undefined;
  /**
   * Avatar URL of the customer.
   */
  avatar?: string | null | undefined;
  /**
   * The date the customer was created.
   */
  createdAt: string;
};

/** @internal */
export const GetCustomerRequest$inboundSchema: z.ZodType<
  GetCustomerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetCustomerRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetCustomerRequest$outboundSchema: z.ZodType<
  GetCustomerRequest$Outbound,
  z.ZodTypeDef,
  GetCustomerRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomerRequest$ {
  /** @deprecated use `GetCustomerRequest$inboundSchema` instead. */
  export const inboundSchema = GetCustomerRequest$inboundSchema;
  /** @deprecated use `GetCustomerRequest$outboundSchema` instead. */
  export const outboundSchema = GetCustomerRequest$outboundSchema;
  /** @deprecated use `GetCustomerRequest$Outbound` instead. */
  export type Outbound = GetCustomerRequest$Outbound;
}

export function getCustomerRequestToJSON(
  getCustomerRequest: GetCustomerRequest,
): string {
  return JSON.stringify(
    GetCustomerRequest$outboundSchema.parse(getCustomerRequest),
  );
}

export function getCustomerRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomerRequest' from JSON`,
  );
}

/** @internal */
export const GetCustomerResponseBody$inboundSchema: z.ZodType<
  GetCustomerResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  externalId: z.string(),
  name: z.string(),
  email: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  createdAt: z.string(),
});

/** @internal */
export type GetCustomerResponseBody$Outbound = {
  id: string;
  externalId: string;
  name: string;
  email?: string | null | undefined;
  avatar?: string | null | undefined;
  createdAt: string;
};

/** @internal */
export const GetCustomerResponseBody$outboundSchema: z.ZodType<
  GetCustomerResponseBody$Outbound,
  z.ZodTypeDef,
  GetCustomerResponseBody
> = z.object({
  id: z.string(),
  externalId: z.string(),
  name: z.string(),
  email: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  createdAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomerResponseBody$ {
  /** @deprecated use `GetCustomerResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetCustomerResponseBody$inboundSchema;
  /** @deprecated use `GetCustomerResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetCustomerResponseBody$outboundSchema;
  /** @deprecated use `GetCustomerResponseBody$Outbound` instead. */
  export type Outbound = GetCustomerResponseBody$Outbound;
}

export function getCustomerResponseBodyToJSON(
  getCustomerResponseBody: GetCustomerResponseBody,
): string {
  return JSON.stringify(
    GetCustomerResponseBody$outboundSchema.parse(getCustomerResponseBody),
  );
}

export function getCustomerResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomerResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomerResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomerResponseBody' from JSON`,
  );
}
