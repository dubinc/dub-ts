/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The unique IDs of the tags assigned to the short link.
 */
export type CreatePartnerLinkTagIds = string | Array<string>;

/**
 * The unique name of the tags assigned to the short link (case insensitive).
 */
export type CreatePartnerLinkTagNames = string | Array<string>;

/**
 * Additional properties that you can pass to the partner's short link. Will be used to override the default link properties for this partner.
 */
export type CreatePartnerLinkLinkProps = {
  /**
   * The ID of the link in your database. If set, it can be used to identify the link in future API requests (must be prefixed with 'ext_' when passed as a query parameter). This key is unique across your workspace.
   */
  externalId?: string | null | undefined;
  /**
   * The ID of the tenant that created the link inside your system. If set, it can be used to fetch all links for a tenant.
   */
  tenantId?: string | null | undefined;
  /**
   * The ID of the partner the short link is associated with.
   */
  partnerId?: string | null | undefined;
  /**
   * The prefix of the short link slug for randomly-generated keys (e.g. if prefix is `/c/`, generated keys will be in the `/c/:key` format). Will be ignored if `key` is provided.
   */
  prefix?: string | undefined;
  /**
   * Whether the short link is archived. Defaults to `false` if not provided.
   */
  archived?: boolean | undefined;
  /**
   * The unique IDs of the tags assigned to the short link.
   */
  tagIds?: string | Array<string> | undefined;
  /**
   * The unique name of the tags assigned to the short link (case insensitive).
   */
  tagNames?: string | Array<string> | undefined;
  /**
   * The unique ID existing folder to assign the short link to.
   */
  folderId?: string | null | undefined;
  /**
   * The comments for the short link.
   */
  comments?: string | null | undefined;
  /**
   * The date and time when the short link will expire at.
   */
  expiresAt?: string | null | undefined;
  /**
   * The URL to redirect to when the short link has expired.
   */
  expiredUrl?: string | null | undefined;
  /**
   * The password required to access the destination URL of the short link.
   */
  password?: string | null | undefined;
  /**
   * Whether the short link uses Custom Social Media Cards feature. Defaults to `false` if not provided.
   */
  proxy?: boolean | undefined;
  /**
   * The custom link preview title (og:title). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
   */
  title?: string | null | undefined;
  /**
   * The custom link preview description (og:description). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
   */
  description?: string | null | undefined;
  /**
   * The custom link preview image (og:image). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
   */
  image?: string | null | undefined;
  /**
   * The custom link preview video (og:video). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
   */
  video?: string | null | undefined;
  /**
   * Whether the short link uses link cloaking. Defaults to `false` if not provided.
   */
  rewrite?: boolean | undefined;
  /**
   * The iOS destination URL for the short link for iOS device targeting.
   */
  ios?: string | null | undefined;
  /**
   * The Android destination URL for the short link for Android device targeting.
   */
  android?: string | null | undefined;
  /**
   * Allow search engines to index your short link. Defaults to `false` if not provided. Learn more: https://d.to/noindex
   */
  doIndex?: boolean | undefined;
  /**
   * The UTM source of the short link. If set, this will populate or override the UTM source in the destination URL.
   */
  utmSource?: string | null | undefined;
  /**
   * The UTM medium of the short link. If set, this will populate or override the UTM medium in the destination URL.
   */
  utmMedium?: string | null | undefined;
  /**
   * The UTM campaign of the short link. If set, this will populate or override the UTM campaign in the destination URL.
   */
  utmCampaign?: string | null | undefined;
  /**
   * The UTM term of the short link. If set, this will populate or override the UTM term in the destination URL.
   */
  utmTerm?: string | null | undefined;
  /**
   * The UTM content of the short link. If set, this will populate or override the UTM content in the destination URL.
   */
  utmContent?: string | null | undefined;
  /**
   * The referral tag of the short link. If set, this will populate or override the `ref` query parameter in the destination URL.
   */
  ref?: string | null | undefined;
};

export type CreatePartnerLinkRequestBody = {
  /**
   * The ID of the program that the partner is enrolled in.
   */
  programId: string;
  /**
   * The ID of the partner to create a link for. Will take precedence over `tenantId` if provided.
   */
  partnerId?: string | null | undefined;
  /**
   * The ID of the partner in your system. If both `partnerId` and `tenantId` are not provided, an error will be thrown.
   */
  tenantId?: string | null | undefined;
  /**
   * The URL to shorten (if not provided, the program's default URL will be used). Will throw an error if the domain doesn't match the program's default URL domain.
   */
  url?: string | null | undefined;
  /**
   * The short link slug. If not provided, a random 7-character slug will be generated.
   */
  key?: string | undefined;
  /**
   * Additional properties that you can pass to the partner's short link. Will be used to override the default link properties for this partner.
   */
  linkProps?: CreatePartnerLinkLinkProps | undefined;
};

/** @internal */
export const CreatePartnerLinkTagIds$inboundSchema: z.ZodType<
  CreatePartnerLinkTagIds,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type CreatePartnerLinkTagIds$Outbound = string | Array<string>;

/** @internal */
export const CreatePartnerLinkTagIds$outboundSchema: z.ZodType<
  CreatePartnerLinkTagIds$Outbound,
  z.ZodTypeDef,
  CreatePartnerLinkTagIds
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePartnerLinkTagIds$ {
  /** @deprecated use `CreatePartnerLinkTagIds$inboundSchema` instead. */
  export const inboundSchema = CreatePartnerLinkTagIds$inboundSchema;
  /** @deprecated use `CreatePartnerLinkTagIds$outboundSchema` instead. */
  export const outboundSchema = CreatePartnerLinkTagIds$outboundSchema;
  /** @deprecated use `CreatePartnerLinkTagIds$Outbound` instead. */
  export type Outbound = CreatePartnerLinkTagIds$Outbound;
}

export function createPartnerLinkTagIdsToJSON(
  createPartnerLinkTagIds: CreatePartnerLinkTagIds,
): string {
  return JSON.stringify(
    CreatePartnerLinkTagIds$outboundSchema.parse(createPartnerLinkTagIds),
  );
}

export function createPartnerLinkTagIdsFromJSON(
  jsonString: string,
): SafeParseResult<CreatePartnerLinkTagIds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePartnerLinkTagIds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePartnerLinkTagIds' from JSON`,
  );
}

/** @internal */
export const CreatePartnerLinkTagNames$inboundSchema: z.ZodType<
  CreatePartnerLinkTagNames,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type CreatePartnerLinkTagNames$Outbound = string | Array<string>;

/** @internal */
export const CreatePartnerLinkTagNames$outboundSchema: z.ZodType<
  CreatePartnerLinkTagNames$Outbound,
  z.ZodTypeDef,
  CreatePartnerLinkTagNames
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePartnerLinkTagNames$ {
  /** @deprecated use `CreatePartnerLinkTagNames$inboundSchema` instead. */
  export const inboundSchema = CreatePartnerLinkTagNames$inboundSchema;
  /** @deprecated use `CreatePartnerLinkTagNames$outboundSchema` instead. */
  export const outboundSchema = CreatePartnerLinkTagNames$outboundSchema;
  /** @deprecated use `CreatePartnerLinkTagNames$Outbound` instead. */
  export type Outbound = CreatePartnerLinkTagNames$Outbound;
}

export function createPartnerLinkTagNamesToJSON(
  createPartnerLinkTagNames: CreatePartnerLinkTagNames,
): string {
  return JSON.stringify(
    CreatePartnerLinkTagNames$outboundSchema.parse(createPartnerLinkTagNames),
  );
}

export function createPartnerLinkTagNamesFromJSON(
  jsonString: string,
): SafeParseResult<CreatePartnerLinkTagNames, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePartnerLinkTagNames$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePartnerLinkTagNames' from JSON`,
  );
}

/** @internal */
export const CreatePartnerLinkLinkProps$inboundSchema: z.ZodType<
  CreatePartnerLinkLinkProps,
  z.ZodTypeDef,
  unknown
> = z.object({
  externalId: z.nullable(z.string()).optional(),
  tenantId: z.nullable(z.string()).optional(),
  partnerId: z.nullable(z.string()).optional(),
  prefix: z.string().optional(),
  archived: z.boolean().optional(),
  tagIds: z.union([z.string(), z.array(z.string())]).optional(),
  tagNames: z.union([z.string(), z.array(z.string())]).optional(),
  folderId: z.nullable(z.string()).optional(),
  comments: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  expiredUrl: z.nullable(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  proxy: z.boolean().optional(),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  video: z.nullable(z.string()).optional(),
  rewrite: z.boolean().optional(),
  ios: z.nullable(z.string()).optional(),
  android: z.nullable(z.string()).optional(),
  doIndex: z.boolean().optional(),
  utm_source: z.nullable(z.string()).optional(),
  utm_medium: z.nullable(z.string()).optional(),
  utm_campaign: z.nullable(z.string()).optional(),
  utm_term: z.nullable(z.string()).optional(),
  utm_content: z.nullable(z.string()).optional(),
  ref: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "utm_source": "utmSource",
    "utm_medium": "utmMedium",
    "utm_campaign": "utmCampaign",
    "utm_term": "utmTerm",
    "utm_content": "utmContent",
  });
});

/** @internal */
export type CreatePartnerLinkLinkProps$Outbound = {
  externalId?: string | null | undefined;
  tenantId?: string | null | undefined;
  partnerId?: string | null | undefined;
  prefix?: string | undefined;
  archived?: boolean | undefined;
  tagIds?: string | Array<string> | undefined;
  tagNames?: string | Array<string> | undefined;
  folderId?: string | null | undefined;
  comments?: string | null | undefined;
  expiresAt?: string | null | undefined;
  expiredUrl?: string | null | undefined;
  password?: string | null | undefined;
  proxy?: boolean | undefined;
  title?: string | null | undefined;
  description?: string | null | undefined;
  image?: string | null | undefined;
  video?: string | null | undefined;
  rewrite?: boolean | undefined;
  ios?: string | null | undefined;
  android?: string | null | undefined;
  doIndex?: boolean | undefined;
  utm_source?: string | null | undefined;
  utm_medium?: string | null | undefined;
  utm_campaign?: string | null | undefined;
  utm_term?: string | null | undefined;
  utm_content?: string | null | undefined;
  ref?: string | null | undefined;
};

/** @internal */
export const CreatePartnerLinkLinkProps$outboundSchema: z.ZodType<
  CreatePartnerLinkLinkProps$Outbound,
  z.ZodTypeDef,
  CreatePartnerLinkLinkProps
> = z.object({
  externalId: z.nullable(z.string()).optional(),
  tenantId: z.nullable(z.string()).optional(),
  partnerId: z.nullable(z.string()).optional(),
  prefix: z.string().optional(),
  archived: z.boolean().optional(),
  tagIds: z.union([z.string(), z.array(z.string())]).optional(),
  tagNames: z.union([z.string(), z.array(z.string())]).optional(),
  folderId: z.nullable(z.string()).optional(),
  comments: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  expiredUrl: z.nullable(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  proxy: z.boolean().optional(),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  video: z.nullable(z.string()).optional(),
  rewrite: z.boolean().optional(),
  ios: z.nullable(z.string()).optional(),
  android: z.nullable(z.string()).optional(),
  doIndex: z.boolean().optional(),
  utmSource: z.nullable(z.string()).optional(),
  utmMedium: z.nullable(z.string()).optional(),
  utmCampaign: z.nullable(z.string()).optional(),
  utmTerm: z.nullable(z.string()).optional(),
  utmContent: z.nullable(z.string()).optional(),
  ref: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    utmSource: "utm_source",
    utmMedium: "utm_medium",
    utmCampaign: "utm_campaign",
    utmTerm: "utm_term",
    utmContent: "utm_content",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePartnerLinkLinkProps$ {
  /** @deprecated use `CreatePartnerLinkLinkProps$inboundSchema` instead. */
  export const inboundSchema = CreatePartnerLinkLinkProps$inboundSchema;
  /** @deprecated use `CreatePartnerLinkLinkProps$outboundSchema` instead. */
  export const outboundSchema = CreatePartnerLinkLinkProps$outboundSchema;
  /** @deprecated use `CreatePartnerLinkLinkProps$Outbound` instead. */
  export type Outbound = CreatePartnerLinkLinkProps$Outbound;
}

export function createPartnerLinkLinkPropsToJSON(
  createPartnerLinkLinkProps: CreatePartnerLinkLinkProps,
): string {
  return JSON.stringify(
    CreatePartnerLinkLinkProps$outboundSchema.parse(createPartnerLinkLinkProps),
  );
}

export function createPartnerLinkLinkPropsFromJSON(
  jsonString: string,
): SafeParseResult<CreatePartnerLinkLinkProps, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePartnerLinkLinkProps$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePartnerLinkLinkProps' from JSON`,
  );
}

/** @internal */
export const CreatePartnerLinkRequestBody$inboundSchema: z.ZodType<
  CreatePartnerLinkRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  programId: z.string(),
  partnerId: z.nullable(z.string()).optional(),
  tenantId: z.nullable(z.string()).optional(),
  url: z.nullable(z.string()).optional(),
  key: z.string().optional(),
  linkProps: z.lazy(() => CreatePartnerLinkLinkProps$inboundSchema).optional(),
});

/** @internal */
export type CreatePartnerLinkRequestBody$Outbound = {
  programId: string;
  partnerId?: string | null | undefined;
  tenantId?: string | null | undefined;
  url?: string | null | undefined;
  key?: string | undefined;
  linkProps?: CreatePartnerLinkLinkProps$Outbound | undefined;
};

/** @internal */
export const CreatePartnerLinkRequestBody$outboundSchema: z.ZodType<
  CreatePartnerLinkRequestBody$Outbound,
  z.ZodTypeDef,
  CreatePartnerLinkRequestBody
> = z.object({
  programId: z.string(),
  partnerId: z.nullable(z.string()).optional(),
  tenantId: z.nullable(z.string()).optional(),
  url: z.nullable(z.string()).optional(),
  key: z.string().optional(),
  linkProps: z.lazy(() => CreatePartnerLinkLinkProps$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePartnerLinkRequestBody$ {
  /** @deprecated use `CreatePartnerLinkRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreatePartnerLinkRequestBody$inboundSchema;
  /** @deprecated use `CreatePartnerLinkRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreatePartnerLinkRequestBody$outboundSchema;
  /** @deprecated use `CreatePartnerLinkRequestBody$Outbound` instead. */
  export type Outbound = CreatePartnerLinkRequestBody$Outbound;
}

export function createPartnerLinkRequestBodyToJSON(
  createPartnerLinkRequestBody: CreatePartnerLinkRequestBody,
): string {
  return JSON.stringify(
    CreatePartnerLinkRequestBody$outboundSchema.parse(
      createPartnerLinkRequestBody,
    ),
  );
}

export function createPartnerLinkRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreatePartnerLinkRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePartnerLinkRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePartnerLinkRequestBody' from JSON`,
  );
}
