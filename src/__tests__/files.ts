/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { createReadStream } from "node:fs";
import { readFile } from "node:fs/promises";
import { Readable } from "node:stream";

export function filesToStream(filePath: string): ReadableStream<Uint8Array> {
  return Readable.toWeb(
    createReadStream(filePath),
  ) as unknown as ReadableStream<Uint8Array>;
}

export async function filesToByteArray(filePath: string): Promise<Uint8Array> {
  return new Uint8Array(await readFile(filePath));
}

export async function filesToString(filePath: string): Promise<string> {
  return readFile(filePath, "utf8");
}

export async function streamToByteArray(
  stream?: ReadableStream<Uint8Array>,
): Promise<Buffer> {
  if (!stream) {
    return Buffer.from("");
  }

  const chunks = [];
  const reader = stream.getReader();

  let done = false;
  while (!done) {
    const res = await reader.read();
    done = res.done;
    if (res.value) {
      chunks.push(res.value);
    }
  }

  return Buffer.concat(chunks);
}

export function bytesToStream(bytes: Uint8Array): ReadableStream<Uint8Array> {
  return new ReadableStream({
    start(controller) {
      controller.enqueue(bytes);
    },
    pull(controller) {
      controller.close();
    },
    cancel() {
    },
  });
}
