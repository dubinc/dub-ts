/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { Dub } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Domains Create Domain", async () => {
  const testHttpClient = createTestHTTPClient("createDomain");

  const dub = new Dub({
    httpClient: testHttpClient,
    token: "DUB_API_KEY",
  });

  const result = await dub.domains.create();
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: "<id>",
    slug: "acme.com",
    verified: false,
    primary: false,
    archived: false,
    placeholder: "https://dub.co/help/article/what-is-dub",
    expiredUrl: "https://acme.com/expired",
    notFoundUrl: "https://acme.com/not-found",
    assetLinks: null,
    appleAppSiteAssociation: null,
    logo: "<value>",
    createdAt: "1729011256337",
    updatedAt: "1745170931342",
    registeredDomain: {
      id: "<id>",
      createdAt: "1726831119706",
      expiresAt: "1749439510895",
    },
  });
});

test("Domains List Domains", async () => {
  const testHttpClient = createTestHTTPClient("listDomains");

  const dub = new Dub({
    httpClient: testHttpClient,
    token: "DUB_API_KEY",
  });

  const result = await dub.domains.list();
  expect(result).toBeDefined();
  expect(result.result).toBeDefined();
  expect(result.result).toEqual([
    {
      id: "<id>",
      slug: "acme.com",
      verified: false,
      primary: false,
      archived: false,
      placeholder: "https://dub.co/help/article/what-is-dub",
      expiredUrl: "https://acme.com/expired",
      notFoundUrl: "https://acme.com/not-found",
      assetLinks: null,
      appleAppSiteAssociation: null,
      logo: "<value>",
      createdAt: "1730924937145",
      updatedAt: "1745174378027",
      registeredDomain: {
        id: "<id>",
        createdAt: "1719270323225",
        expiresAt: "1752446520085",
      },
    },
    {
      id: "<id>",
      slug: "acme.com",
      verified: false,
      primary: false,
      archived: false,
      placeholder: "https://dub.co/help/article/what-is-dub",
      expiredUrl: "https://acme.com/expired",
      notFoundUrl: "https://acme.com/not-found",
      assetLinks: null,
      appleAppSiteAssociation: null,
      logo: "<value>",
      createdAt: "1718486059629",
      updatedAt: "1745170681526",
      registeredDomain: {
        id: "<id>",
        createdAt: "1733829869588",
        expiresAt: "1745756494312",
      },
    },
    {
      id: "<id>",
      slug: "acme.com",
      verified: false,
      primary: false,
      archived: false,
      placeholder: "https://dub.co/help/article/what-is-dub",
      expiredUrl: "https://acme.com/expired",
      notFoundUrl: "https://acme.com/not-found",
      assetLinks: null,
      appleAppSiteAssociation: null,
      logo: "<value>",
      createdAt: "1736318579872",
      updatedAt: "1745123214586",
      registeredDomain: {
        id: "<id>",
        createdAt: "1715826539230",
        expiresAt: "1766897667864",
      },
    },
  ]);
});

test("Domains Update Domain", async () => {
  const testHttpClient = createTestHTTPClient("updateDomain");

  const dub = new Dub({
    httpClient: testHttpClient,
    token: "DUB_API_KEY",
  });

  const result = await dub.domains.update("acme.com");
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: "<id>",
    slug: "acme.com",
    verified: false,
    primary: false,
    archived: false,
    placeholder: "https://dub.co/help/article/what-is-dub",
    expiredUrl: "https://acme.com/expired",
    notFoundUrl: "https://acme.com/not-found",
    assetLinks: null,
    appleAppSiteAssociation: null,
    logo: "<value>",
    createdAt: "1740707572178",
    updatedAt: "1745167363530",
    registeredDomain: {
      id: "<id>",
      createdAt: "1724534105884",
      expiresAt: "1776468973338",
    },
  });
});

test("Domains Delete Domain", async () => {
  const testHttpClient = createTestHTTPClient("deleteDomain");

  const dub = new Dub({
    httpClient: testHttpClient,
    token: "DUB_API_KEY",
  });

  const result = await dub.domains.delete("acme.com");
  expect(result).toBeDefined();
  expect(result).toEqual({
    slug: "acme.com",
  });
});
