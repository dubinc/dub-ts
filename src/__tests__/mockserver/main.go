// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"os"
	"os/signal"
	"strings"

	"mockserver/internal/logging"
	"mockserver/internal/server"
)

func main() {
	ctx := context.Background()

	address := flag.String("address", server.DefaultAddress, fmt.Sprintf("server listen address (default: %s)", server.DefaultAddress))
	logFormat := flag.String("log-format", logging.DefaultFormat, fmt.Sprintf("logging format (default: %s, supported: %s)", logging.DefaultFormat, strings.Join(logging.Formats(), ", ")))
	logLevel := flag.String("log-level", logging.DefaultLevel, fmt.Sprintf("logging level (default: %s, supported: %s)", logging.DefaultLevel, strings.Join(logging.Levels(), ", ")))

	flag.Parse()

	logger, err := logging.NewLogger(os.Stdout, *logFormat, *logLevel)

	if err != nil {
		fmt.Fprintf(os.Stderr, "error setting up logging: %s", err)
		os.Exit(1)
	}

	serverOpts := []server.ServerOption{
		server.WithAddress(*address),
		server.WithLogger(logger),
	}

	s, err := server.NewServer(ctx, serverOpts...)

	if err != nil {
		logger.ErrorContext(ctx, err.Error())
		os.Exit(1)
	}

	finishedShutdown := make(chan struct{})
	startShutdown := make(chan os.Signal, 1)
	signal.Notify(startShutdown, os.Interrupt)

	go func() {
		<-startShutdown

		logger.WarnContext(ctx, "server received interrupt")

		err := s.Shutdown(ctx)

		if err != nil {
			logger.Error(err.Error())
			os.Exit(1)
		}

		close(finishedShutdown)
	}()

	err = s.Serve(ctx)

	if err != nil {
		logger.ErrorContext(ctx, err.Error())
		os.Exit(1)
	}

	<-finishedShutdown

	logger.InfoContext(ctx, "server stopped")
}
