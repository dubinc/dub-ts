// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tracking

import (
	"fmt"
	"time"

	cache "github.com/go-pkgz/expirable-cache/v3"
)

type RequestTracker struct {
	cache cache.Cache[string, *testEntry]
}

type testEntry struct {
	name    string
	id      string
	count   int
	created time.Time
}

func New() *RequestTracker {
	return &RequestTracker{
		cache: cache.NewCache[string, *testEntry]().WithTTL(5 * time.Minute),
	}
}

func (t *RequestTracker) GetRequestCount(testName, instanceID string) int {
	key := fmt.Sprintf("%s-%s", testName, instanceID)

	entry, ok := t.cache.Get(key)
	if !ok {
		entry = &testEntry{
			name:    testName,
			id:      instanceID,
			count:   0,
			created: time.Now(),
		}
	}

	count := entry.count
	entry.count++
	t.cache.Set(key, entry, 0)

	return count
}
