// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type PartnerEnrolledEventEvent string

const (
	PartnerEnrolledEventEventPartnerEnrolled PartnerEnrolledEventEvent = "partner.enrolled"
)

func (e PartnerEnrolledEventEvent) ToPointer() *PartnerEnrolledEventEvent {
	return &e
}
func (e *PartnerEnrolledEventEvent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "partner.enrolled":
		*e = PartnerEnrolledEventEvent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PartnerEnrolledEventEvent: %v", v)
	}
}

type Status string

const (
	StatusPending  Status = "pending"
	StatusApproved Status = "approved"
	StatusRejected Status = "rejected"
	StatusInvited  Status = "invited"
	StatusDeclined Status = "declined"
	StatusBanned   Status = "banned"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "approved":
		fallthrough
	case "rejected":
		fallthrough
	case "invited":
		fallthrough
	case "declined":
		fallthrough
	case "banned":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type PartnerEnrolledEventLink struct {
	// The unique ID of the short link.
	ID string `json:"id"`
	// The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
	Domain string `json:"domain"`
	// The short link slug. If not provided, a random 7-character slug will be generated.
	Key string `json:"key"`
	// The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
	ShortLink string `json:"shortLink"`
	// The destination URL of the short link.
	URL string `json:"url"`
	// The number of clicks on the short link.
	Clicks *float64 `default:"0" json:"clicks"`
	// The number of leads the short links has generated.
	Leads *float64 `default:"0" json:"leads"`
	// The number of sales the short links has generated.
	Sales *float64 `default:"0" json:"sales"`
	// The total dollar amount of sales the short links has generated (in cents).
	SaleAmount *float64 `default:"0" json:"saleAmount"`
}

func (p PartnerEnrolledEventLink) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PartnerEnrolledEventLink) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PartnerEnrolledEventLink) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PartnerEnrolledEventLink) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *PartnerEnrolledEventLink) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *PartnerEnrolledEventLink) GetShortLink() string {
	if o == nil {
		return ""
	}
	return o.ShortLink
}

func (o *PartnerEnrolledEventLink) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *PartnerEnrolledEventLink) GetClicks() *float64 {
	if o == nil {
		return nil
	}
	return o.Clicks
}

func (o *PartnerEnrolledEventLink) GetLeads() *float64 {
	if o == nil {
		return nil
	}
	return o.Leads
}

func (o *PartnerEnrolledEventLink) GetSales() *float64 {
	if o == nil {
		return nil
	}
	return o.Sales
}

func (o *PartnerEnrolledEventLink) GetSaleAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.SaleAmount
}

type PartnerEnrolledEventData struct {
	ID               string                     `json:"id"`
	Name             string                     `json:"name"`
	Email            *string                    `json:"email"`
	Image            *string                    `json:"image"`
	Description      *string                    `json:"description,omitempty"`
	Country          *string                    `json:"country"`
	PaypalEmail      *string                    `json:"paypalEmail"`
	StripeConnectID  *string                    `json:"stripeConnectId"`
	PayoutsEnabledAt *string                    `json:"payoutsEnabledAt"`
	CreatedAt        string                     `json:"createdAt"`
	Status           Status                     `json:"status"`
	ProgramID        string                     `json:"programId"`
	TenantID         *string                    `json:"tenantId"`
	Links            []PartnerEnrolledEventLink `json:"links"`
	Clicks           *float64                   `default:"0" json:"clicks"`
	Leads            *float64                   `default:"0" json:"leads"`
	Sales            *float64                   `default:"0" json:"sales"`
	SaleAmount       *float64                   `default:"0" json:"saleAmount"`
	Earnings         *float64                   `default:"0" json:"earnings"`
	ApplicationID    *string                    `json:"applicationId,omitempty"`
}

func (p PartnerEnrolledEventData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PartnerEnrolledEventData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PartnerEnrolledEventData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PartnerEnrolledEventData) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PartnerEnrolledEventData) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *PartnerEnrolledEventData) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *PartnerEnrolledEventData) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PartnerEnrolledEventData) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *PartnerEnrolledEventData) GetPaypalEmail() *string {
	if o == nil {
		return nil
	}
	return o.PaypalEmail
}

func (o *PartnerEnrolledEventData) GetStripeConnectID() *string {
	if o == nil {
		return nil
	}
	return o.StripeConnectID
}

func (o *PartnerEnrolledEventData) GetPayoutsEnabledAt() *string {
	if o == nil {
		return nil
	}
	return o.PayoutsEnabledAt
}

func (o *PartnerEnrolledEventData) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *PartnerEnrolledEventData) GetStatus() Status {
	if o == nil {
		return Status("")
	}
	return o.Status
}

func (o *PartnerEnrolledEventData) GetProgramID() string {
	if o == nil {
		return ""
	}
	return o.ProgramID
}

func (o *PartnerEnrolledEventData) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *PartnerEnrolledEventData) GetLinks() []PartnerEnrolledEventLink {
	if o == nil {
		return nil
	}
	return o.Links
}

func (o *PartnerEnrolledEventData) GetClicks() *float64 {
	if o == nil {
		return nil
	}
	return o.Clicks
}

func (o *PartnerEnrolledEventData) GetLeads() *float64 {
	if o == nil {
		return nil
	}
	return o.Leads
}

func (o *PartnerEnrolledEventData) GetSales() *float64 {
	if o == nil {
		return nil
	}
	return o.Sales
}

func (o *PartnerEnrolledEventData) GetSaleAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.SaleAmount
}

func (o *PartnerEnrolledEventData) GetEarnings() *float64 {
	if o == nil {
		return nil
	}
	return o.Earnings
}

func (o *PartnerEnrolledEventData) GetApplicationID() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationID
}

// PartnerEnrolledEvent - Triggered when a partner is enrolled.
type PartnerEnrolledEvent struct {
	ID        string                    `json:"id"`
	Event     PartnerEnrolledEventEvent `json:"event"`
	CreatedAt string                    `json:"createdAt"`
	Data      PartnerEnrolledEventData  `json:"data"`
}

func (o *PartnerEnrolledEvent) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PartnerEnrolledEvent) GetEvent() PartnerEnrolledEventEvent {
	if o == nil {
		return PartnerEnrolledEventEvent("")
	}
	return o.Event
}

func (o *PartnerEnrolledEvent) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *PartnerEnrolledEvent) GetData() PartnerEnrolledEventData {
	if o == nil {
		return PartnerEnrolledEventData{}
	}
	return o.Data
}
