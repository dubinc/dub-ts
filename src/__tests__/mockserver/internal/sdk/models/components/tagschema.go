// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Color - The color of the tag.
type Color string

const (
	ColorRed    Color = "red"
	ColorYellow Color = "yellow"
	ColorGreen  Color = "green"
	ColorBlue   Color = "blue"
	ColorPurple Color = "purple"
	ColorPink   Color = "pink"
	ColorBrown  Color = "brown"
)

func (e Color) ToPointer() *Color {
	return &e
}
func (e *Color) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "red":
		fallthrough
	case "yellow":
		fallthrough
	case "green":
		fallthrough
	case "blue":
		fallthrough
	case "purple":
		fallthrough
	case "pink":
		fallthrough
	case "brown":
		*e = Color(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Color: %v", v)
	}
}

type TagSchema struct {
	// The unique ID of the tag.
	ID string `json:"id"`
	// The name of the tag.
	Name string `json:"name"`
	// The color of the tag.
	Color Color `json:"color"`
}

func (o *TagSchema) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TagSchema) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TagSchema) GetColor() Color {
	if o == nil {
		return Color("")
	}
	return o.Color
}
