// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type CreateCustomerRequestBody struct {
	// Email of the customer in the client's app.
	Email *string `json:"email,omitempty"`
	// Name of the customer in the client's app. If not provided, a random name will be generated.
	Name *string `json:"name,omitempty"`
	// Avatar URL of the customer in the client's app.
	Avatar *string `json:"avatar,omitempty"`
	// Unique identifier for the customer in the client's app.
	ExternalID string `json:"externalId"`
}

func (o *CreateCustomerRequestBody) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CreateCustomerRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateCustomerRequestBody) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *CreateCustomerRequestBody) GetExternalID() string {
	if o == nil {
		return ""
	}
	return o.ExternalID
}

type CreateCustomerLink struct {
	// The unique ID of the short link.
	ID string `json:"id"`
	// The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
	Domain string `json:"domain"`
	// The short link slug. If not provided, a random 7-character slug will be generated.
	Key string `json:"key"`
	// The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
	ShortLink string `json:"shortLink"`
	// The ID of the program the short link is associated with.
	ProgramID *string `json:"programId"`
}

func (o *CreateCustomerLink) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateCustomerLink) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *CreateCustomerLink) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateCustomerLink) GetShortLink() string {
	if o == nil {
		return ""
	}
	return o.ShortLink
}

func (o *CreateCustomerLink) GetProgramID() *string {
	if o == nil {
		return nil
	}
	return o.ProgramID
}

type CreateCustomerPartner struct {
	ID    string  `json:"id"`
	Name  string  `json:"name"`
	Email *string `json:"email"`
	Image *string `json:"image"`
}

func (o *CreateCustomerPartner) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateCustomerPartner) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateCustomerPartner) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CreateCustomerPartner) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

type CreateCustomerType string

const (
	CreateCustomerTypePercentage CreateCustomerType = "percentage"
	CreateCustomerTypeFlat       CreateCustomerType = "flat"
)

func (e CreateCustomerType) ToPointer() *CreateCustomerType {
	return &e
}
func (e *CreateCustomerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "percentage":
		fallthrough
	case "flat":
		*e = CreateCustomerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCustomerType: %v", v)
	}
}

type CreateCustomerDiscount struct {
	ID            string             `json:"id"`
	Amount        float64            `json:"amount"`
	Type          CreateCustomerType `json:"type"`
	MaxDuration   *float64           `json:"maxDuration"`
	Description   *string            `json:"description,omitempty"`
	CouponID      *string            `json:"couponId"`
	CouponTestID  *string            `json:"couponTestId"`
	PartnersCount *float64           `json:"partnersCount,omitempty"`
}

func (o *CreateCustomerDiscount) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateCustomerDiscount) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *CreateCustomerDiscount) GetType() CreateCustomerType {
	if o == nil {
		return CreateCustomerType("")
	}
	return o.Type
}

func (o *CreateCustomerDiscount) GetMaxDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxDuration
}

func (o *CreateCustomerDiscount) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateCustomerDiscount) GetCouponID() *string {
	if o == nil {
		return nil
	}
	return o.CouponID
}

func (o *CreateCustomerDiscount) GetCouponTestID() *string {
	if o == nil {
		return nil
	}
	return o.CouponTestID
}

func (o *CreateCustomerDiscount) GetPartnersCount() *float64 {
	if o == nil {
		return nil
	}
	return o.PartnersCount
}

// CreateCustomerResponseBody - The customer was created.
type CreateCustomerResponseBody struct {
	// The unique ID of the customer. You may use either the customer's `id` on Dub (obtained via `/customers` endpoint) or their `externalId` (unique ID within your system, prefixed with `ext_`, e.g. `ext_123`).
	ID string `json:"id"`
	// Unique identifier for the customer in the client's app.
	ExternalID string `json:"externalId"`
	// Name of the customer.
	Name string `json:"name"`
	// Email of the customer.
	Email *string `json:"email,omitempty"`
	// Avatar URL of the customer.
	Avatar *string `json:"avatar,omitempty"`
	// Country of the customer.
	Country *string `json:"country,omitempty"`
	// The date the customer was created.
	CreatedAt string                  `json:"createdAt"`
	Link      *CreateCustomerLink     `json:"link,omitempty"`
	ProgramID *string                 `json:"programId,omitempty"`
	Partner   *CreateCustomerPartner  `json:"partner,omitempty"`
	Discount  *CreateCustomerDiscount `json:"discount,omitempty"`
}

func (o *CreateCustomerResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateCustomerResponseBody) GetExternalID() string {
	if o == nil {
		return ""
	}
	return o.ExternalID
}

func (o *CreateCustomerResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateCustomerResponseBody) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CreateCustomerResponseBody) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *CreateCustomerResponseBody) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *CreateCustomerResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CreateCustomerResponseBody) GetLink() *CreateCustomerLink {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *CreateCustomerResponseBody) GetProgramID() *string {
	if o == nil {
		return nil
	}
	return o.ProgramID
}

func (o *CreateCustomerResponseBody) GetPartner() *CreateCustomerPartner {
	if o == nil {
		return nil
	}
	return o.Partner
}

func (o *CreateCustomerResponseBody) GetDiscount() *CreateCustomerDiscount {
	if o == nil {
		return nil
	}
	return o.Discount
}

type CreateCustomerResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The customer was created.
	Object *CreateCustomerResponseBody
}

func (o *CreateCustomerResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateCustomerResponse) GetObject() *CreateCustomerResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
