// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// Country where the partner is based.
type Country string

const (
	CountryAf Country = "AF"
	CountryAl Country = "AL"
	CountryDz Country = "DZ"
	CountryAs Country = "AS"
	CountryAd Country = "AD"
	CountryAo Country = "AO"
	CountryAi Country = "AI"
	CountryAq Country = "AQ"
	CountryAg Country = "AG"
	CountryAr Country = "AR"
	CountryAm Country = "AM"
	CountryAw Country = "AW"
	CountryAu Country = "AU"
	CountryAt Country = "AT"
	CountryAz Country = "AZ"
	CountryBs Country = "BS"
	CountryBh Country = "BH"
	CountryBd Country = "BD"
	CountryBb Country = "BB"
	CountryBy Country = "BY"
	CountryBe Country = "BE"
	CountryBz Country = "BZ"
	CountryBj Country = "BJ"
	CountryBm Country = "BM"
	CountryBt Country = "BT"
	CountryBo Country = "BO"
	CountryBa Country = "BA"
	CountryBw Country = "BW"
	CountryBv Country = "BV"
	CountryBr Country = "BR"
	CountryIo Country = "IO"
	CountryBn Country = "BN"
	CountryBg Country = "BG"
	CountryBf Country = "BF"
	CountryBi Country = "BI"
	CountryKh Country = "KH"
	CountryCm Country = "CM"
	CountryCa Country = "CA"
	CountryCv Country = "CV"
	CountryKy Country = "KY"
	CountryCf Country = "CF"
	CountryTd Country = "TD"
	CountryCl Country = "CL"
	CountryCn Country = "CN"
	CountryCx Country = "CX"
	CountryCc Country = "CC"
	CountryCo Country = "CO"
	CountryKm Country = "KM"
	CountryCg Country = "CG"
	CountryCd Country = "CD"
	CountryCk Country = "CK"
	CountryCr Country = "CR"
	CountryCi Country = "CI"
	CountryHr Country = "HR"
	CountryCu Country = "CU"
	CountryCy Country = "CY"
	CountryCz Country = "CZ"
	CountryDk Country = "DK"
	CountryDj Country = "DJ"
	CountryDm Country = "DM"
	CountryDo Country = "DO"
	CountryEc Country = "EC"
	CountryEg Country = "EG"
	CountrySv Country = "SV"
	CountryGq Country = "GQ"
	CountryEr Country = "ER"
	CountryEe Country = "EE"
	CountryEt Country = "ET"
	CountryFk Country = "FK"
	CountryFo Country = "FO"
	CountryFj Country = "FJ"
	CountryFi Country = "FI"
	CountryFr Country = "FR"
	CountryGf Country = "GF"
	CountryPf Country = "PF"
	CountryTf Country = "TF"
	CountryGa Country = "GA"
	CountryGm Country = "GM"
	CountryGe Country = "GE"
	CountryDe Country = "DE"
	CountryGh Country = "GH"
	CountryGi Country = "GI"
	CountryGr Country = "GR"
	CountryGl Country = "GL"
	CountryGd Country = "GD"
	CountryGp Country = "GP"
	CountryGu Country = "GU"
	CountryGt Country = "GT"
	CountryGn Country = "GN"
	CountryGw Country = "GW"
	CountryGy Country = "GY"
	CountryHt Country = "HT"
	CountryHm Country = "HM"
	CountryVa Country = "VA"
	CountryHn Country = "HN"
	CountryHk Country = "HK"
	CountryHu Country = "HU"
	CountryIs Country = "IS"
	CountryIn Country = "IN"
	CountryID Country = "ID"
	CountryIr Country = "IR"
	CountryIq Country = "IQ"
	CountryIe Country = "IE"
	CountryIl Country = "IL"
	CountryIt Country = "IT"
	CountryJm Country = "JM"
	CountryJp Country = "JP"
	CountryJo Country = "JO"
	CountryKz Country = "KZ"
	CountryKe Country = "KE"
	CountryKi Country = "KI"
	CountryKp Country = "KP"
	CountryKr Country = "KR"
	CountryKw Country = "KW"
	CountryKg Country = "KG"
	CountryLa Country = "LA"
	CountryLv Country = "LV"
	CountryLb Country = "LB"
	CountryLs Country = "LS"
	CountryLr Country = "LR"
	CountryLy Country = "LY"
	CountryLi Country = "LI"
	CountryLt Country = "LT"
	CountryLu Country = "LU"
	CountryMo Country = "MO"
	CountryMg Country = "MG"
	CountryMw Country = "MW"
	CountryMy Country = "MY"
	CountryMv Country = "MV"
	CountryMl Country = "ML"
	CountryMt Country = "MT"
	CountryMh Country = "MH"
	CountryMq Country = "MQ"
	CountryMr Country = "MR"
	CountryMu Country = "MU"
	CountryYt Country = "YT"
	CountryMx Country = "MX"
	CountryFm Country = "FM"
	CountryMd Country = "MD"
	CountryMc Country = "MC"
	CountryMn Country = "MN"
	CountryMs Country = "MS"
	CountryMa Country = "MA"
	CountryMz Country = "MZ"
	CountryMm Country = "MM"
	CountryNa Country = "NA"
	CountryNr Country = "NR"
	CountryNp Country = "NP"
	CountryNl Country = "NL"
	CountryNc Country = "NC"
	CountryNz Country = "NZ"
	CountryNi Country = "NI"
	CountryNe Country = "NE"
	CountryNg Country = "NG"
	CountryNu Country = "NU"
	CountryNf Country = "NF"
	CountryMk Country = "MK"
	CountryMp Country = "MP"
	CountryNo Country = "NO"
	CountryOm Country = "OM"
	CountryPk Country = "PK"
	CountryPw Country = "PW"
	CountryPs Country = "PS"
	CountryPa Country = "PA"
	CountryPg Country = "PG"
	CountryPy Country = "PY"
	CountryPe Country = "PE"
	CountryPh Country = "PH"
	CountryPn Country = "PN"
	CountryPl Country = "PL"
	CountryPt Country = "PT"
	CountryPr Country = "PR"
	CountryQa Country = "QA"
	CountryRe Country = "RE"
	CountryRo Country = "RO"
	CountryRu Country = "RU"
	CountryRw Country = "RW"
	CountrySh Country = "SH"
	CountryKn Country = "KN"
	CountryLc Country = "LC"
	CountryPm Country = "PM"
	CountryVc Country = "VC"
	CountryWs Country = "WS"
	CountrySm Country = "SM"
	CountrySt Country = "ST"
	CountrySa Country = "SA"
	CountrySn Country = "SN"
	CountrySc Country = "SC"
	CountrySl Country = "SL"
	CountrySg Country = "SG"
	CountrySk Country = "SK"
	CountrySi Country = "SI"
	CountrySb Country = "SB"
	CountrySo Country = "SO"
	CountryZa Country = "ZA"
	CountryGs Country = "GS"
	CountryEs Country = "ES"
	CountryLk Country = "LK"
	CountrySd Country = "SD"
	CountrySr Country = "SR"
	CountrySj Country = "SJ"
	CountrySz Country = "SZ"
	CountrySe Country = "SE"
	CountryCh Country = "CH"
	CountrySy Country = "SY"
	CountryTw Country = "TW"
	CountryTj Country = "TJ"
	CountryTz Country = "TZ"
	CountryTh Country = "TH"
	CountryTl Country = "TL"
	CountryTg Country = "TG"
	CountryTk Country = "TK"
	CountryTo Country = "TO"
	CountryTt Country = "TT"
	CountryTn Country = "TN"
	CountryTr Country = "TR"
	CountryTm Country = "TM"
	CountryTc Country = "TC"
	CountryTv Country = "TV"
	CountryUg Country = "UG"
	CountryUa Country = "UA"
	CountryAe Country = "AE"
	CountryGb Country = "GB"
	CountryUs Country = "US"
	CountryUm Country = "UM"
	CountryUy Country = "UY"
	CountryUz Country = "UZ"
	CountryVu Country = "VU"
	CountryVe Country = "VE"
	CountryVn Country = "VN"
	CountryVg Country = "VG"
	CountryVi Country = "VI"
	CountryWf Country = "WF"
	CountryEh Country = "EH"
	CountryYe Country = "YE"
	CountryZm Country = "ZM"
	CountryZw Country = "ZW"
	CountryAx Country = "AX"
	CountryBq Country = "BQ"
	CountryCw Country = "CW"
	CountryGg Country = "GG"
	CountryIm Country = "IM"
	CountryJe Country = "JE"
	CountryMe Country = "ME"
	CountryBl Country = "BL"
	CountryMf Country = "MF"
	CountryRs Country = "RS"
	CountrySx Country = "SX"
	CountrySs Country = "SS"
	CountryXk Country = "XK"
)

func (e Country) ToPointer() *Country {
	return &e
}
func (e *Country) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AF":
		fallthrough
	case "AL":
		fallthrough
	case "DZ":
		fallthrough
	case "AS":
		fallthrough
	case "AD":
		fallthrough
	case "AO":
		fallthrough
	case "AI":
		fallthrough
	case "AQ":
		fallthrough
	case "AG":
		fallthrough
	case "AR":
		fallthrough
	case "AM":
		fallthrough
	case "AW":
		fallthrough
	case "AU":
		fallthrough
	case "AT":
		fallthrough
	case "AZ":
		fallthrough
	case "BS":
		fallthrough
	case "BH":
		fallthrough
	case "BD":
		fallthrough
	case "BB":
		fallthrough
	case "BY":
		fallthrough
	case "BE":
		fallthrough
	case "BZ":
		fallthrough
	case "BJ":
		fallthrough
	case "BM":
		fallthrough
	case "BT":
		fallthrough
	case "BO":
		fallthrough
	case "BA":
		fallthrough
	case "BW":
		fallthrough
	case "BV":
		fallthrough
	case "BR":
		fallthrough
	case "IO":
		fallthrough
	case "BN":
		fallthrough
	case "BG":
		fallthrough
	case "BF":
		fallthrough
	case "BI":
		fallthrough
	case "KH":
		fallthrough
	case "CM":
		fallthrough
	case "CA":
		fallthrough
	case "CV":
		fallthrough
	case "KY":
		fallthrough
	case "CF":
		fallthrough
	case "TD":
		fallthrough
	case "CL":
		fallthrough
	case "CN":
		fallthrough
	case "CX":
		fallthrough
	case "CC":
		fallthrough
	case "CO":
		fallthrough
	case "KM":
		fallthrough
	case "CG":
		fallthrough
	case "CD":
		fallthrough
	case "CK":
		fallthrough
	case "CR":
		fallthrough
	case "CI":
		fallthrough
	case "HR":
		fallthrough
	case "CU":
		fallthrough
	case "CY":
		fallthrough
	case "CZ":
		fallthrough
	case "DK":
		fallthrough
	case "DJ":
		fallthrough
	case "DM":
		fallthrough
	case "DO":
		fallthrough
	case "EC":
		fallthrough
	case "EG":
		fallthrough
	case "SV":
		fallthrough
	case "GQ":
		fallthrough
	case "ER":
		fallthrough
	case "EE":
		fallthrough
	case "ET":
		fallthrough
	case "FK":
		fallthrough
	case "FO":
		fallthrough
	case "FJ":
		fallthrough
	case "FI":
		fallthrough
	case "FR":
		fallthrough
	case "GF":
		fallthrough
	case "PF":
		fallthrough
	case "TF":
		fallthrough
	case "GA":
		fallthrough
	case "GM":
		fallthrough
	case "GE":
		fallthrough
	case "DE":
		fallthrough
	case "GH":
		fallthrough
	case "GI":
		fallthrough
	case "GR":
		fallthrough
	case "GL":
		fallthrough
	case "GD":
		fallthrough
	case "GP":
		fallthrough
	case "GU":
		fallthrough
	case "GT":
		fallthrough
	case "GN":
		fallthrough
	case "GW":
		fallthrough
	case "GY":
		fallthrough
	case "HT":
		fallthrough
	case "HM":
		fallthrough
	case "VA":
		fallthrough
	case "HN":
		fallthrough
	case "HK":
		fallthrough
	case "HU":
		fallthrough
	case "IS":
		fallthrough
	case "IN":
		fallthrough
	case "ID":
		fallthrough
	case "IR":
		fallthrough
	case "IQ":
		fallthrough
	case "IE":
		fallthrough
	case "IL":
		fallthrough
	case "IT":
		fallthrough
	case "JM":
		fallthrough
	case "JP":
		fallthrough
	case "JO":
		fallthrough
	case "KZ":
		fallthrough
	case "KE":
		fallthrough
	case "KI":
		fallthrough
	case "KP":
		fallthrough
	case "KR":
		fallthrough
	case "KW":
		fallthrough
	case "KG":
		fallthrough
	case "LA":
		fallthrough
	case "LV":
		fallthrough
	case "LB":
		fallthrough
	case "LS":
		fallthrough
	case "LR":
		fallthrough
	case "LY":
		fallthrough
	case "LI":
		fallthrough
	case "LT":
		fallthrough
	case "LU":
		fallthrough
	case "MO":
		fallthrough
	case "MG":
		fallthrough
	case "MW":
		fallthrough
	case "MY":
		fallthrough
	case "MV":
		fallthrough
	case "ML":
		fallthrough
	case "MT":
		fallthrough
	case "MH":
		fallthrough
	case "MQ":
		fallthrough
	case "MR":
		fallthrough
	case "MU":
		fallthrough
	case "YT":
		fallthrough
	case "MX":
		fallthrough
	case "FM":
		fallthrough
	case "MD":
		fallthrough
	case "MC":
		fallthrough
	case "MN":
		fallthrough
	case "MS":
		fallthrough
	case "MA":
		fallthrough
	case "MZ":
		fallthrough
	case "MM":
		fallthrough
	case "NA":
		fallthrough
	case "NR":
		fallthrough
	case "NP":
		fallthrough
	case "NL":
		fallthrough
	case "NC":
		fallthrough
	case "NZ":
		fallthrough
	case "NI":
		fallthrough
	case "NE":
		fallthrough
	case "NG":
		fallthrough
	case "NU":
		fallthrough
	case "NF":
		fallthrough
	case "MK":
		fallthrough
	case "MP":
		fallthrough
	case "NO":
		fallthrough
	case "OM":
		fallthrough
	case "PK":
		fallthrough
	case "PW":
		fallthrough
	case "PS":
		fallthrough
	case "PA":
		fallthrough
	case "PG":
		fallthrough
	case "PY":
		fallthrough
	case "PE":
		fallthrough
	case "PH":
		fallthrough
	case "PN":
		fallthrough
	case "PL":
		fallthrough
	case "PT":
		fallthrough
	case "PR":
		fallthrough
	case "QA":
		fallthrough
	case "RE":
		fallthrough
	case "RO":
		fallthrough
	case "RU":
		fallthrough
	case "RW":
		fallthrough
	case "SH":
		fallthrough
	case "KN":
		fallthrough
	case "LC":
		fallthrough
	case "PM":
		fallthrough
	case "VC":
		fallthrough
	case "WS":
		fallthrough
	case "SM":
		fallthrough
	case "ST":
		fallthrough
	case "SA":
		fallthrough
	case "SN":
		fallthrough
	case "SC":
		fallthrough
	case "SL":
		fallthrough
	case "SG":
		fallthrough
	case "SK":
		fallthrough
	case "SI":
		fallthrough
	case "SB":
		fallthrough
	case "SO":
		fallthrough
	case "ZA":
		fallthrough
	case "GS":
		fallthrough
	case "ES":
		fallthrough
	case "LK":
		fallthrough
	case "SD":
		fallthrough
	case "SR":
		fallthrough
	case "SJ":
		fallthrough
	case "SZ":
		fallthrough
	case "SE":
		fallthrough
	case "CH":
		fallthrough
	case "SY":
		fallthrough
	case "TW":
		fallthrough
	case "TJ":
		fallthrough
	case "TZ":
		fallthrough
	case "TH":
		fallthrough
	case "TL":
		fallthrough
	case "TG":
		fallthrough
	case "TK":
		fallthrough
	case "TO":
		fallthrough
	case "TT":
		fallthrough
	case "TN":
		fallthrough
	case "TR":
		fallthrough
	case "TM":
		fallthrough
	case "TC":
		fallthrough
	case "TV":
		fallthrough
	case "UG":
		fallthrough
	case "UA":
		fallthrough
	case "AE":
		fallthrough
	case "GB":
		fallthrough
	case "US":
		fallthrough
	case "UM":
		fallthrough
	case "UY":
		fallthrough
	case "UZ":
		fallthrough
	case "VU":
		fallthrough
	case "VE":
		fallthrough
	case "VN":
		fallthrough
	case "VG":
		fallthrough
	case "VI":
		fallthrough
	case "WF":
		fallthrough
	case "EH":
		fallthrough
	case "YE":
		fallthrough
	case "ZM":
		fallthrough
	case "ZW":
		fallthrough
	case "AX":
		fallthrough
	case "BQ":
		fallthrough
	case "CW":
		fallthrough
	case "GG":
		fallthrough
	case "IM":
		fallthrough
	case "JE":
		fallthrough
	case "ME":
		fallthrough
	case "BL":
		fallthrough
	case "MF":
		fallthrough
	case "RS":
		fallthrough
	case "SX":
		fallthrough
	case "SS":
		fallthrough
	case "XK":
		*e = Country(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Country: %v", v)
	}
}

type CreatePartnerTagIdsType string

const (
	CreatePartnerTagIdsTypeStr        CreatePartnerTagIdsType = "str"
	CreatePartnerTagIdsTypeArrayOfStr CreatePartnerTagIdsType = "arrayOfStr"
)

// CreatePartnerTagIds - The unique IDs of the tags assigned to the short link.
type CreatePartnerTagIds struct {
	Str        *string
	ArrayOfStr []string

	Type CreatePartnerTagIdsType
}

func CreateCreatePartnerTagIdsStr(str string) CreatePartnerTagIds {
	typ := CreatePartnerTagIdsTypeStr

	return CreatePartnerTagIds{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreatePartnerTagIdsArrayOfStr(arrayOfStr []string) CreatePartnerTagIds {
	typ := CreatePartnerTagIdsTypeArrayOfStr

	return CreatePartnerTagIds{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreatePartnerTagIds) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreatePartnerTagIdsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreatePartnerTagIdsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreatePartnerTagIds", string(data))
}

func (u CreatePartnerTagIds) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreatePartnerTagIds: all fields are null")
}

type CreatePartnerTagNamesType string

const (
	CreatePartnerTagNamesTypeStr        CreatePartnerTagNamesType = "str"
	CreatePartnerTagNamesTypeArrayOfStr CreatePartnerTagNamesType = "arrayOfStr"
)

// CreatePartnerTagNames - The unique name of the tags assigned to the short link (case insensitive).
type CreatePartnerTagNames struct {
	Str        *string
	ArrayOfStr []string

	Type CreatePartnerTagNamesType
}

func CreateCreatePartnerTagNamesStr(str string) CreatePartnerTagNames {
	typ := CreatePartnerTagNamesTypeStr

	return CreatePartnerTagNames{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreatePartnerTagNamesArrayOfStr(arrayOfStr []string) CreatePartnerTagNames {
	typ := CreatePartnerTagNamesTypeArrayOfStr

	return CreatePartnerTagNames{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreatePartnerTagNames) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreatePartnerTagNamesTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreatePartnerTagNamesTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreatePartnerTagNames", string(data))
}

func (u CreatePartnerTagNames) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreatePartnerTagNames: all fields are null")
}

type CreatePartnerTestVariants struct {
	URL        string  `json:"url"`
	Percentage float64 `json:"percentage"`
}

func (o *CreatePartnerTestVariants) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreatePartnerTestVariants) GetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Percentage
}

// LinkProps - Additional properties that you can pass to the partner's short link. Will be used to override the default link properties for this partner.
type LinkProps struct {
	// The ID of the link in your database. If set, it can be used to identify the link in future API requests (must be prefixed with 'ext_' when passed as a query parameter). This key is unique across your workspace.
	ExternalID *string `json:"externalId,omitempty"`
	// The ID of the tenant that created the link inside your system. If set, it can be used to fetch all links for a tenant.
	TenantID *string `json:"tenantId,omitempty"`
	// The prefix of the short link slug for randomly-generated keys (e.g. if prefix is `/c/`, generated keys will be in the `/c/:key` format). Will be ignored if `key` is provided.
	Prefix *string `json:"prefix,omitempty"`
	// Whether the short link is archived. Defaults to `false` if not provided.
	Archived *bool `json:"archived,omitempty"`
	// The unique IDs of the tags assigned to the short link.
	TagIds *CreatePartnerTagIds `json:"tagIds,omitempty"`
	// The unique name of the tags assigned to the short link (case insensitive).
	TagNames *CreatePartnerTagNames `json:"tagNames,omitempty"`
	// The unique ID existing folder to assign the short link to.
	FolderID *string `json:"folderId,omitempty"`
	// The comments for the short link.
	Comments *string `json:"comments,omitempty"`
	// The date and time when the short link will expire at.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// The URL to redirect to when the short link has expired.
	ExpiredURL *string `json:"expiredUrl,omitempty"`
	// The password required to access the destination URL of the short link.
	Password *string `json:"password,omitempty"`
	// Whether the short link uses Custom Social Media Cards feature. Defaults to `false` if not provided.
	Proxy *bool `json:"proxy,omitempty"`
	// The custom link preview title (og:title). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
	Title *string `json:"title,omitempty"`
	// The custom link preview description (og:description). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
	Description *string `json:"description,omitempty"`
	// The custom link preview image (og:image). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
	Image *string `json:"image,omitempty"`
	// The custom link preview video (og:video). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
	Video *string `json:"video,omitempty"`
	// Whether the short link uses link cloaking. Defaults to `false` if not provided.
	Rewrite *bool `json:"rewrite,omitempty"`
	// The iOS destination URL for the short link for iOS device targeting.
	Ios *string `json:"ios,omitempty"`
	// The Android destination URL for the short link for Android device targeting.
	Android *string `json:"android,omitempty"`
	// Allow search engines to index your short link. Defaults to `false` if not provided. Learn more: https://d.to/noindex
	DoIndex *bool `json:"doIndex,omitempty"`
	// The UTM source of the short link. If set, this will populate or override the UTM source in the destination URL.
	UtmSource *string `json:"utm_source,omitempty"`
	// The UTM medium of the short link. If set, this will populate or override the UTM medium in the destination URL.
	UtmMedium *string `json:"utm_medium,omitempty"`
	// The UTM campaign of the short link. If set, this will populate or override the UTM campaign in the destination URL.
	UtmCampaign *string `json:"utm_campaign,omitempty"`
	// The UTM term of the short link. If set, this will populate or override the UTM term in the destination URL.
	UtmTerm *string `json:"utm_term,omitempty"`
	// The UTM content of the short link. If set, this will populate or override the UTM content in the destination URL.
	UtmContent *string `json:"utm_content,omitempty"`
	// The referral tag of the short link. If set, this will populate or override the `ref` query parameter in the destination URL.
	Ref *string `json:"ref,omitempty"`
	// An array of A/B test URLs and the percentage of traffic to send to each URL.
	TestVariants []CreatePartnerTestVariants `json:"testVariants,omitempty"`
	// The date and time when the tests started.
	TestStartedAt *string `json:"testStartedAt,omitempty"`
	// The date and time when the tests were or will be completed.
	TestCompletedAt *string `json:"testCompletedAt,omitempty"`
}

func (o *LinkProps) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *LinkProps) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *LinkProps) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *LinkProps) GetArchived() *bool {
	if o == nil {
		return nil
	}
	return o.Archived
}

func (o *LinkProps) GetTagIds() *CreatePartnerTagIds {
	if o == nil {
		return nil
	}
	return o.TagIds
}

func (o *LinkProps) GetTagNames() *CreatePartnerTagNames {
	if o == nil {
		return nil
	}
	return o.TagNames
}

func (o *LinkProps) GetFolderID() *string {
	if o == nil {
		return nil
	}
	return o.FolderID
}

func (o *LinkProps) GetComments() *string {
	if o == nil {
		return nil
	}
	return o.Comments
}

func (o *LinkProps) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *LinkProps) GetExpiredURL() *string {
	if o == nil {
		return nil
	}
	return o.ExpiredURL
}

func (o *LinkProps) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *LinkProps) GetProxy() *bool {
	if o == nil {
		return nil
	}
	return o.Proxy
}

func (o *LinkProps) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *LinkProps) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *LinkProps) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *LinkProps) GetVideo() *string {
	if o == nil {
		return nil
	}
	return o.Video
}

func (o *LinkProps) GetRewrite() *bool {
	if o == nil {
		return nil
	}
	return o.Rewrite
}

func (o *LinkProps) GetIos() *string {
	if o == nil {
		return nil
	}
	return o.Ios
}

func (o *LinkProps) GetAndroid() *string {
	if o == nil {
		return nil
	}
	return o.Android
}

func (o *LinkProps) GetDoIndex() *bool {
	if o == nil {
		return nil
	}
	return o.DoIndex
}

func (o *LinkProps) GetUtmSource() *string {
	if o == nil {
		return nil
	}
	return o.UtmSource
}

func (o *LinkProps) GetUtmMedium() *string {
	if o == nil {
		return nil
	}
	return o.UtmMedium
}

func (o *LinkProps) GetUtmCampaign() *string {
	if o == nil {
		return nil
	}
	return o.UtmCampaign
}

func (o *LinkProps) GetUtmTerm() *string {
	if o == nil {
		return nil
	}
	return o.UtmTerm
}

func (o *LinkProps) GetUtmContent() *string {
	if o == nil {
		return nil
	}
	return o.UtmContent
}

func (o *LinkProps) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *LinkProps) GetTestVariants() []CreatePartnerTestVariants {
	if o == nil {
		return nil
	}
	return o.TestVariants
}

func (o *LinkProps) GetTestStartedAt() *string {
	if o == nil {
		return nil
	}
	return o.TestStartedAt
}

func (o *LinkProps) GetTestCompletedAt() *string {
	if o == nil {
		return nil
	}
	return o.TestCompletedAt
}

type CreatePartnerRequestBody struct {
	// The ID of the program to create a partner for.
	ProgramID string `json:"programId"`
	// Full legal name of the partner.
	Name string `json:"name"`
	// Email for the partner in your system. Partners will be able to claim their profile by signing up to Dub Partners with this email.
	Email string `json:"email"`
	// A unique username for the partner in your system (max 100 characters). This will be used to create a short link for the partner using your program's default domain. If not provided, Dub will try to generate a username from the partner's name or email.
	Username *string `json:"username,omitempty"`
	// Avatar image for the partner – if not provided, a default avatar will be used.
	Image *string `json:"image,omitempty"`
	// Country where the partner is based.
	Country *Country `json:"country,omitempty"`
	// A brief description of the partner and their background.
	Description *string `json:"description,omitempty"`
	// The ID of the partner in your system.
	TenantID *string `json:"tenantId,omitempty"`
	// Additional properties that you can pass to the partner's short link. Will be used to override the default link properties for this partner.
	LinkProps *LinkProps `json:"linkProps,omitempty"`
}

func (o *CreatePartnerRequestBody) GetProgramID() string {
	if o == nil {
		return ""
	}
	return o.ProgramID
}

func (o *CreatePartnerRequestBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreatePartnerRequestBody) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *CreatePartnerRequestBody) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *CreatePartnerRequestBody) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *CreatePartnerRequestBody) GetCountry() *Country {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *CreatePartnerRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreatePartnerRequestBody) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *CreatePartnerRequestBody) GetLinkProps() *LinkProps {
	if o == nil {
		return nil
	}
	return o.LinkProps
}

type Status string

const (
	StatusPending  Status = "pending"
	StatusApproved Status = "approved"
	StatusRejected Status = "rejected"
	StatusInvited  Status = "invited"
	StatusDeclined Status = "declined"
	StatusBanned   Status = "banned"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "approved":
		fallthrough
	case "rejected":
		fallthrough
	case "invited":
		fallthrough
	case "declined":
		fallthrough
	case "banned":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type CreatePartnerLink struct {
	// The unique ID of the short link.
	ID string `json:"id"`
	// The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
	Domain string `json:"domain"`
	// The short link slug. If not provided, a random 7-character slug will be generated.
	Key string `json:"key"`
	// The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
	ShortLink string `json:"shortLink"`
	// The destination URL of the short link.
	URL string `json:"url"`
	// The number of clicks on the short link.
	Clicks *float64 `default:"0" json:"clicks"`
	// The number of leads the short links has generated.
	Leads *float64 `default:"0" json:"leads"`
	// The number of sales the short links has generated.
	Sales *float64 `default:"0" json:"sales"`
	// The total dollar amount of sales the short links has generated (in cents).
	SaleAmount *float64 `default:"0" json:"saleAmount"`
}

func (c CreatePartnerLink) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatePartnerLink) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreatePartnerLink) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreatePartnerLink) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *CreatePartnerLink) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreatePartnerLink) GetShortLink() string {
	if o == nil {
		return ""
	}
	return o.ShortLink
}

func (o *CreatePartnerLink) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreatePartnerLink) GetClicks() *float64 {
	if o == nil {
		return nil
	}
	return o.Clicks
}

func (o *CreatePartnerLink) GetLeads() *float64 {
	if o == nil {
		return nil
	}
	return o.Leads
}

func (o *CreatePartnerLink) GetSales() *float64 {
	if o == nil {
		return nil
	}
	return o.Sales
}

func (o *CreatePartnerLink) GetSaleAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.SaleAmount
}

// CreatePartnerResponseBody - The created partner
type CreatePartnerResponseBody struct {
	ID               string              `json:"id"`
	Name             string              `json:"name"`
	Email            *string             `json:"email"`
	Image            *string             `json:"image"`
	Description      *string             `json:"description,omitempty"`
	Country          *string             `json:"country"`
	PaypalEmail      *string             `json:"paypalEmail"`
	StripeConnectID  *string             `json:"stripeConnectId"`
	PayoutsEnabledAt *string             `json:"payoutsEnabledAt"`
	CreatedAt        string              `json:"createdAt"`
	Status           Status              `json:"status"`
	ProgramID        string              `json:"programId"`
	TenantID         *string             `json:"tenantId"`
	Links            []CreatePartnerLink `json:"links"`
	Clicks           *float64            `default:"0" json:"clicks"`
	Leads            *float64            `default:"0" json:"leads"`
	Sales            *float64            `default:"0" json:"sales"`
	SaleAmount       *float64            `default:"0" json:"saleAmount"`
	Earnings         *float64            `default:"0" json:"earnings"`
	ApplicationID    *string             `json:"applicationId,omitempty"`
}

func (c CreatePartnerResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatePartnerResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreatePartnerResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreatePartnerResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreatePartnerResponseBody) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CreatePartnerResponseBody) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *CreatePartnerResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreatePartnerResponseBody) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *CreatePartnerResponseBody) GetPaypalEmail() *string {
	if o == nil {
		return nil
	}
	return o.PaypalEmail
}

func (o *CreatePartnerResponseBody) GetStripeConnectID() *string {
	if o == nil {
		return nil
	}
	return o.StripeConnectID
}

func (o *CreatePartnerResponseBody) GetPayoutsEnabledAt() *string {
	if o == nil {
		return nil
	}
	return o.PayoutsEnabledAt
}

func (o *CreatePartnerResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CreatePartnerResponseBody) GetStatus() Status {
	if o == nil {
		return Status("")
	}
	return o.Status
}

func (o *CreatePartnerResponseBody) GetProgramID() string {
	if o == nil {
		return ""
	}
	return o.ProgramID
}

func (o *CreatePartnerResponseBody) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *CreatePartnerResponseBody) GetLinks() []CreatePartnerLink {
	if o == nil {
		return nil
	}
	return o.Links
}

func (o *CreatePartnerResponseBody) GetClicks() *float64 {
	if o == nil {
		return nil
	}
	return o.Clicks
}

func (o *CreatePartnerResponseBody) GetLeads() *float64 {
	if o == nil {
		return nil
	}
	return o.Leads
}

func (o *CreatePartnerResponseBody) GetSales() *float64 {
	if o == nil {
		return nil
	}
	return o.Sales
}

func (o *CreatePartnerResponseBody) GetSaleAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.SaleAmount
}

func (o *CreatePartnerResponseBody) GetEarnings() *float64 {
	if o == nil {
		return nil
	}
	return o.Earnings
}

func (o *CreatePartnerResponseBody) GetApplicationID() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationID
}

type CreatePartnerResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The created partner
	Object *CreatePartnerResponseBody
}

func (o *CreatePartnerResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreatePartnerResponse) GetObject() *CreatePartnerResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
