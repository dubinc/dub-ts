// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// CreateReferralsEmbedTokenCountry - Country where the partner is based.
type CreateReferralsEmbedTokenCountry string

const (
	CreateReferralsEmbedTokenCountryAf CreateReferralsEmbedTokenCountry = "AF"
	CreateReferralsEmbedTokenCountryAl CreateReferralsEmbedTokenCountry = "AL"
	CreateReferralsEmbedTokenCountryDz CreateReferralsEmbedTokenCountry = "DZ"
	CreateReferralsEmbedTokenCountryAs CreateReferralsEmbedTokenCountry = "AS"
	CreateReferralsEmbedTokenCountryAd CreateReferralsEmbedTokenCountry = "AD"
	CreateReferralsEmbedTokenCountryAo CreateReferralsEmbedTokenCountry = "AO"
	CreateReferralsEmbedTokenCountryAi CreateReferralsEmbedTokenCountry = "AI"
	CreateReferralsEmbedTokenCountryAq CreateReferralsEmbedTokenCountry = "AQ"
	CreateReferralsEmbedTokenCountryAg CreateReferralsEmbedTokenCountry = "AG"
	CreateReferralsEmbedTokenCountryAr CreateReferralsEmbedTokenCountry = "AR"
	CreateReferralsEmbedTokenCountryAm CreateReferralsEmbedTokenCountry = "AM"
	CreateReferralsEmbedTokenCountryAw CreateReferralsEmbedTokenCountry = "AW"
	CreateReferralsEmbedTokenCountryAu CreateReferralsEmbedTokenCountry = "AU"
	CreateReferralsEmbedTokenCountryAt CreateReferralsEmbedTokenCountry = "AT"
	CreateReferralsEmbedTokenCountryAz CreateReferralsEmbedTokenCountry = "AZ"
	CreateReferralsEmbedTokenCountryBs CreateReferralsEmbedTokenCountry = "BS"
	CreateReferralsEmbedTokenCountryBh CreateReferralsEmbedTokenCountry = "BH"
	CreateReferralsEmbedTokenCountryBd CreateReferralsEmbedTokenCountry = "BD"
	CreateReferralsEmbedTokenCountryBb CreateReferralsEmbedTokenCountry = "BB"
	CreateReferralsEmbedTokenCountryBy CreateReferralsEmbedTokenCountry = "BY"
	CreateReferralsEmbedTokenCountryBe CreateReferralsEmbedTokenCountry = "BE"
	CreateReferralsEmbedTokenCountryBz CreateReferralsEmbedTokenCountry = "BZ"
	CreateReferralsEmbedTokenCountryBj CreateReferralsEmbedTokenCountry = "BJ"
	CreateReferralsEmbedTokenCountryBm CreateReferralsEmbedTokenCountry = "BM"
	CreateReferralsEmbedTokenCountryBt CreateReferralsEmbedTokenCountry = "BT"
	CreateReferralsEmbedTokenCountryBo CreateReferralsEmbedTokenCountry = "BO"
	CreateReferralsEmbedTokenCountryBa CreateReferralsEmbedTokenCountry = "BA"
	CreateReferralsEmbedTokenCountryBw CreateReferralsEmbedTokenCountry = "BW"
	CreateReferralsEmbedTokenCountryBv CreateReferralsEmbedTokenCountry = "BV"
	CreateReferralsEmbedTokenCountryBr CreateReferralsEmbedTokenCountry = "BR"
	CreateReferralsEmbedTokenCountryIo CreateReferralsEmbedTokenCountry = "IO"
	CreateReferralsEmbedTokenCountryBn CreateReferralsEmbedTokenCountry = "BN"
	CreateReferralsEmbedTokenCountryBg CreateReferralsEmbedTokenCountry = "BG"
	CreateReferralsEmbedTokenCountryBf CreateReferralsEmbedTokenCountry = "BF"
	CreateReferralsEmbedTokenCountryBi CreateReferralsEmbedTokenCountry = "BI"
	CreateReferralsEmbedTokenCountryKh CreateReferralsEmbedTokenCountry = "KH"
	CreateReferralsEmbedTokenCountryCm CreateReferralsEmbedTokenCountry = "CM"
	CreateReferralsEmbedTokenCountryCa CreateReferralsEmbedTokenCountry = "CA"
	CreateReferralsEmbedTokenCountryCv CreateReferralsEmbedTokenCountry = "CV"
	CreateReferralsEmbedTokenCountryKy CreateReferralsEmbedTokenCountry = "KY"
	CreateReferralsEmbedTokenCountryCf CreateReferralsEmbedTokenCountry = "CF"
	CreateReferralsEmbedTokenCountryTd CreateReferralsEmbedTokenCountry = "TD"
	CreateReferralsEmbedTokenCountryCl CreateReferralsEmbedTokenCountry = "CL"
	CreateReferralsEmbedTokenCountryCn CreateReferralsEmbedTokenCountry = "CN"
	CreateReferralsEmbedTokenCountryCx CreateReferralsEmbedTokenCountry = "CX"
	CreateReferralsEmbedTokenCountryCc CreateReferralsEmbedTokenCountry = "CC"
	CreateReferralsEmbedTokenCountryCo CreateReferralsEmbedTokenCountry = "CO"
	CreateReferralsEmbedTokenCountryKm CreateReferralsEmbedTokenCountry = "KM"
	CreateReferralsEmbedTokenCountryCg CreateReferralsEmbedTokenCountry = "CG"
	CreateReferralsEmbedTokenCountryCd CreateReferralsEmbedTokenCountry = "CD"
	CreateReferralsEmbedTokenCountryCk CreateReferralsEmbedTokenCountry = "CK"
	CreateReferralsEmbedTokenCountryCr CreateReferralsEmbedTokenCountry = "CR"
	CreateReferralsEmbedTokenCountryCi CreateReferralsEmbedTokenCountry = "CI"
	CreateReferralsEmbedTokenCountryHr CreateReferralsEmbedTokenCountry = "HR"
	CreateReferralsEmbedTokenCountryCu CreateReferralsEmbedTokenCountry = "CU"
	CreateReferralsEmbedTokenCountryCy CreateReferralsEmbedTokenCountry = "CY"
	CreateReferralsEmbedTokenCountryCz CreateReferralsEmbedTokenCountry = "CZ"
	CreateReferralsEmbedTokenCountryDk CreateReferralsEmbedTokenCountry = "DK"
	CreateReferralsEmbedTokenCountryDj CreateReferralsEmbedTokenCountry = "DJ"
	CreateReferralsEmbedTokenCountryDm CreateReferralsEmbedTokenCountry = "DM"
	CreateReferralsEmbedTokenCountryDo CreateReferralsEmbedTokenCountry = "DO"
	CreateReferralsEmbedTokenCountryEc CreateReferralsEmbedTokenCountry = "EC"
	CreateReferralsEmbedTokenCountryEg CreateReferralsEmbedTokenCountry = "EG"
	CreateReferralsEmbedTokenCountrySv CreateReferralsEmbedTokenCountry = "SV"
	CreateReferralsEmbedTokenCountryGq CreateReferralsEmbedTokenCountry = "GQ"
	CreateReferralsEmbedTokenCountryEr CreateReferralsEmbedTokenCountry = "ER"
	CreateReferralsEmbedTokenCountryEe CreateReferralsEmbedTokenCountry = "EE"
	CreateReferralsEmbedTokenCountryEt CreateReferralsEmbedTokenCountry = "ET"
	CreateReferralsEmbedTokenCountryFk CreateReferralsEmbedTokenCountry = "FK"
	CreateReferralsEmbedTokenCountryFo CreateReferralsEmbedTokenCountry = "FO"
	CreateReferralsEmbedTokenCountryFj CreateReferralsEmbedTokenCountry = "FJ"
	CreateReferralsEmbedTokenCountryFi CreateReferralsEmbedTokenCountry = "FI"
	CreateReferralsEmbedTokenCountryFr CreateReferralsEmbedTokenCountry = "FR"
	CreateReferralsEmbedTokenCountryGf CreateReferralsEmbedTokenCountry = "GF"
	CreateReferralsEmbedTokenCountryPf CreateReferralsEmbedTokenCountry = "PF"
	CreateReferralsEmbedTokenCountryTf CreateReferralsEmbedTokenCountry = "TF"
	CreateReferralsEmbedTokenCountryGa CreateReferralsEmbedTokenCountry = "GA"
	CreateReferralsEmbedTokenCountryGm CreateReferralsEmbedTokenCountry = "GM"
	CreateReferralsEmbedTokenCountryGe CreateReferralsEmbedTokenCountry = "GE"
	CreateReferralsEmbedTokenCountryDe CreateReferralsEmbedTokenCountry = "DE"
	CreateReferralsEmbedTokenCountryGh CreateReferralsEmbedTokenCountry = "GH"
	CreateReferralsEmbedTokenCountryGi CreateReferralsEmbedTokenCountry = "GI"
	CreateReferralsEmbedTokenCountryGr CreateReferralsEmbedTokenCountry = "GR"
	CreateReferralsEmbedTokenCountryGl CreateReferralsEmbedTokenCountry = "GL"
	CreateReferralsEmbedTokenCountryGd CreateReferralsEmbedTokenCountry = "GD"
	CreateReferralsEmbedTokenCountryGp CreateReferralsEmbedTokenCountry = "GP"
	CreateReferralsEmbedTokenCountryGu CreateReferralsEmbedTokenCountry = "GU"
	CreateReferralsEmbedTokenCountryGt CreateReferralsEmbedTokenCountry = "GT"
	CreateReferralsEmbedTokenCountryGn CreateReferralsEmbedTokenCountry = "GN"
	CreateReferralsEmbedTokenCountryGw CreateReferralsEmbedTokenCountry = "GW"
	CreateReferralsEmbedTokenCountryGy CreateReferralsEmbedTokenCountry = "GY"
	CreateReferralsEmbedTokenCountryHt CreateReferralsEmbedTokenCountry = "HT"
	CreateReferralsEmbedTokenCountryHm CreateReferralsEmbedTokenCountry = "HM"
	CreateReferralsEmbedTokenCountryVa CreateReferralsEmbedTokenCountry = "VA"
	CreateReferralsEmbedTokenCountryHn CreateReferralsEmbedTokenCountry = "HN"
	CreateReferralsEmbedTokenCountryHk CreateReferralsEmbedTokenCountry = "HK"
	CreateReferralsEmbedTokenCountryHu CreateReferralsEmbedTokenCountry = "HU"
	CreateReferralsEmbedTokenCountryIs CreateReferralsEmbedTokenCountry = "IS"
	CreateReferralsEmbedTokenCountryIn CreateReferralsEmbedTokenCountry = "IN"
	CreateReferralsEmbedTokenCountryID CreateReferralsEmbedTokenCountry = "ID"
	CreateReferralsEmbedTokenCountryIr CreateReferralsEmbedTokenCountry = "IR"
	CreateReferralsEmbedTokenCountryIq CreateReferralsEmbedTokenCountry = "IQ"
	CreateReferralsEmbedTokenCountryIe CreateReferralsEmbedTokenCountry = "IE"
	CreateReferralsEmbedTokenCountryIl CreateReferralsEmbedTokenCountry = "IL"
	CreateReferralsEmbedTokenCountryIt CreateReferralsEmbedTokenCountry = "IT"
	CreateReferralsEmbedTokenCountryJm CreateReferralsEmbedTokenCountry = "JM"
	CreateReferralsEmbedTokenCountryJp CreateReferralsEmbedTokenCountry = "JP"
	CreateReferralsEmbedTokenCountryJo CreateReferralsEmbedTokenCountry = "JO"
	CreateReferralsEmbedTokenCountryKz CreateReferralsEmbedTokenCountry = "KZ"
	CreateReferralsEmbedTokenCountryKe CreateReferralsEmbedTokenCountry = "KE"
	CreateReferralsEmbedTokenCountryKi CreateReferralsEmbedTokenCountry = "KI"
	CreateReferralsEmbedTokenCountryKp CreateReferralsEmbedTokenCountry = "KP"
	CreateReferralsEmbedTokenCountryKr CreateReferralsEmbedTokenCountry = "KR"
	CreateReferralsEmbedTokenCountryKw CreateReferralsEmbedTokenCountry = "KW"
	CreateReferralsEmbedTokenCountryKg CreateReferralsEmbedTokenCountry = "KG"
	CreateReferralsEmbedTokenCountryLa CreateReferralsEmbedTokenCountry = "LA"
	CreateReferralsEmbedTokenCountryLv CreateReferralsEmbedTokenCountry = "LV"
	CreateReferralsEmbedTokenCountryLb CreateReferralsEmbedTokenCountry = "LB"
	CreateReferralsEmbedTokenCountryLs CreateReferralsEmbedTokenCountry = "LS"
	CreateReferralsEmbedTokenCountryLr CreateReferralsEmbedTokenCountry = "LR"
	CreateReferralsEmbedTokenCountryLy CreateReferralsEmbedTokenCountry = "LY"
	CreateReferralsEmbedTokenCountryLi CreateReferralsEmbedTokenCountry = "LI"
	CreateReferralsEmbedTokenCountryLt CreateReferralsEmbedTokenCountry = "LT"
	CreateReferralsEmbedTokenCountryLu CreateReferralsEmbedTokenCountry = "LU"
	CreateReferralsEmbedTokenCountryMo CreateReferralsEmbedTokenCountry = "MO"
	CreateReferralsEmbedTokenCountryMg CreateReferralsEmbedTokenCountry = "MG"
	CreateReferralsEmbedTokenCountryMw CreateReferralsEmbedTokenCountry = "MW"
	CreateReferralsEmbedTokenCountryMy CreateReferralsEmbedTokenCountry = "MY"
	CreateReferralsEmbedTokenCountryMv CreateReferralsEmbedTokenCountry = "MV"
	CreateReferralsEmbedTokenCountryMl CreateReferralsEmbedTokenCountry = "ML"
	CreateReferralsEmbedTokenCountryMt CreateReferralsEmbedTokenCountry = "MT"
	CreateReferralsEmbedTokenCountryMh CreateReferralsEmbedTokenCountry = "MH"
	CreateReferralsEmbedTokenCountryMq CreateReferralsEmbedTokenCountry = "MQ"
	CreateReferralsEmbedTokenCountryMr CreateReferralsEmbedTokenCountry = "MR"
	CreateReferralsEmbedTokenCountryMu CreateReferralsEmbedTokenCountry = "MU"
	CreateReferralsEmbedTokenCountryYt CreateReferralsEmbedTokenCountry = "YT"
	CreateReferralsEmbedTokenCountryMx CreateReferralsEmbedTokenCountry = "MX"
	CreateReferralsEmbedTokenCountryFm CreateReferralsEmbedTokenCountry = "FM"
	CreateReferralsEmbedTokenCountryMd CreateReferralsEmbedTokenCountry = "MD"
	CreateReferralsEmbedTokenCountryMc CreateReferralsEmbedTokenCountry = "MC"
	CreateReferralsEmbedTokenCountryMn CreateReferralsEmbedTokenCountry = "MN"
	CreateReferralsEmbedTokenCountryMs CreateReferralsEmbedTokenCountry = "MS"
	CreateReferralsEmbedTokenCountryMa CreateReferralsEmbedTokenCountry = "MA"
	CreateReferralsEmbedTokenCountryMz CreateReferralsEmbedTokenCountry = "MZ"
	CreateReferralsEmbedTokenCountryMm CreateReferralsEmbedTokenCountry = "MM"
	CreateReferralsEmbedTokenCountryNa CreateReferralsEmbedTokenCountry = "NA"
	CreateReferralsEmbedTokenCountryNr CreateReferralsEmbedTokenCountry = "NR"
	CreateReferralsEmbedTokenCountryNp CreateReferralsEmbedTokenCountry = "NP"
	CreateReferralsEmbedTokenCountryNl CreateReferralsEmbedTokenCountry = "NL"
	CreateReferralsEmbedTokenCountryNc CreateReferralsEmbedTokenCountry = "NC"
	CreateReferralsEmbedTokenCountryNz CreateReferralsEmbedTokenCountry = "NZ"
	CreateReferralsEmbedTokenCountryNi CreateReferralsEmbedTokenCountry = "NI"
	CreateReferralsEmbedTokenCountryNe CreateReferralsEmbedTokenCountry = "NE"
	CreateReferralsEmbedTokenCountryNg CreateReferralsEmbedTokenCountry = "NG"
	CreateReferralsEmbedTokenCountryNu CreateReferralsEmbedTokenCountry = "NU"
	CreateReferralsEmbedTokenCountryNf CreateReferralsEmbedTokenCountry = "NF"
	CreateReferralsEmbedTokenCountryMk CreateReferralsEmbedTokenCountry = "MK"
	CreateReferralsEmbedTokenCountryMp CreateReferralsEmbedTokenCountry = "MP"
	CreateReferralsEmbedTokenCountryNo CreateReferralsEmbedTokenCountry = "NO"
	CreateReferralsEmbedTokenCountryOm CreateReferralsEmbedTokenCountry = "OM"
	CreateReferralsEmbedTokenCountryPk CreateReferralsEmbedTokenCountry = "PK"
	CreateReferralsEmbedTokenCountryPw CreateReferralsEmbedTokenCountry = "PW"
	CreateReferralsEmbedTokenCountryPs CreateReferralsEmbedTokenCountry = "PS"
	CreateReferralsEmbedTokenCountryPa CreateReferralsEmbedTokenCountry = "PA"
	CreateReferralsEmbedTokenCountryPg CreateReferralsEmbedTokenCountry = "PG"
	CreateReferralsEmbedTokenCountryPy CreateReferralsEmbedTokenCountry = "PY"
	CreateReferralsEmbedTokenCountryPe CreateReferralsEmbedTokenCountry = "PE"
	CreateReferralsEmbedTokenCountryPh CreateReferralsEmbedTokenCountry = "PH"
	CreateReferralsEmbedTokenCountryPn CreateReferralsEmbedTokenCountry = "PN"
	CreateReferralsEmbedTokenCountryPl CreateReferralsEmbedTokenCountry = "PL"
	CreateReferralsEmbedTokenCountryPt CreateReferralsEmbedTokenCountry = "PT"
	CreateReferralsEmbedTokenCountryPr CreateReferralsEmbedTokenCountry = "PR"
	CreateReferralsEmbedTokenCountryQa CreateReferralsEmbedTokenCountry = "QA"
	CreateReferralsEmbedTokenCountryRe CreateReferralsEmbedTokenCountry = "RE"
	CreateReferralsEmbedTokenCountryRo CreateReferralsEmbedTokenCountry = "RO"
	CreateReferralsEmbedTokenCountryRu CreateReferralsEmbedTokenCountry = "RU"
	CreateReferralsEmbedTokenCountryRw CreateReferralsEmbedTokenCountry = "RW"
	CreateReferralsEmbedTokenCountrySh CreateReferralsEmbedTokenCountry = "SH"
	CreateReferralsEmbedTokenCountryKn CreateReferralsEmbedTokenCountry = "KN"
	CreateReferralsEmbedTokenCountryLc CreateReferralsEmbedTokenCountry = "LC"
	CreateReferralsEmbedTokenCountryPm CreateReferralsEmbedTokenCountry = "PM"
	CreateReferralsEmbedTokenCountryVc CreateReferralsEmbedTokenCountry = "VC"
	CreateReferralsEmbedTokenCountryWs CreateReferralsEmbedTokenCountry = "WS"
	CreateReferralsEmbedTokenCountrySm CreateReferralsEmbedTokenCountry = "SM"
	CreateReferralsEmbedTokenCountrySt CreateReferralsEmbedTokenCountry = "ST"
	CreateReferralsEmbedTokenCountrySa CreateReferralsEmbedTokenCountry = "SA"
	CreateReferralsEmbedTokenCountrySn CreateReferralsEmbedTokenCountry = "SN"
	CreateReferralsEmbedTokenCountrySc CreateReferralsEmbedTokenCountry = "SC"
	CreateReferralsEmbedTokenCountrySl CreateReferralsEmbedTokenCountry = "SL"
	CreateReferralsEmbedTokenCountrySg CreateReferralsEmbedTokenCountry = "SG"
	CreateReferralsEmbedTokenCountrySk CreateReferralsEmbedTokenCountry = "SK"
	CreateReferralsEmbedTokenCountrySi CreateReferralsEmbedTokenCountry = "SI"
	CreateReferralsEmbedTokenCountrySb CreateReferralsEmbedTokenCountry = "SB"
	CreateReferralsEmbedTokenCountrySo CreateReferralsEmbedTokenCountry = "SO"
	CreateReferralsEmbedTokenCountryZa CreateReferralsEmbedTokenCountry = "ZA"
	CreateReferralsEmbedTokenCountryGs CreateReferralsEmbedTokenCountry = "GS"
	CreateReferralsEmbedTokenCountryEs CreateReferralsEmbedTokenCountry = "ES"
	CreateReferralsEmbedTokenCountryLk CreateReferralsEmbedTokenCountry = "LK"
	CreateReferralsEmbedTokenCountrySd CreateReferralsEmbedTokenCountry = "SD"
	CreateReferralsEmbedTokenCountrySr CreateReferralsEmbedTokenCountry = "SR"
	CreateReferralsEmbedTokenCountrySj CreateReferralsEmbedTokenCountry = "SJ"
	CreateReferralsEmbedTokenCountrySz CreateReferralsEmbedTokenCountry = "SZ"
	CreateReferralsEmbedTokenCountrySe CreateReferralsEmbedTokenCountry = "SE"
	CreateReferralsEmbedTokenCountryCh CreateReferralsEmbedTokenCountry = "CH"
	CreateReferralsEmbedTokenCountrySy CreateReferralsEmbedTokenCountry = "SY"
	CreateReferralsEmbedTokenCountryTw CreateReferralsEmbedTokenCountry = "TW"
	CreateReferralsEmbedTokenCountryTj CreateReferralsEmbedTokenCountry = "TJ"
	CreateReferralsEmbedTokenCountryTz CreateReferralsEmbedTokenCountry = "TZ"
	CreateReferralsEmbedTokenCountryTh CreateReferralsEmbedTokenCountry = "TH"
	CreateReferralsEmbedTokenCountryTl CreateReferralsEmbedTokenCountry = "TL"
	CreateReferralsEmbedTokenCountryTg CreateReferralsEmbedTokenCountry = "TG"
	CreateReferralsEmbedTokenCountryTk CreateReferralsEmbedTokenCountry = "TK"
	CreateReferralsEmbedTokenCountryTo CreateReferralsEmbedTokenCountry = "TO"
	CreateReferralsEmbedTokenCountryTt CreateReferralsEmbedTokenCountry = "TT"
	CreateReferralsEmbedTokenCountryTn CreateReferralsEmbedTokenCountry = "TN"
	CreateReferralsEmbedTokenCountryTr CreateReferralsEmbedTokenCountry = "TR"
	CreateReferralsEmbedTokenCountryTm CreateReferralsEmbedTokenCountry = "TM"
	CreateReferralsEmbedTokenCountryTc CreateReferralsEmbedTokenCountry = "TC"
	CreateReferralsEmbedTokenCountryTv CreateReferralsEmbedTokenCountry = "TV"
	CreateReferralsEmbedTokenCountryUg CreateReferralsEmbedTokenCountry = "UG"
	CreateReferralsEmbedTokenCountryUa CreateReferralsEmbedTokenCountry = "UA"
	CreateReferralsEmbedTokenCountryAe CreateReferralsEmbedTokenCountry = "AE"
	CreateReferralsEmbedTokenCountryGb CreateReferralsEmbedTokenCountry = "GB"
	CreateReferralsEmbedTokenCountryUs CreateReferralsEmbedTokenCountry = "US"
	CreateReferralsEmbedTokenCountryUm CreateReferralsEmbedTokenCountry = "UM"
	CreateReferralsEmbedTokenCountryUy CreateReferralsEmbedTokenCountry = "UY"
	CreateReferralsEmbedTokenCountryUz CreateReferralsEmbedTokenCountry = "UZ"
	CreateReferralsEmbedTokenCountryVu CreateReferralsEmbedTokenCountry = "VU"
	CreateReferralsEmbedTokenCountryVe CreateReferralsEmbedTokenCountry = "VE"
	CreateReferralsEmbedTokenCountryVn CreateReferralsEmbedTokenCountry = "VN"
	CreateReferralsEmbedTokenCountryVg CreateReferralsEmbedTokenCountry = "VG"
	CreateReferralsEmbedTokenCountryVi CreateReferralsEmbedTokenCountry = "VI"
	CreateReferralsEmbedTokenCountryWf CreateReferralsEmbedTokenCountry = "WF"
	CreateReferralsEmbedTokenCountryEh CreateReferralsEmbedTokenCountry = "EH"
	CreateReferralsEmbedTokenCountryYe CreateReferralsEmbedTokenCountry = "YE"
	CreateReferralsEmbedTokenCountryZm CreateReferralsEmbedTokenCountry = "ZM"
	CreateReferralsEmbedTokenCountryZw CreateReferralsEmbedTokenCountry = "ZW"
	CreateReferralsEmbedTokenCountryAx CreateReferralsEmbedTokenCountry = "AX"
	CreateReferralsEmbedTokenCountryBq CreateReferralsEmbedTokenCountry = "BQ"
	CreateReferralsEmbedTokenCountryCw CreateReferralsEmbedTokenCountry = "CW"
	CreateReferralsEmbedTokenCountryGg CreateReferralsEmbedTokenCountry = "GG"
	CreateReferralsEmbedTokenCountryIm CreateReferralsEmbedTokenCountry = "IM"
	CreateReferralsEmbedTokenCountryJe CreateReferralsEmbedTokenCountry = "JE"
	CreateReferralsEmbedTokenCountryMe CreateReferralsEmbedTokenCountry = "ME"
	CreateReferralsEmbedTokenCountryBl CreateReferralsEmbedTokenCountry = "BL"
	CreateReferralsEmbedTokenCountryMf CreateReferralsEmbedTokenCountry = "MF"
	CreateReferralsEmbedTokenCountryRs CreateReferralsEmbedTokenCountry = "RS"
	CreateReferralsEmbedTokenCountrySx CreateReferralsEmbedTokenCountry = "SX"
	CreateReferralsEmbedTokenCountrySs CreateReferralsEmbedTokenCountry = "SS"
	CreateReferralsEmbedTokenCountryXk CreateReferralsEmbedTokenCountry = "XK"
)

func (e CreateReferralsEmbedTokenCountry) ToPointer() *CreateReferralsEmbedTokenCountry {
	return &e
}
func (e *CreateReferralsEmbedTokenCountry) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AF":
		fallthrough
	case "AL":
		fallthrough
	case "DZ":
		fallthrough
	case "AS":
		fallthrough
	case "AD":
		fallthrough
	case "AO":
		fallthrough
	case "AI":
		fallthrough
	case "AQ":
		fallthrough
	case "AG":
		fallthrough
	case "AR":
		fallthrough
	case "AM":
		fallthrough
	case "AW":
		fallthrough
	case "AU":
		fallthrough
	case "AT":
		fallthrough
	case "AZ":
		fallthrough
	case "BS":
		fallthrough
	case "BH":
		fallthrough
	case "BD":
		fallthrough
	case "BB":
		fallthrough
	case "BY":
		fallthrough
	case "BE":
		fallthrough
	case "BZ":
		fallthrough
	case "BJ":
		fallthrough
	case "BM":
		fallthrough
	case "BT":
		fallthrough
	case "BO":
		fallthrough
	case "BA":
		fallthrough
	case "BW":
		fallthrough
	case "BV":
		fallthrough
	case "BR":
		fallthrough
	case "IO":
		fallthrough
	case "BN":
		fallthrough
	case "BG":
		fallthrough
	case "BF":
		fallthrough
	case "BI":
		fallthrough
	case "KH":
		fallthrough
	case "CM":
		fallthrough
	case "CA":
		fallthrough
	case "CV":
		fallthrough
	case "KY":
		fallthrough
	case "CF":
		fallthrough
	case "TD":
		fallthrough
	case "CL":
		fallthrough
	case "CN":
		fallthrough
	case "CX":
		fallthrough
	case "CC":
		fallthrough
	case "CO":
		fallthrough
	case "KM":
		fallthrough
	case "CG":
		fallthrough
	case "CD":
		fallthrough
	case "CK":
		fallthrough
	case "CR":
		fallthrough
	case "CI":
		fallthrough
	case "HR":
		fallthrough
	case "CU":
		fallthrough
	case "CY":
		fallthrough
	case "CZ":
		fallthrough
	case "DK":
		fallthrough
	case "DJ":
		fallthrough
	case "DM":
		fallthrough
	case "DO":
		fallthrough
	case "EC":
		fallthrough
	case "EG":
		fallthrough
	case "SV":
		fallthrough
	case "GQ":
		fallthrough
	case "ER":
		fallthrough
	case "EE":
		fallthrough
	case "ET":
		fallthrough
	case "FK":
		fallthrough
	case "FO":
		fallthrough
	case "FJ":
		fallthrough
	case "FI":
		fallthrough
	case "FR":
		fallthrough
	case "GF":
		fallthrough
	case "PF":
		fallthrough
	case "TF":
		fallthrough
	case "GA":
		fallthrough
	case "GM":
		fallthrough
	case "GE":
		fallthrough
	case "DE":
		fallthrough
	case "GH":
		fallthrough
	case "GI":
		fallthrough
	case "GR":
		fallthrough
	case "GL":
		fallthrough
	case "GD":
		fallthrough
	case "GP":
		fallthrough
	case "GU":
		fallthrough
	case "GT":
		fallthrough
	case "GN":
		fallthrough
	case "GW":
		fallthrough
	case "GY":
		fallthrough
	case "HT":
		fallthrough
	case "HM":
		fallthrough
	case "VA":
		fallthrough
	case "HN":
		fallthrough
	case "HK":
		fallthrough
	case "HU":
		fallthrough
	case "IS":
		fallthrough
	case "IN":
		fallthrough
	case "ID":
		fallthrough
	case "IR":
		fallthrough
	case "IQ":
		fallthrough
	case "IE":
		fallthrough
	case "IL":
		fallthrough
	case "IT":
		fallthrough
	case "JM":
		fallthrough
	case "JP":
		fallthrough
	case "JO":
		fallthrough
	case "KZ":
		fallthrough
	case "KE":
		fallthrough
	case "KI":
		fallthrough
	case "KP":
		fallthrough
	case "KR":
		fallthrough
	case "KW":
		fallthrough
	case "KG":
		fallthrough
	case "LA":
		fallthrough
	case "LV":
		fallthrough
	case "LB":
		fallthrough
	case "LS":
		fallthrough
	case "LR":
		fallthrough
	case "LY":
		fallthrough
	case "LI":
		fallthrough
	case "LT":
		fallthrough
	case "LU":
		fallthrough
	case "MO":
		fallthrough
	case "MG":
		fallthrough
	case "MW":
		fallthrough
	case "MY":
		fallthrough
	case "MV":
		fallthrough
	case "ML":
		fallthrough
	case "MT":
		fallthrough
	case "MH":
		fallthrough
	case "MQ":
		fallthrough
	case "MR":
		fallthrough
	case "MU":
		fallthrough
	case "YT":
		fallthrough
	case "MX":
		fallthrough
	case "FM":
		fallthrough
	case "MD":
		fallthrough
	case "MC":
		fallthrough
	case "MN":
		fallthrough
	case "MS":
		fallthrough
	case "MA":
		fallthrough
	case "MZ":
		fallthrough
	case "MM":
		fallthrough
	case "NA":
		fallthrough
	case "NR":
		fallthrough
	case "NP":
		fallthrough
	case "NL":
		fallthrough
	case "NC":
		fallthrough
	case "NZ":
		fallthrough
	case "NI":
		fallthrough
	case "NE":
		fallthrough
	case "NG":
		fallthrough
	case "NU":
		fallthrough
	case "NF":
		fallthrough
	case "MK":
		fallthrough
	case "MP":
		fallthrough
	case "NO":
		fallthrough
	case "OM":
		fallthrough
	case "PK":
		fallthrough
	case "PW":
		fallthrough
	case "PS":
		fallthrough
	case "PA":
		fallthrough
	case "PG":
		fallthrough
	case "PY":
		fallthrough
	case "PE":
		fallthrough
	case "PH":
		fallthrough
	case "PN":
		fallthrough
	case "PL":
		fallthrough
	case "PT":
		fallthrough
	case "PR":
		fallthrough
	case "QA":
		fallthrough
	case "RE":
		fallthrough
	case "RO":
		fallthrough
	case "RU":
		fallthrough
	case "RW":
		fallthrough
	case "SH":
		fallthrough
	case "KN":
		fallthrough
	case "LC":
		fallthrough
	case "PM":
		fallthrough
	case "VC":
		fallthrough
	case "WS":
		fallthrough
	case "SM":
		fallthrough
	case "ST":
		fallthrough
	case "SA":
		fallthrough
	case "SN":
		fallthrough
	case "SC":
		fallthrough
	case "SL":
		fallthrough
	case "SG":
		fallthrough
	case "SK":
		fallthrough
	case "SI":
		fallthrough
	case "SB":
		fallthrough
	case "SO":
		fallthrough
	case "ZA":
		fallthrough
	case "GS":
		fallthrough
	case "ES":
		fallthrough
	case "LK":
		fallthrough
	case "SD":
		fallthrough
	case "SR":
		fallthrough
	case "SJ":
		fallthrough
	case "SZ":
		fallthrough
	case "SE":
		fallthrough
	case "CH":
		fallthrough
	case "SY":
		fallthrough
	case "TW":
		fallthrough
	case "TJ":
		fallthrough
	case "TZ":
		fallthrough
	case "TH":
		fallthrough
	case "TL":
		fallthrough
	case "TG":
		fallthrough
	case "TK":
		fallthrough
	case "TO":
		fallthrough
	case "TT":
		fallthrough
	case "TN":
		fallthrough
	case "TR":
		fallthrough
	case "TM":
		fallthrough
	case "TC":
		fallthrough
	case "TV":
		fallthrough
	case "UG":
		fallthrough
	case "UA":
		fallthrough
	case "AE":
		fallthrough
	case "GB":
		fallthrough
	case "US":
		fallthrough
	case "UM":
		fallthrough
	case "UY":
		fallthrough
	case "UZ":
		fallthrough
	case "VU":
		fallthrough
	case "VE":
		fallthrough
	case "VN":
		fallthrough
	case "VG":
		fallthrough
	case "VI":
		fallthrough
	case "WF":
		fallthrough
	case "EH":
		fallthrough
	case "YE":
		fallthrough
	case "ZM":
		fallthrough
	case "ZW":
		fallthrough
	case "AX":
		fallthrough
	case "BQ":
		fallthrough
	case "CW":
		fallthrough
	case "GG":
		fallthrough
	case "IM":
		fallthrough
	case "JE":
		fallthrough
	case "ME":
		fallthrough
	case "BL":
		fallthrough
	case "MF":
		fallthrough
	case "RS":
		fallthrough
	case "SX":
		fallthrough
	case "SS":
		fallthrough
	case "XK":
		*e = CreateReferralsEmbedTokenCountry(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateReferralsEmbedTokenCountry: %v", v)
	}
}

type CreateReferralsEmbedTokenTagIdsType string

const (
	CreateReferralsEmbedTokenTagIdsTypeStr        CreateReferralsEmbedTokenTagIdsType = "str"
	CreateReferralsEmbedTokenTagIdsTypeArrayOfStr CreateReferralsEmbedTokenTagIdsType = "arrayOfStr"
)

// CreateReferralsEmbedTokenTagIds - The unique IDs of the tags assigned to the short link.
type CreateReferralsEmbedTokenTagIds struct {
	Str        *string
	ArrayOfStr []string

	Type CreateReferralsEmbedTokenTagIdsType
}

func CreateCreateReferralsEmbedTokenTagIdsStr(str string) CreateReferralsEmbedTokenTagIds {
	typ := CreateReferralsEmbedTokenTagIdsTypeStr

	return CreateReferralsEmbedTokenTagIds{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateReferralsEmbedTokenTagIdsArrayOfStr(arrayOfStr []string) CreateReferralsEmbedTokenTagIds {
	typ := CreateReferralsEmbedTokenTagIdsTypeArrayOfStr

	return CreateReferralsEmbedTokenTagIds{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreateReferralsEmbedTokenTagIds) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateReferralsEmbedTokenTagIdsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreateReferralsEmbedTokenTagIdsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateReferralsEmbedTokenTagIds", string(data))
}

func (u CreateReferralsEmbedTokenTagIds) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreateReferralsEmbedTokenTagIds: all fields are null")
}

type CreateReferralsEmbedTokenTagNamesType string

const (
	CreateReferralsEmbedTokenTagNamesTypeStr        CreateReferralsEmbedTokenTagNamesType = "str"
	CreateReferralsEmbedTokenTagNamesTypeArrayOfStr CreateReferralsEmbedTokenTagNamesType = "arrayOfStr"
)

// CreateReferralsEmbedTokenTagNames - The unique name of the tags assigned to the short link (case insensitive).
type CreateReferralsEmbedTokenTagNames struct {
	Str        *string
	ArrayOfStr []string

	Type CreateReferralsEmbedTokenTagNamesType
}

func CreateCreateReferralsEmbedTokenTagNamesStr(str string) CreateReferralsEmbedTokenTagNames {
	typ := CreateReferralsEmbedTokenTagNamesTypeStr

	return CreateReferralsEmbedTokenTagNames{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateReferralsEmbedTokenTagNamesArrayOfStr(arrayOfStr []string) CreateReferralsEmbedTokenTagNames {
	typ := CreateReferralsEmbedTokenTagNamesTypeArrayOfStr

	return CreateReferralsEmbedTokenTagNames{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreateReferralsEmbedTokenTagNames) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateReferralsEmbedTokenTagNamesTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreateReferralsEmbedTokenTagNamesTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateReferralsEmbedTokenTagNames", string(data))
}

func (u CreateReferralsEmbedTokenTagNames) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreateReferralsEmbedTokenTagNames: all fields are null")
}

type CreateReferralsEmbedTokenTestVariants struct {
	URL        string  `json:"url"`
	Percentage float64 `json:"percentage"`
}

func (o *CreateReferralsEmbedTokenTestVariants) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateReferralsEmbedTokenTestVariants) GetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Percentage
}

// CreateReferralsEmbedTokenLinkProps - Additional properties that you can pass to the partner's short link. Will be used to override the default link properties for this partner.
type CreateReferralsEmbedTokenLinkProps struct {
	// The ID of the link in your database. If set, it can be used to identify the link in future API requests (must be prefixed with 'ext_' when passed as a query parameter). This key is unique across your workspace.
	ExternalID *string `json:"externalId,omitempty"`
	// The ID of the tenant that created the link inside your system. If set, it can be used to fetch all links for a tenant.
	TenantID *string `json:"tenantId,omitempty"`
	// The prefix of the short link slug for randomly-generated keys (e.g. if prefix is `/c/`, generated keys will be in the `/c/:key` format). Will be ignored if `key` is provided.
	Prefix *string `json:"prefix,omitempty"`
	// Whether the short link is archived. Defaults to `false` if not provided.
	Archived *bool `json:"archived,omitempty"`
	// The unique IDs of the tags assigned to the short link.
	TagIds *CreateReferralsEmbedTokenTagIds `json:"tagIds,omitempty"`
	// The unique name of the tags assigned to the short link (case insensitive).
	TagNames *CreateReferralsEmbedTokenTagNames `json:"tagNames,omitempty"`
	// The unique ID existing folder to assign the short link to.
	FolderID *string `json:"folderId,omitempty"`
	// The comments for the short link.
	Comments *string `json:"comments,omitempty"`
	// The date and time when the short link will expire at.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// The URL to redirect to when the short link has expired.
	ExpiredURL *string `json:"expiredUrl,omitempty"`
	// The password required to access the destination URL of the short link.
	Password *string `json:"password,omitempty"`
	// Whether the short link uses Custom Social Media Cards feature. Defaults to `false` if not provided.
	Proxy *bool `json:"proxy,omitempty"`
	// The custom link preview title (og:title). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
	Title *string `json:"title,omitempty"`
	// The custom link preview description (og:description). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
	Description *string `json:"description,omitempty"`
	// The custom link preview image (og:image). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
	Image *string `json:"image,omitempty"`
	// The custom link preview video (og:video). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
	Video *string `json:"video,omitempty"`
	// Whether the short link uses link cloaking. Defaults to `false` if not provided.
	Rewrite *bool `json:"rewrite,omitempty"`
	// The iOS destination URL for the short link for iOS device targeting.
	Ios *string `json:"ios,omitempty"`
	// The Android destination URL for the short link for Android device targeting.
	Android *string `json:"android,omitempty"`
	// Allow search engines to index your short link. Defaults to `false` if not provided. Learn more: https://d.to/noindex
	DoIndex *bool `json:"doIndex,omitempty"`
	// The UTM source of the short link. If set, this will populate or override the UTM source in the destination URL.
	UtmSource *string `json:"utm_source,omitempty"`
	// The UTM medium of the short link. If set, this will populate or override the UTM medium in the destination URL.
	UtmMedium *string `json:"utm_medium,omitempty"`
	// The UTM campaign of the short link. If set, this will populate or override the UTM campaign in the destination URL.
	UtmCampaign *string `json:"utm_campaign,omitempty"`
	// The UTM term of the short link. If set, this will populate or override the UTM term in the destination URL.
	UtmTerm *string `json:"utm_term,omitempty"`
	// The UTM content of the short link. If set, this will populate or override the UTM content in the destination URL.
	UtmContent *string `json:"utm_content,omitempty"`
	// The referral tag of the short link. If set, this will populate or override the `ref` query parameter in the destination URL.
	Ref *string `json:"ref,omitempty"`
	// An array of A/B test URLs and the percentage of traffic to send to each URL.
	TestVariants []CreateReferralsEmbedTokenTestVariants `json:"testVariants,omitempty"`
	// The date and time when the tests started.
	TestStartedAt *string `json:"testStartedAt,omitempty"`
	// The date and time when the tests were or will be completed.
	TestCompletedAt *string `json:"testCompletedAt,omitempty"`
}

func (o *CreateReferralsEmbedTokenLinkProps) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *CreateReferralsEmbedTokenLinkProps) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *CreateReferralsEmbedTokenLinkProps) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *CreateReferralsEmbedTokenLinkProps) GetArchived() *bool {
	if o == nil {
		return nil
	}
	return o.Archived
}

func (o *CreateReferralsEmbedTokenLinkProps) GetTagIds() *CreateReferralsEmbedTokenTagIds {
	if o == nil {
		return nil
	}
	return o.TagIds
}

func (o *CreateReferralsEmbedTokenLinkProps) GetTagNames() *CreateReferralsEmbedTokenTagNames {
	if o == nil {
		return nil
	}
	return o.TagNames
}

func (o *CreateReferralsEmbedTokenLinkProps) GetFolderID() *string {
	if o == nil {
		return nil
	}
	return o.FolderID
}

func (o *CreateReferralsEmbedTokenLinkProps) GetComments() *string {
	if o == nil {
		return nil
	}
	return o.Comments
}

func (o *CreateReferralsEmbedTokenLinkProps) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *CreateReferralsEmbedTokenLinkProps) GetExpiredURL() *string {
	if o == nil {
		return nil
	}
	return o.ExpiredURL
}

func (o *CreateReferralsEmbedTokenLinkProps) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *CreateReferralsEmbedTokenLinkProps) GetProxy() *bool {
	if o == nil {
		return nil
	}
	return o.Proxy
}

func (o *CreateReferralsEmbedTokenLinkProps) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *CreateReferralsEmbedTokenLinkProps) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateReferralsEmbedTokenLinkProps) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *CreateReferralsEmbedTokenLinkProps) GetVideo() *string {
	if o == nil {
		return nil
	}
	return o.Video
}

func (o *CreateReferralsEmbedTokenLinkProps) GetRewrite() *bool {
	if o == nil {
		return nil
	}
	return o.Rewrite
}

func (o *CreateReferralsEmbedTokenLinkProps) GetIos() *string {
	if o == nil {
		return nil
	}
	return o.Ios
}

func (o *CreateReferralsEmbedTokenLinkProps) GetAndroid() *string {
	if o == nil {
		return nil
	}
	return o.Android
}

func (o *CreateReferralsEmbedTokenLinkProps) GetDoIndex() *bool {
	if o == nil {
		return nil
	}
	return o.DoIndex
}

func (o *CreateReferralsEmbedTokenLinkProps) GetUtmSource() *string {
	if o == nil {
		return nil
	}
	return o.UtmSource
}

func (o *CreateReferralsEmbedTokenLinkProps) GetUtmMedium() *string {
	if o == nil {
		return nil
	}
	return o.UtmMedium
}

func (o *CreateReferralsEmbedTokenLinkProps) GetUtmCampaign() *string {
	if o == nil {
		return nil
	}
	return o.UtmCampaign
}

func (o *CreateReferralsEmbedTokenLinkProps) GetUtmTerm() *string {
	if o == nil {
		return nil
	}
	return o.UtmTerm
}

func (o *CreateReferralsEmbedTokenLinkProps) GetUtmContent() *string {
	if o == nil {
		return nil
	}
	return o.UtmContent
}

func (o *CreateReferralsEmbedTokenLinkProps) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CreateReferralsEmbedTokenLinkProps) GetTestVariants() []CreateReferralsEmbedTokenTestVariants {
	if o == nil {
		return nil
	}
	return o.TestVariants
}

func (o *CreateReferralsEmbedTokenLinkProps) GetTestStartedAt() *string {
	if o == nil {
		return nil
	}
	return o.TestStartedAt
}

func (o *CreateReferralsEmbedTokenLinkProps) GetTestCompletedAt() *string {
	if o == nil {
		return nil
	}
	return o.TestCompletedAt
}

type Partner struct {
	// Full legal name of the partner.
	Name string `json:"name"`
	// Email for the partner in your system. Partners will be able to claim their profile by signing up to Dub Partners with this email.
	Email string `json:"email"`
	// A unique username for the partner in your system (max 100 characters). This will be used to create a short link for the partner using your program's default domain. If not provided, Dub will try to generate a username from the partner's name or email.
	Username *string `json:"username,omitempty"`
	// Avatar image for the partner – if not provided, a default avatar will be used.
	Image *string `json:"image,omitempty"`
	// Country where the partner is based.
	Country *CreateReferralsEmbedTokenCountry `json:"country,omitempty"`
	// A brief description of the partner and their background.
	Description *string `json:"description,omitempty"`
	// The ID of the partner in your system.
	TenantID *string `json:"tenantId,omitempty"`
	// Additional properties that you can pass to the partner's short link. Will be used to override the default link properties for this partner.
	LinkProps *CreateReferralsEmbedTokenLinkProps `json:"linkProps,omitempty"`
}

func (o *Partner) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Partner) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *Partner) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *Partner) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *Partner) GetCountry() *CreateReferralsEmbedTokenCountry {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *Partner) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Partner) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *Partner) GetLinkProps() *CreateReferralsEmbedTokenLinkProps {
	if o == nil {
		return nil
	}
	return o.LinkProps
}

type CreateReferralsEmbedTokenRequestBody struct {
	ProgramID string   `json:"programId"`
	PartnerID *string  `json:"partnerId,omitempty"`
	TenantID  *string  `json:"tenantId,omitempty"`
	Partner   *Partner `json:"partner,omitempty"`
}

func (o *CreateReferralsEmbedTokenRequestBody) GetProgramID() string {
	if o == nil {
		return ""
	}
	return o.ProgramID
}

func (o *CreateReferralsEmbedTokenRequestBody) GetPartnerID() *string {
	if o == nil {
		return nil
	}
	return o.PartnerID
}

func (o *CreateReferralsEmbedTokenRequestBody) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *CreateReferralsEmbedTokenRequestBody) GetPartner() *Partner {
	if o == nil {
		return nil
	}
	return o.Partner
}

// CreateReferralsEmbedTokenResponseBody - The created public embed token.
type CreateReferralsEmbedTokenResponseBody struct {
	PublicToken string `json:"publicToken"`
	Expires     string `json:"expires"`
}

func (o *CreateReferralsEmbedTokenResponseBody) GetPublicToken() string {
	if o == nil {
		return ""
	}
	return o.PublicToken
}

func (o *CreateReferralsEmbedTokenResponseBody) GetExpires() string {
	if o == nil {
		return ""
	}
	return o.Expires
}

type CreateReferralsEmbedTokenResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The created public embed token.
	Object *CreateReferralsEmbedTokenResponseBody
}

func (o *CreateReferralsEmbedTokenResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateReferralsEmbedTokenResponse) GetObject() *CreateReferralsEmbedTokenResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
