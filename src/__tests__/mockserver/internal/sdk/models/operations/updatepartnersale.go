// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type UpdatePartnerSaleRequestBody struct {
	ProgramID string `json:"programId"`
	InvoiceID string `json:"invoiceId"`
	// The new absolute amount for the sale.
	Amount *float64 `json:"amount,omitempty"`
	// Modify the current sale amount: use positive values to increase the amount, negative values to decrease it.
	ModifyAmount *float64 `json:"modifyAmount,omitempty"`
	// The currency of the sale amount to update. Accepts ISO 4217 currency codes.
	Currency *string `default:"usd" json:"currency"`
}

func (u UpdatePartnerSaleRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdatePartnerSaleRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdatePartnerSaleRequestBody) GetProgramID() string {
	if o == nil {
		return ""
	}
	return o.ProgramID
}

func (o *UpdatePartnerSaleRequestBody) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *UpdatePartnerSaleRequestBody) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *UpdatePartnerSaleRequestBody) GetModifyAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.ModifyAmount
}

func (o *UpdatePartnerSaleRequestBody) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

type Type string

const (
	TypeClick Type = "click"
	TypeLead  Type = "lead"
	TypeSale  Type = "sale"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "click":
		fallthrough
	case "lead":
		fallthrough
	case "sale":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type UpdatePartnerSaleStatus string

const (
	UpdatePartnerSaleStatusPending   UpdatePartnerSaleStatus = "pending"
	UpdatePartnerSaleStatusProcessed UpdatePartnerSaleStatus = "processed"
	UpdatePartnerSaleStatusPaid      UpdatePartnerSaleStatus = "paid"
	UpdatePartnerSaleStatusRefunded  UpdatePartnerSaleStatus = "refunded"
	UpdatePartnerSaleStatusDuplicate UpdatePartnerSaleStatus = "duplicate"
	UpdatePartnerSaleStatusFraud     UpdatePartnerSaleStatus = "fraud"
	UpdatePartnerSaleStatusCanceled  UpdatePartnerSaleStatus = "canceled"
)

func (e UpdatePartnerSaleStatus) ToPointer() *UpdatePartnerSaleStatus {
	return &e
}
func (e *UpdatePartnerSaleStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "processed":
		fallthrough
	case "paid":
		fallthrough
	case "refunded":
		fallthrough
	case "duplicate":
		fallthrough
	case "fraud":
		fallthrough
	case "canceled":
		*e = UpdatePartnerSaleStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePartnerSaleStatus: %v", v)
	}
}

// UpdatePartnerSaleResponseBody - The updated sale.
type UpdatePartnerSaleResponseBody struct {
	ID        string                  `json:"id"`
	Type      *Type                   `json:"type,omitempty"`
	Amount    float64                 `json:"amount"`
	Earnings  float64                 `json:"earnings"`
	Currency  string                  `json:"currency"`
	Status    UpdatePartnerSaleStatus `json:"status"`
	InvoiceID *string                 `json:"invoiceId,omitempty"`
	CreatedAt string                  `json:"createdAt"`
	UpdatedAt string                  `json:"updatedAt"`
}

func (o *UpdatePartnerSaleResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdatePartnerSaleResponseBody) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdatePartnerSaleResponseBody) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *UpdatePartnerSaleResponseBody) GetEarnings() float64 {
	if o == nil {
		return 0.0
	}
	return o.Earnings
}

func (o *UpdatePartnerSaleResponseBody) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePartnerSaleResponseBody) GetStatus() UpdatePartnerSaleStatus {
	if o == nil {
		return UpdatePartnerSaleStatus("")
	}
	return o.Status
}

func (o *UpdatePartnerSaleResponseBody) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

func (o *UpdatePartnerSaleResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *UpdatePartnerSaleResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

type UpdatePartnerSaleResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The updated sale.
	Object *UpdatePartnerSaleResponseBody
}

func (o *UpdatePartnerSaleResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdatePartnerSaleResponse) GetObject() *UpdatePartnerSaleResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
