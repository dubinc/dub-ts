// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// Mode - The mode to use for tracking the lead event. `async` will not block the request; `wait` will block the request until the lead event is fully recorded in Dub.
type Mode string

const (
	ModeAsync Mode = "async"
	ModeWait  Mode = "wait"
)

func (e Mode) ToPointer() *Mode {
	return &e
}
func (e *Mode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "async":
		fallthrough
	case "wait":
		*e = Mode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mode: %v", v)
	}
}

type TrackLeadRequestBody struct {
	// The unique ID of the click that the lead conversion event is attributed to. You can read this value from `dub_id` cookie.
	ClickID string `json:"clickId"`
	// The name of the lead event to track. Can also be used as a unique identifier to associate a given lead event for a customer for a subsequent sale event (via the `leadEventName` prop in `/track/sale`).
	EventName string `json:"eventName"`
	// The numerical value associated with this lead event (e.g., number of provisioned seats in a free trial). If defined as N, the lead event will be tracked N times.
	EventQuantity *float64 `json:"eventQuantity,omitempty"`
	// The unique ID of the customer in your system. Will be used to identify and attribute all future events to this customer.
	ExternalID string `json:"externalId"`
	// The name of the customer. If not passed, a random name will be generated (e.g. “Big Red Caribou”).
	CustomerName *string `default:"null" json:"customerName"`
	// The email address of the customer.
	CustomerEmail *string `default:"null" json:"customerEmail"`
	// The avatar URL of the customer.
	CustomerAvatar *string `default:"null" json:"customerAvatar"`
	// The mode to use for tracking the lead event. `async` will not block the request; `wait` will block the request until the lead event is fully recorded in Dub.
	Mode *Mode `default:"async" json:"mode"`
	// Additional metadata to be stored with the lead event. Max 10,000 characters.
	Metadata map[string]any `json:"metadata,omitempty"`
}

func (t TrackLeadRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TrackLeadRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TrackLeadRequestBody) GetClickID() string {
	if o == nil {
		return ""
	}
	return o.ClickID
}

func (o *TrackLeadRequestBody) GetEventName() string {
	if o == nil {
		return ""
	}
	return o.EventName
}

func (o *TrackLeadRequestBody) GetEventQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.EventQuantity
}

func (o *TrackLeadRequestBody) GetExternalID() string {
	if o == nil {
		return ""
	}
	return o.ExternalID
}

func (o *TrackLeadRequestBody) GetCustomerName() *string {
	if o == nil {
		return nil
	}
	return o.CustomerName
}

func (o *TrackLeadRequestBody) GetCustomerEmail() *string {
	if o == nil {
		return nil
	}
	return o.CustomerEmail
}

func (o *TrackLeadRequestBody) GetCustomerAvatar() *string {
	if o == nil {
		return nil
	}
	return o.CustomerAvatar
}

func (o *TrackLeadRequestBody) GetMode() *Mode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *TrackLeadRequestBody) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

type Click struct {
	ID string `json:"id"`
}

func (o *Click) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type Customer struct {
	Name       *string `json:"name"`
	Email      *string `json:"email"`
	Avatar     *string `json:"avatar"`
	ExternalID *string `json:"externalId"`
}

func (o *Customer) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Customer) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *Customer) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *Customer) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

// TrackLeadResponseBody - A lead was tracked.
type TrackLeadResponseBody struct {
	Click    Click    `json:"click"`
	Customer Customer `json:"customer"`
}

func (o *TrackLeadResponseBody) GetClick() Click {
	if o == nil {
		return Click{}
	}
	return o.Click
}

func (o *TrackLeadResponseBody) GetCustomer() Customer {
	if o == nil {
		return Customer{}
	}
	return o.Customer
}

type TrackLeadResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A lead was tracked.
	Object *TrackLeadResponseBody
}

func (o *TrackLeadResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *TrackLeadResponse) GetObject() *TrackLeadResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
