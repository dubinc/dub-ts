// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// Level - The level of error correction to use for the QR code. Defaults to `L` if not provided.
type Level string

const (
	LevelL Level = "L"
	LevelM Level = "M"
	LevelQ Level = "Q"
	LevelH Level = "H"
)

func (e Level) ToPointer() *Level {
	return &e
}
func (e *Level) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "L":
		fallthrough
	case "M":
		fallthrough
	case "Q":
		fallthrough
	case "H":
		*e = Level(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Level: %v", v)
	}
}

type GetQRCodeRequest struct {
	// The URL to generate a QR code for.
	URL string `queryParam:"style=form,explode=true,name=url"`
	// The logo to include in the QR code. Can only be used with a paid plan on Dub.
	Logo *string `queryParam:"style=form,explode=true,name=logo"`
	// The size of the QR code in pixels. Defaults to `600` if not provided.
	Size *float64 `default:"600" queryParam:"style=form,explode=true,name=size"`
	// The level of error correction to use for the QR code. Defaults to `L` if not provided.
	Level *Level `default:"L" queryParam:"style=form,explode=true,name=level"`
	// The foreground color of the QR code in hex format. Defaults to `#000000` if not provided.
	FgColor *string `default:"#000000" queryParam:"style=form,explode=true,name=fgColor"`
	// The background color of the QR code in hex format. Defaults to `#ffffff` if not provided.
	BgColor *string `default:"#FFFFFF" queryParam:"style=form,explode=true,name=bgColor"`
	// Whether to hide the logo in the QR code. Can only be used with a paid plan on Dub.
	HideLogo *bool `default:"false" queryParam:"style=form,explode=true,name=hideLogo"`
	// The size of the margin around the QR code. Defaults to 2 if not provided.
	Margin *float64 `default:"2" queryParam:"style=form,explode=true,name=margin"`
	// DEPRECATED: Margin is included by default. Use the `margin` prop to customize the margin size.
	IncludeMargin *bool `default:"true" queryParam:"style=form,explode=true,name=includeMargin"`
}

func (g GetQRCodeRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetQRCodeRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetQRCodeRequest) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetQRCodeRequest) GetLogo() *string {
	if o == nil {
		return nil
	}
	return o.Logo
}

func (o *GetQRCodeRequest) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *GetQRCodeRequest) GetLevel() *Level {
	if o == nil {
		return nil
	}
	return o.Level
}

func (o *GetQRCodeRequest) GetFgColor() *string {
	if o == nil {
		return nil
	}
	return o.FgColor
}

func (o *GetQRCodeRequest) GetBgColor() *string {
	if o == nil {
		return nil
	}
	return o.BgColor
}

func (o *GetQRCodeRequest) GetHideLogo() *bool {
	if o == nil {
		return nil
	}
	return o.HideLogo
}

func (o *GetQRCodeRequest) GetMargin() *float64 {
	if o == nil {
		return nil
	}
	return o.Margin
}

func (o *GetQRCodeRequest) GetIncludeMargin() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeMargin
}

type GetQRCodeResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The QR code
	Res *string
}

func (o *GetQRCodeResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetQRCodeResponse) GetRes() *string {
	if o == nil {
		return nil
	}
	return o.Res
}
