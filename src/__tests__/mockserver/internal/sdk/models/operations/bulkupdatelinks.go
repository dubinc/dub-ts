// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type BulkUpdateLinksTagIdsType string

const (
	BulkUpdateLinksTagIdsTypeStr        BulkUpdateLinksTagIdsType = "str"
	BulkUpdateLinksTagIdsTypeArrayOfStr BulkUpdateLinksTagIdsType = "arrayOfStr"
)

// BulkUpdateLinksTagIds - The unique IDs of the tags assigned to the short link.
type BulkUpdateLinksTagIds struct {
	Str        *string
	ArrayOfStr []string

	Type BulkUpdateLinksTagIdsType
}

func CreateBulkUpdateLinksTagIdsStr(str string) BulkUpdateLinksTagIds {
	typ := BulkUpdateLinksTagIdsTypeStr

	return BulkUpdateLinksTagIds{
		Str:  &str,
		Type: typ,
	}
}

func CreateBulkUpdateLinksTagIdsArrayOfStr(arrayOfStr []string) BulkUpdateLinksTagIds {
	typ := BulkUpdateLinksTagIdsTypeArrayOfStr

	return BulkUpdateLinksTagIds{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *BulkUpdateLinksTagIds) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = BulkUpdateLinksTagIdsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = BulkUpdateLinksTagIdsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for BulkUpdateLinksTagIds", string(data))
}

func (u BulkUpdateLinksTagIds) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type BulkUpdateLinksTagIds: all fields are null")
}

type BulkUpdateLinksTagNamesType string

const (
	BulkUpdateLinksTagNamesTypeStr        BulkUpdateLinksTagNamesType = "str"
	BulkUpdateLinksTagNamesTypeArrayOfStr BulkUpdateLinksTagNamesType = "arrayOfStr"
)

// BulkUpdateLinksTagNames - The unique name of the tags assigned to the short link (case insensitive).
type BulkUpdateLinksTagNames struct {
	Str        *string
	ArrayOfStr []string

	Type BulkUpdateLinksTagNamesType
}

func CreateBulkUpdateLinksTagNamesStr(str string) BulkUpdateLinksTagNames {
	typ := BulkUpdateLinksTagNamesTypeStr

	return BulkUpdateLinksTagNames{
		Str:  &str,
		Type: typ,
	}
}

func CreateBulkUpdateLinksTagNamesArrayOfStr(arrayOfStr []string) BulkUpdateLinksTagNames {
	typ := BulkUpdateLinksTagNamesTypeArrayOfStr

	return BulkUpdateLinksTagNames{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *BulkUpdateLinksTagNames) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = BulkUpdateLinksTagNamesTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = BulkUpdateLinksTagNamesTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for BulkUpdateLinksTagNames", string(data))
}

func (u BulkUpdateLinksTagNames) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type BulkUpdateLinksTagNames: all fields are null")
}

type BulkUpdateLinksTestVariants struct {
	URL        string  `json:"url"`
	Percentage float64 `json:"percentage"`
}

func (o *BulkUpdateLinksTestVariants) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *BulkUpdateLinksTestVariants) GetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Percentage
}

type Data struct {
	// The destination URL of the short link.
	URL *string `json:"url,omitempty"`
	// The ID of the tenant that created the link inside your system. If set, it can be used to fetch all links for a tenant.
	TenantID *string `json:"tenantId,omitempty"`
	// The ID of the program the short link is associated with.
	ProgramID *string `json:"programId,omitempty"`
	// The ID of the partner the short link is associated with.
	PartnerID *string `json:"partnerId,omitempty"`
	// Whether to track conversions for the short link. Defaults to `false` if not provided.
	TrackConversion *bool `json:"trackConversion,omitempty"`
	// Whether the short link is archived. Defaults to `false` if not provided.
	Archived *bool `json:"archived,omitempty"`
	// Deprecated: Use `dashboard` instead. Whether the short link's stats are publicly accessible. Defaults to `false` if not provided.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	PublicStats *bool `json:"publicStats,omitempty"`
	// The unique ID of the tag assigned to the short link. This field is deprecated â€“ use `tagIds` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	TagID *string `json:"tagId,omitempty"`
	// The unique IDs of the tags assigned to the short link.
	TagIds *BulkUpdateLinksTagIds `json:"tagIds,omitempty"`
	// The unique name of the tags assigned to the short link (case insensitive).
	TagNames *BulkUpdateLinksTagNames `json:"tagNames,omitempty"`
	// The unique ID existing folder to assign the short link to.
	FolderID *string `json:"folderId,omitempty"`
	// The comments for the short link.
	Comments *string `json:"comments,omitempty"`
	// The date and time when the short link will expire at.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// The URL to redirect to when the short link has expired.
	ExpiredURL *string `json:"expiredUrl,omitempty"`
	// The password required to access the destination URL of the short link.
	Password *string `json:"password,omitempty"`
	// Whether the short link uses Custom Social Media Cards feature. Defaults to `false` if not provided.
	Proxy *bool `json:"proxy,omitempty"`
	// The custom link preview title (og:title). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
	Title *string `json:"title,omitempty"`
	// The custom link preview description (og:description). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
	Description *string `json:"description,omitempty"`
	// The custom link preview image (og:image). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
	Image *string `json:"image,omitempty"`
	// The custom link preview video (og:video). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
	Video *string `json:"video,omitempty"`
	// Whether the short link uses link cloaking. Defaults to `false` if not provided.
	Rewrite *bool `json:"rewrite,omitempty"`
	// The iOS destination URL for the short link for iOS device targeting.
	Ios *string `json:"ios,omitempty"`
	// The Android destination URL for the short link for Android device targeting.
	Android *string `json:"android,omitempty"`
	// Geo targeting information for the short link in JSON format `{[COUNTRY]: https://example.com }`.
	Geo *components.LinkGeoTargeting `json:"geo,omitempty"`
	// Allow search engines to index your short link. Defaults to `false` if not provided. Learn more: https://d.to/noindex
	DoIndex *bool `json:"doIndex,omitempty"`
	// The UTM source of the short link. If set, this will populate or override the UTM source in the destination URL.
	UtmSource *string `json:"utm_source,omitempty"`
	// The UTM medium of the short link. If set, this will populate or override the UTM medium in the destination URL.
	UtmMedium *string `json:"utm_medium,omitempty"`
	// The UTM campaign of the short link. If set, this will populate or override the UTM campaign in the destination URL.
	UtmCampaign *string `json:"utm_campaign,omitempty"`
	// The UTM term of the short link. If set, this will populate or override the UTM term in the destination URL.
	UtmTerm *string `json:"utm_term,omitempty"`
	// The UTM content of the short link. If set, this will populate or override the UTM content in the destination URL.
	UtmContent *string `json:"utm_content,omitempty"`
	// The referral tag of the short link. If set, this will populate or override the `ref` query parameter in the destination URL.
	Ref *string `json:"ref,omitempty"`
	// An array of webhook IDs to trigger when the link is clicked. These webhooks will receive click event data.
	WebhookIds []string `json:"webhookIds,omitempty"`
	// An array of A/B test URLs and the percentage of traffic to send to each URL.
	TestVariants []BulkUpdateLinksTestVariants `json:"testVariants,omitempty"`
	// The date and time when the tests started.
	TestStartedAt *string `json:"testStartedAt,omitempty"`
	// The date and time when the tests were or will be completed.
	TestCompletedAt *string `json:"testCompletedAt,omitempty"`
}

func (o *Data) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *Data) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *Data) GetProgramID() *string {
	if o == nil {
		return nil
	}
	return o.ProgramID
}

func (o *Data) GetPartnerID() *string {
	if o == nil {
		return nil
	}
	return o.PartnerID
}

func (o *Data) GetTrackConversion() *bool {
	if o == nil {
		return nil
	}
	return o.TrackConversion
}

func (o *Data) GetArchived() *bool {
	if o == nil {
		return nil
	}
	return o.Archived
}

func (o *Data) GetPublicStats() *bool {
	if o == nil {
		return nil
	}
	return o.PublicStats
}

func (o *Data) GetTagID() *string {
	if o == nil {
		return nil
	}
	return o.TagID
}

func (o *Data) GetTagIds() *BulkUpdateLinksTagIds {
	if o == nil {
		return nil
	}
	return o.TagIds
}

func (o *Data) GetTagNames() *BulkUpdateLinksTagNames {
	if o == nil {
		return nil
	}
	return o.TagNames
}

func (o *Data) GetFolderID() *string {
	if o == nil {
		return nil
	}
	return o.FolderID
}

func (o *Data) GetComments() *string {
	if o == nil {
		return nil
	}
	return o.Comments
}

func (o *Data) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *Data) GetExpiredURL() *string {
	if o == nil {
		return nil
	}
	return o.ExpiredURL
}

func (o *Data) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *Data) GetProxy() *bool {
	if o == nil {
		return nil
	}
	return o.Proxy
}

func (o *Data) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *Data) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Data) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *Data) GetVideo() *string {
	if o == nil {
		return nil
	}
	return o.Video
}

func (o *Data) GetRewrite() *bool {
	if o == nil {
		return nil
	}
	return o.Rewrite
}

func (o *Data) GetIos() *string {
	if o == nil {
		return nil
	}
	return o.Ios
}

func (o *Data) GetAndroid() *string {
	if o == nil {
		return nil
	}
	return o.Android
}

func (o *Data) GetGeo() *components.LinkGeoTargeting {
	if o == nil {
		return nil
	}
	return o.Geo
}

func (o *Data) GetDoIndex() *bool {
	if o == nil {
		return nil
	}
	return o.DoIndex
}

func (o *Data) GetUtmSource() *string {
	if o == nil {
		return nil
	}
	return o.UtmSource
}

func (o *Data) GetUtmMedium() *string {
	if o == nil {
		return nil
	}
	return o.UtmMedium
}

func (o *Data) GetUtmCampaign() *string {
	if o == nil {
		return nil
	}
	return o.UtmCampaign
}

func (o *Data) GetUtmTerm() *string {
	if o == nil {
		return nil
	}
	return o.UtmTerm
}

func (o *Data) GetUtmContent() *string {
	if o == nil {
		return nil
	}
	return o.UtmContent
}

func (o *Data) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *Data) GetWebhookIds() []string {
	if o == nil {
		return nil
	}
	return o.WebhookIds
}

func (o *Data) GetTestVariants() []BulkUpdateLinksTestVariants {
	if o == nil {
		return nil
	}
	return o.TestVariants
}

func (o *Data) GetTestStartedAt() *string {
	if o == nil {
		return nil
	}
	return o.TestStartedAt
}

func (o *Data) GetTestCompletedAt() *string {
	if o == nil {
		return nil
	}
	return o.TestCompletedAt
}

type BulkUpdateLinksRequestBody struct {
	// The IDs of the links to update. Takes precedence over `externalIds`.
	LinkIds []string `json:"linkIds,omitempty"`
	// The external IDs of the links to update as stored in your database.
	ExternalIds []string `json:"externalIds,omitempty"`
	Data        Data     `json:"data"`
}

func (o *BulkUpdateLinksRequestBody) GetLinkIds() []string {
	if o == nil {
		return nil
	}
	return o.LinkIds
}

func (o *BulkUpdateLinksRequestBody) GetExternalIds() []string {
	if o == nil {
		return nil
	}
	return o.ExternalIds
}

func (o *BulkUpdateLinksRequestBody) GetData() Data {
	if o == nil {
		return Data{}
	}
	return o.Data
}

type BulkUpdateLinksResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The updated links
	LinkSchemas []components.LinkSchema
}

func (o *BulkUpdateLinksResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *BulkUpdateLinksResponse) GetLinkSchemas() []components.LinkSchema {
	if o == nil {
		return nil
	}
	return o.LinkSchemas
}
