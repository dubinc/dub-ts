// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetCustomersRequest struct {
	// A case-sensitive filter on the list based on the customer's `email` field. The value must be a string. Takes precedence over `externalId`.
	Email *string `queryParam:"style=form,explode=true,name=email"`
	// A case-sensitive filter on the list based on the customer's `externalId` field. The value must be a string. Takes precedence over `search`.
	ExternalID *string `queryParam:"style=form,explode=true,name=externalId"`
	// A search query to filter customers by email, externalId, or name. If `email` or `externalId` is provided, this will be ignored.
	Search *string `queryParam:"style=form,explode=true,name=search"`
	// Whether to include expanded fields on the customer (`link`, `partner`, `discount`).
	IncludeExpandedFields *bool `queryParam:"style=form,explode=true,name=includeExpandedFields"`
	// The page number for pagination.
	Page *float64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// The number of items per page.
	PageSize *float64 `default:"100" queryParam:"style=form,explode=true,name=pageSize"`
}

func (g GetCustomersRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetCustomersRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetCustomersRequest) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *GetCustomersRequest) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *GetCustomersRequest) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

func (o *GetCustomersRequest) GetIncludeExpandedFields() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeExpandedFields
}

func (o *GetCustomersRequest) GetPage() *float64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *GetCustomersRequest) GetPageSize() *float64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

type GetCustomersLink struct {
	// The unique ID of the short link.
	ID string `json:"id"`
	// The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
	Domain string `json:"domain"`
	// The short link slug. If not provided, a random 7-character slug will be generated.
	Key string `json:"key"`
	// The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
	ShortLink string `json:"shortLink"`
	// The ID of the program the short link is associated with.
	ProgramID *string `json:"programId"`
}

func (o *GetCustomersLink) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetCustomersLink) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *GetCustomersLink) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetCustomersLink) GetShortLink() string {
	if o == nil {
		return ""
	}
	return o.ShortLink
}

func (o *GetCustomersLink) GetProgramID() *string {
	if o == nil {
		return nil
	}
	return o.ProgramID
}

type GetCustomersPartner struct {
	ID    string  `json:"id"`
	Name  string  `json:"name"`
	Email *string `json:"email"`
	Image *string `json:"image"`
}

func (o *GetCustomersPartner) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetCustomersPartner) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetCustomersPartner) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *GetCustomersPartner) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

type GetCustomersType string

const (
	GetCustomersTypePercentage GetCustomersType = "percentage"
	GetCustomersTypeFlat       GetCustomersType = "flat"
)

func (e GetCustomersType) ToPointer() *GetCustomersType {
	return &e
}
func (e *GetCustomersType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "percentage":
		fallthrough
	case "flat":
		*e = GetCustomersType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCustomersType: %v", v)
	}
}

type Discount struct {
	ID            string           `json:"id"`
	Amount        float64          `json:"amount"`
	Type          GetCustomersType `json:"type"`
	MaxDuration   *float64         `json:"maxDuration"`
	Description   *string          `json:"description,omitempty"`
	CouponID      *string          `json:"couponId"`
	CouponTestID  *string          `json:"couponTestId"`
	PartnersCount *float64         `json:"partnersCount,omitempty"`
}

func (o *Discount) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Discount) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *Discount) GetType() GetCustomersType {
	if o == nil {
		return GetCustomersType("")
	}
	return o.Type
}

func (o *Discount) GetMaxDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxDuration
}

func (o *Discount) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Discount) GetCouponID() *string {
	if o == nil {
		return nil
	}
	return o.CouponID
}

func (o *Discount) GetCouponTestID() *string {
	if o == nil {
		return nil
	}
	return o.CouponTestID
}

func (o *Discount) GetPartnersCount() *float64 {
	if o == nil {
		return nil
	}
	return o.PartnersCount
}

type GetCustomersResponseBody struct {
	// The unique ID of the customer. You may use either the customer's `id` on Dub (obtained via `/customers` endpoint) or their `externalId` (unique ID within your system, prefixed with `ext_`, e.g. `ext_123`).
	ID string `json:"id"`
	// Unique identifier for the customer in the client's app.
	ExternalID string `json:"externalId"`
	// Name of the customer.
	Name string `json:"name"`
	// Email of the customer.
	Email *string `json:"email,omitempty"`
	// Avatar URL of the customer.
	Avatar *string `json:"avatar,omitempty"`
	// Country of the customer.
	Country *string `json:"country,omitempty"`
	// The date the customer was created.
	CreatedAt string               `json:"createdAt"`
	Link      *GetCustomersLink    `json:"link,omitempty"`
	ProgramID *string              `json:"programId,omitempty"`
	Partner   *GetCustomersPartner `json:"partner,omitempty"`
	Discount  *Discount            `json:"discount,omitempty"`
}

func (o *GetCustomersResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetCustomersResponseBody) GetExternalID() string {
	if o == nil {
		return ""
	}
	return o.ExternalID
}

func (o *GetCustomersResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetCustomersResponseBody) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *GetCustomersResponseBody) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *GetCustomersResponseBody) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *GetCustomersResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *GetCustomersResponseBody) GetLink() *GetCustomersLink {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *GetCustomersResponseBody) GetProgramID() *string {
	if o == nil {
		return nil
	}
	return o.ProgramID
}

func (o *GetCustomersResponseBody) GetPartner() *GetCustomersPartner {
	if o == nil {
		return nil
	}
	return o.Partner
}

func (o *GetCustomersResponseBody) GetDiscount() *Discount {
	if o == nil {
		return nil
	}
	return o.Discount
}

type GetCustomersResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The list of customers.
	ResponseBodies []GetCustomersResponseBody
}

func (o *GetCustomersResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetCustomersResponse) GetResponseBodies() []GetCustomersResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
