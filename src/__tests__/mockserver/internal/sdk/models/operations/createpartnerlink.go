// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type CreatePartnerLinkTagIdsType string

const (
	CreatePartnerLinkTagIdsTypeStr        CreatePartnerLinkTagIdsType = "str"
	CreatePartnerLinkTagIdsTypeArrayOfStr CreatePartnerLinkTagIdsType = "arrayOfStr"
)

// CreatePartnerLinkTagIds - The unique IDs of the tags assigned to the short link.
type CreatePartnerLinkTagIds struct {
	Str        *string
	ArrayOfStr []string

	Type CreatePartnerLinkTagIdsType
}

func CreateCreatePartnerLinkTagIdsStr(str string) CreatePartnerLinkTagIds {
	typ := CreatePartnerLinkTagIdsTypeStr

	return CreatePartnerLinkTagIds{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreatePartnerLinkTagIdsArrayOfStr(arrayOfStr []string) CreatePartnerLinkTagIds {
	typ := CreatePartnerLinkTagIdsTypeArrayOfStr

	return CreatePartnerLinkTagIds{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreatePartnerLinkTagIds) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreatePartnerLinkTagIdsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreatePartnerLinkTagIdsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreatePartnerLinkTagIds", string(data))
}

func (u CreatePartnerLinkTagIds) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreatePartnerLinkTagIds: all fields are null")
}

type CreatePartnerLinkTagNamesType string

const (
	CreatePartnerLinkTagNamesTypeStr        CreatePartnerLinkTagNamesType = "str"
	CreatePartnerLinkTagNamesTypeArrayOfStr CreatePartnerLinkTagNamesType = "arrayOfStr"
)

// CreatePartnerLinkTagNames - The unique name of the tags assigned to the short link (case insensitive).
type CreatePartnerLinkTagNames struct {
	Str        *string
	ArrayOfStr []string

	Type CreatePartnerLinkTagNamesType
}

func CreateCreatePartnerLinkTagNamesStr(str string) CreatePartnerLinkTagNames {
	typ := CreatePartnerLinkTagNamesTypeStr

	return CreatePartnerLinkTagNames{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreatePartnerLinkTagNamesArrayOfStr(arrayOfStr []string) CreatePartnerLinkTagNames {
	typ := CreatePartnerLinkTagNamesTypeArrayOfStr

	return CreatePartnerLinkTagNames{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreatePartnerLinkTagNames) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreatePartnerLinkTagNamesTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreatePartnerLinkTagNamesTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreatePartnerLinkTagNames", string(data))
}

func (u CreatePartnerLinkTagNames) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreatePartnerLinkTagNames: all fields are null")
}

type CreatePartnerLinkTestVariants struct {
	URL        string  `json:"url"`
	Percentage float64 `json:"percentage"`
}

func (o *CreatePartnerLinkTestVariants) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreatePartnerLinkTestVariants) GetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Percentage
}

// CreatePartnerLinkLinkProps - Additional properties that you can pass to the partner's short link. Will be used to override the default link properties for this partner.
type CreatePartnerLinkLinkProps struct {
	// The ID of the link in your database. If set, it can be used to identify the link in future API requests (must be prefixed with 'ext_' when passed as a query parameter). This key is unique across your workspace.
	ExternalID *string `json:"externalId,omitempty"`
	// The ID of the tenant that created the link inside your system. If set, it can be used to fetch all links for a tenant.
	TenantID *string `json:"tenantId,omitempty"`
	// The prefix of the short link slug for randomly-generated keys (e.g. if prefix is `/c/`, generated keys will be in the `/c/:key` format). Will be ignored if `key` is provided.
	Prefix *string `json:"prefix,omitempty"`
	// Whether the short link is archived. Defaults to `false` if not provided.
	Archived *bool `json:"archived,omitempty"`
	// The unique IDs of the tags assigned to the short link.
	TagIds *CreatePartnerLinkTagIds `json:"tagIds,omitempty"`
	// The unique name of the tags assigned to the short link (case insensitive).
	TagNames *CreatePartnerLinkTagNames `json:"tagNames,omitempty"`
	// The unique ID existing folder to assign the short link to.
	FolderID *string `json:"folderId,omitempty"`
	// The comments for the short link.
	Comments *string `json:"comments,omitempty"`
	// The date and time when the short link will expire at.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// The URL to redirect to when the short link has expired.
	ExpiredURL *string `json:"expiredUrl,omitempty"`
	// The password required to access the destination URL of the short link.
	Password *string `json:"password,omitempty"`
	// Whether the short link uses Custom Social Media Cards feature. Defaults to `false` if not provided.
	Proxy *bool `json:"proxy,omitempty"`
	// The custom link preview title (og:title). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
	Title *string `json:"title,omitempty"`
	// The custom link preview description (og:description). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
	Description *string `json:"description,omitempty"`
	// The custom link preview image (og:image). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
	Image *string `json:"image,omitempty"`
	// The custom link preview video (og:video). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
	Video *string `json:"video,omitempty"`
	// Whether the short link uses link cloaking. Defaults to `false` if not provided.
	Rewrite *bool `json:"rewrite,omitempty"`
	// The iOS destination URL for the short link for iOS device targeting.
	Ios *string `json:"ios,omitempty"`
	// The Android destination URL for the short link for Android device targeting.
	Android *string `json:"android,omitempty"`
	// Allow search engines to index your short link. Defaults to `false` if not provided. Learn more: https://d.to/noindex
	DoIndex *bool `json:"doIndex,omitempty"`
	// The UTM source of the short link. If set, this will populate or override the UTM source in the destination URL.
	UtmSource *string `json:"utm_source,omitempty"`
	// The UTM medium of the short link. If set, this will populate or override the UTM medium in the destination URL.
	UtmMedium *string `json:"utm_medium,omitempty"`
	// The UTM campaign of the short link. If set, this will populate or override the UTM campaign in the destination URL.
	UtmCampaign *string `json:"utm_campaign,omitempty"`
	// The UTM term of the short link. If set, this will populate or override the UTM term in the destination URL.
	UtmTerm *string `json:"utm_term,omitempty"`
	// The UTM content of the short link. If set, this will populate or override the UTM content in the destination URL.
	UtmContent *string `json:"utm_content,omitempty"`
	// The referral tag of the short link. If set, this will populate or override the `ref` query parameter in the destination URL.
	Ref *string `json:"ref,omitempty"`
	// An array of A/B test URLs and the percentage of traffic to send to each URL.
	TestVariants []CreatePartnerLinkTestVariants `json:"testVariants,omitempty"`
	// The date and time when the tests started.
	TestStartedAt *string `json:"testStartedAt,omitempty"`
	// The date and time when the tests were or will be completed.
	TestCompletedAt *string `json:"testCompletedAt,omitempty"`
}

func (o *CreatePartnerLinkLinkProps) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *CreatePartnerLinkLinkProps) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *CreatePartnerLinkLinkProps) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *CreatePartnerLinkLinkProps) GetArchived() *bool {
	if o == nil {
		return nil
	}
	return o.Archived
}

func (o *CreatePartnerLinkLinkProps) GetTagIds() *CreatePartnerLinkTagIds {
	if o == nil {
		return nil
	}
	return o.TagIds
}

func (o *CreatePartnerLinkLinkProps) GetTagNames() *CreatePartnerLinkTagNames {
	if o == nil {
		return nil
	}
	return o.TagNames
}

func (o *CreatePartnerLinkLinkProps) GetFolderID() *string {
	if o == nil {
		return nil
	}
	return o.FolderID
}

func (o *CreatePartnerLinkLinkProps) GetComments() *string {
	if o == nil {
		return nil
	}
	return o.Comments
}

func (o *CreatePartnerLinkLinkProps) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *CreatePartnerLinkLinkProps) GetExpiredURL() *string {
	if o == nil {
		return nil
	}
	return o.ExpiredURL
}

func (o *CreatePartnerLinkLinkProps) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *CreatePartnerLinkLinkProps) GetProxy() *bool {
	if o == nil {
		return nil
	}
	return o.Proxy
}

func (o *CreatePartnerLinkLinkProps) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *CreatePartnerLinkLinkProps) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreatePartnerLinkLinkProps) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *CreatePartnerLinkLinkProps) GetVideo() *string {
	if o == nil {
		return nil
	}
	return o.Video
}

func (o *CreatePartnerLinkLinkProps) GetRewrite() *bool {
	if o == nil {
		return nil
	}
	return o.Rewrite
}

func (o *CreatePartnerLinkLinkProps) GetIos() *string {
	if o == nil {
		return nil
	}
	return o.Ios
}

func (o *CreatePartnerLinkLinkProps) GetAndroid() *string {
	if o == nil {
		return nil
	}
	return o.Android
}

func (o *CreatePartnerLinkLinkProps) GetDoIndex() *bool {
	if o == nil {
		return nil
	}
	return o.DoIndex
}

func (o *CreatePartnerLinkLinkProps) GetUtmSource() *string {
	if o == nil {
		return nil
	}
	return o.UtmSource
}

func (o *CreatePartnerLinkLinkProps) GetUtmMedium() *string {
	if o == nil {
		return nil
	}
	return o.UtmMedium
}

func (o *CreatePartnerLinkLinkProps) GetUtmCampaign() *string {
	if o == nil {
		return nil
	}
	return o.UtmCampaign
}

func (o *CreatePartnerLinkLinkProps) GetUtmTerm() *string {
	if o == nil {
		return nil
	}
	return o.UtmTerm
}

func (o *CreatePartnerLinkLinkProps) GetUtmContent() *string {
	if o == nil {
		return nil
	}
	return o.UtmContent
}

func (o *CreatePartnerLinkLinkProps) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CreatePartnerLinkLinkProps) GetTestVariants() []CreatePartnerLinkTestVariants {
	if o == nil {
		return nil
	}
	return o.TestVariants
}

func (o *CreatePartnerLinkLinkProps) GetTestStartedAt() *string {
	if o == nil {
		return nil
	}
	return o.TestStartedAt
}

func (o *CreatePartnerLinkLinkProps) GetTestCompletedAt() *string {
	if o == nil {
		return nil
	}
	return o.TestCompletedAt
}

type CreatePartnerLinkRequestBody struct {
	// The ID of the program that the partner is enrolled in.
	ProgramID string `json:"programId"`
	// The ID of the partner to create a link for. Will take precedence over `tenantId` if provided.
	PartnerID *string `json:"partnerId,omitempty"`
	// The ID of the partner in your system. If both `partnerId` and `tenantId` are not provided, an error will be thrown.
	TenantID *string `json:"tenantId,omitempty"`
	// The URL to shorten (if not provided, the program's default URL will be used). Will throw an error if the domain doesn't match the program's default URL domain.
	URL *string `json:"url,omitempty"`
	// The short link slug. If not provided, a random 7-character slug will be generated.
	Key *string `json:"key,omitempty"`
	// The comments for the short link.
	Comments *string `json:"comments,omitempty"`
	// Additional properties that you can pass to the partner's short link. Will be used to override the default link properties for this partner.
	LinkProps *CreatePartnerLinkLinkProps `json:"linkProps,omitempty"`
}

func (o *CreatePartnerLinkRequestBody) GetProgramID() string {
	if o == nil {
		return ""
	}
	return o.ProgramID
}

func (o *CreatePartnerLinkRequestBody) GetPartnerID() *string {
	if o == nil {
		return nil
	}
	return o.PartnerID
}

func (o *CreatePartnerLinkRequestBody) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *CreatePartnerLinkRequestBody) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *CreatePartnerLinkRequestBody) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *CreatePartnerLinkRequestBody) GetComments() *string {
	if o == nil {
		return nil
	}
	return o.Comments
}

func (o *CreatePartnerLinkRequestBody) GetLinkProps() *CreatePartnerLinkLinkProps {
	if o == nil {
		return nil
	}
	return o.LinkProps
}

type CreatePartnerLinkResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The created partner link
	LinkSchema *components.LinkSchema
}

func (o *CreatePartnerLinkResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreatePartnerLinkResponse) GetLinkSchema() *components.LinkSchema {
	if o == nil {
		return nil
	}
	return o.LinkSchema
}
