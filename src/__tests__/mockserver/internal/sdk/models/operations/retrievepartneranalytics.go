// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// RetrievePartnerAnalyticsQueryParamInterval - The interval to retrieve analytics for. If undefined, defaults to 24h.
type RetrievePartnerAnalyticsQueryParamInterval string

const (
	RetrievePartnerAnalyticsQueryParamIntervalTwentyFourh RetrievePartnerAnalyticsQueryParamInterval = "24h"
	RetrievePartnerAnalyticsQueryParamIntervalSevend      RetrievePartnerAnalyticsQueryParamInterval = "7d"
	RetrievePartnerAnalyticsQueryParamIntervalThirtyd     RetrievePartnerAnalyticsQueryParamInterval = "30d"
	RetrievePartnerAnalyticsQueryParamIntervalNinetyd     RetrievePartnerAnalyticsQueryParamInterval = "90d"
	RetrievePartnerAnalyticsQueryParamIntervalOney        RetrievePartnerAnalyticsQueryParamInterval = "1y"
	RetrievePartnerAnalyticsQueryParamIntervalMtd         RetrievePartnerAnalyticsQueryParamInterval = "mtd"
	RetrievePartnerAnalyticsQueryParamIntervalQtd         RetrievePartnerAnalyticsQueryParamInterval = "qtd"
	RetrievePartnerAnalyticsQueryParamIntervalYtd         RetrievePartnerAnalyticsQueryParamInterval = "ytd"
	RetrievePartnerAnalyticsQueryParamIntervalAll         RetrievePartnerAnalyticsQueryParamInterval = "all"
)

func (e RetrievePartnerAnalyticsQueryParamInterval) ToPointer() *RetrievePartnerAnalyticsQueryParamInterval {
	return &e
}
func (e *RetrievePartnerAnalyticsQueryParamInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "24h":
		fallthrough
	case "7d":
		fallthrough
	case "30d":
		fallthrough
	case "90d":
		fallthrough
	case "1y":
		fallthrough
	case "mtd":
		fallthrough
	case "qtd":
		fallthrough
	case "ytd":
		fallthrough
	case "all":
		*e = RetrievePartnerAnalyticsQueryParamInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrievePartnerAnalyticsQueryParamInterval: %v", v)
	}
}

// RetrievePartnerAnalyticsQueryParamGroupBy - The parameter to group the analytics data points by. Defaults to `count` if undefined.
type RetrievePartnerAnalyticsQueryParamGroupBy string

const (
	RetrievePartnerAnalyticsQueryParamGroupByTopLinks   RetrievePartnerAnalyticsQueryParamGroupBy = "top_links"
	RetrievePartnerAnalyticsQueryParamGroupByTimeseries RetrievePartnerAnalyticsQueryParamGroupBy = "timeseries"
	RetrievePartnerAnalyticsQueryParamGroupByCount      RetrievePartnerAnalyticsQueryParamGroupBy = "count"
)

func (e RetrievePartnerAnalyticsQueryParamGroupBy) ToPointer() *RetrievePartnerAnalyticsQueryParamGroupBy {
	return &e
}
func (e *RetrievePartnerAnalyticsQueryParamGroupBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "top_links":
		fallthrough
	case "timeseries":
		fallthrough
	case "count":
		*e = RetrievePartnerAnalyticsQueryParamGroupBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrievePartnerAnalyticsQueryParamGroupBy: %v", v)
	}
}

type RetrievePartnerAnalyticsRequest struct {
	// The ID of the partner to retrieve analytics for.
	PartnerID *string `queryParam:"style=form,explode=true,name=partnerId"`
	// The ID of the tenant that created the link inside your system.
	TenantID *string `queryParam:"style=form,explode=true,name=tenantId"`
	// The interval to retrieve analytics for. If undefined, defaults to 24h.
	Interval *RetrievePartnerAnalyticsQueryParamInterval `queryParam:"style=form,explode=true,name=interval"`
	// The start date and time when to retrieve analytics from. If set, takes precedence over `interval`.
	Start *string `queryParam:"style=form,explode=true,name=start"`
	// The end date and time when to retrieve analytics from. If not provided, defaults to the current date. If set along with `start`, takes precedence over `interval`.
	End *string `queryParam:"style=form,explode=true,name=end"`
	// The IANA time zone code for aligning timeseries granularity (e.g. America/New_York). Defaults to UTC.
	Timezone *string `default:"UTC" queryParam:"style=form,explode=true,name=timezone"`
	// The parameter to group the analytics data points by. Defaults to `count` if undefined.
	GroupBy *RetrievePartnerAnalyticsQueryParamGroupBy `default:"count" queryParam:"style=form,explode=true,name=groupBy"`
	// The ID of the program to retrieve analytics for.
	ProgramID string `queryParam:"style=form,explode=true,name=programId"`
}

func (r RetrievePartnerAnalyticsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrievePartnerAnalyticsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrievePartnerAnalyticsRequest) GetPartnerID() *string {
	if o == nil {
		return nil
	}
	return o.PartnerID
}

func (o *RetrievePartnerAnalyticsRequest) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *RetrievePartnerAnalyticsRequest) GetInterval() *RetrievePartnerAnalyticsQueryParamInterval {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *RetrievePartnerAnalyticsRequest) GetStart() *string {
	if o == nil {
		return nil
	}
	return o.Start
}

func (o *RetrievePartnerAnalyticsRequest) GetEnd() *string {
	if o == nil {
		return nil
	}
	return o.End
}

func (o *RetrievePartnerAnalyticsRequest) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *RetrievePartnerAnalyticsRequest) GetGroupBy() *RetrievePartnerAnalyticsQueryParamGroupBy {
	if o == nil {
		return nil
	}
	return o.GroupBy
}

func (o *RetrievePartnerAnalyticsRequest) GetProgramID() string {
	if o == nil {
		return ""
	}
	return o.ProgramID
}

type RetrievePartnerAnalyticsResponseBodyType string

const (
	RetrievePartnerAnalyticsResponseBodyTypePartnerAnalyticsCount             RetrievePartnerAnalyticsResponseBodyType = "PartnerAnalyticsCount"
	RetrievePartnerAnalyticsResponseBodyTypeArrayOfPartnerAnalyticsTimeseries RetrievePartnerAnalyticsResponseBodyType = "arrayOfPartnerAnalyticsTimeseries"
	RetrievePartnerAnalyticsResponseBodyTypeArrayOfPartnerAnalyticsTopLinks   RetrievePartnerAnalyticsResponseBodyType = "arrayOfPartnerAnalyticsTopLinks"
)

// RetrievePartnerAnalyticsResponseBody - Partner analytics data
type RetrievePartnerAnalyticsResponseBody struct {
	PartnerAnalyticsCount             *components.PartnerAnalyticsCount
	ArrayOfPartnerAnalyticsTimeseries []components.PartnerAnalyticsTimeseries
	ArrayOfPartnerAnalyticsTopLinks   []components.PartnerAnalyticsTopLinks

	Type RetrievePartnerAnalyticsResponseBodyType
}

func CreateRetrievePartnerAnalyticsResponseBodyPartnerAnalyticsCount(partnerAnalyticsCount components.PartnerAnalyticsCount) RetrievePartnerAnalyticsResponseBody {
	typ := RetrievePartnerAnalyticsResponseBodyTypePartnerAnalyticsCount

	return RetrievePartnerAnalyticsResponseBody{
		PartnerAnalyticsCount: &partnerAnalyticsCount,
		Type:                  typ,
	}
}

func CreateRetrievePartnerAnalyticsResponseBodyArrayOfPartnerAnalyticsTimeseries(arrayOfPartnerAnalyticsTimeseries []components.PartnerAnalyticsTimeseries) RetrievePartnerAnalyticsResponseBody {
	typ := RetrievePartnerAnalyticsResponseBodyTypeArrayOfPartnerAnalyticsTimeseries

	return RetrievePartnerAnalyticsResponseBody{
		ArrayOfPartnerAnalyticsTimeseries: arrayOfPartnerAnalyticsTimeseries,
		Type:                              typ,
	}
}

func CreateRetrievePartnerAnalyticsResponseBodyArrayOfPartnerAnalyticsTopLinks(arrayOfPartnerAnalyticsTopLinks []components.PartnerAnalyticsTopLinks) RetrievePartnerAnalyticsResponseBody {
	typ := RetrievePartnerAnalyticsResponseBodyTypeArrayOfPartnerAnalyticsTopLinks

	return RetrievePartnerAnalyticsResponseBody{
		ArrayOfPartnerAnalyticsTopLinks: arrayOfPartnerAnalyticsTopLinks,
		Type:                            typ,
	}
}

func (u *RetrievePartnerAnalyticsResponseBody) UnmarshalJSON(data []byte) error {

	var partnerAnalyticsCount components.PartnerAnalyticsCount = components.PartnerAnalyticsCount{}
	if err := utils.UnmarshalJSON(data, &partnerAnalyticsCount, "", true, true); err == nil {
		u.PartnerAnalyticsCount = &partnerAnalyticsCount
		u.Type = RetrievePartnerAnalyticsResponseBodyTypePartnerAnalyticsCount
		return nil
	}

	var arrayOfPartnerAnalyticsTimeseries []components.PartnerAnalyticsTimeseries = []components.PartnerAnalyticsTimeseries{}
	if err := utils.UnmarshalJSON(data, &arrayOfPartnerAnalyticsTimeseries, "", true, true); err == nil {
		u.ArrayOfPartnerAnalyticsTimeseries = arrayOfPartnerAnalyticsTimeseries
		u.Type = RetrievePartnerAnalyticsResponseBodyTypeArrayOfPartnerAnalyticsTimeseries
		return nil
	}

	var arrayOfPartnerAnalyticsTopLinks []components.PartnerAnalyticsTopLinks = []components.PartnerAnalyticsTopLinks{}
	if err := utils.UnmarshalJSON(data, &arrayOfPartnerAnalyticsTopLinks, "", true, true); err == nil {
		u.ArrayOfPartnerAnalyticsTopLinks = arrayOfPartnerAnalyticsTopLinks
		u.Type = RetrievePartnerAnalyticsResponseBodyTypeArrayOfPartnerAnalyticsTopLinks
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RetrievePartnerAnalyticsResponseBody", string(data))
}

func (u RetrievePartnerAnalyticsResponseBody) MarshalJSON() ([]byte, error) {
	if u.PartnerAnalyticsCount != nil {
		return utils.MarshalJSON(u.PartnerAnalyticsCount, "", true)
	}

	if u.ArrayOfPartnerAnalyticsTimeseries != nil {
		return utils.MarshalJSON(u.ArrayOfPartnerAnalyticsTimeseries, "", true)
	}

	if u.ArrayOfPartnerAnalyticsTopLinks != nil {
		return utils.MarshalJSON(u.ArrayOfPartnerAnalyticsTopLinks, "", true)
	}

	return nil, errors.New("could not marshal union type RetrievePartnerAnalyticsResponseBody: all fields are null")
}

type RetrievePartnerAnalyticsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Partner analytics data
	OneOf *RetrievePartnerAnalyticsResponseBody
}

func (o *RetrievePartnerAnalyticsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *RetrievePartnerAnalyticsResponse) GetOneOf() *RetrievePartnerAnalyticsResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
