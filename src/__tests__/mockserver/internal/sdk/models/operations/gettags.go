// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// GetTagsQueryParamSortBy - The field to sort the tags by.
type GetTagsQueryParamSortBy string

const (
	GetTagsQueryParamSortByName      GetTagsQueryParamSortBy = "name"
	GetTagsQueryParamSortByCreatedAt GetTagsQueryParamSortBy = "createdAt"
)

func (e GetTagsQueryParamSortBy) ToPointer() *GetTagsQueryParamSortBy {
	return &e
}
func (e *GetTagsQueryParamSortBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		fallthrough
	case "createdAt":
		*e = GetTagsQueryParamSortBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTagsQueryParamSortBy: %v", v)
	}
}

// GetTagsQueryParamSortOrder - The order to sort the tags by.
type GetTagsQueryParamSortOrder string

const (
	GetTagsQueryParamSortOrderAsc  GetTagsQueryParamSortOrder = "asc"
	GetTagsQueryParamSortOrderDesc GetTagsQueryParamSortOrder = "desc"
)

func (e GetTagsQueryParamSortOrder) ToPointer() *GetTagsQueryParamSortOrder {
	return &e
}
func (e *GetTagsQueryParamSortOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetTagsQueryParamSortOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTagsQueryParamSortOrder: %v", v)
	}
}

type IdsType string

const (
	IdsTypeStr        IdsType = "str"
	IdsTypeArrayOfStr IdsType = "arrayOfStr"
)

// Ids - IDs of tags to filter by.
type Ids struct {
	Str        *string
	ArrayOfStr []string

	Type IdsType
}

func CreateIdsStr(str string) Ids {
	typ := IdsTypeStr

	return Ids{
		Str:  &str,
		Type: typ,
	}
}

func CreateIdsArrayOfStr(arrayOfStr []string) Ids {
	typ := IdsTypeArrayOfStr

	return Ids{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *Ids) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = IdsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = IdsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Ids", string(data))
}

func (u Ids) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type Ids: all fields are null")
}

type GetTagsRequest struct {
	// The field to sort the tags by.
	SortBy *GetTagsQueryParamSortBy `default:"name" queryParam:"style=form,explode=true,name=sortBy"`
	// The order to sort the tags by.
	SortOrder *GetTagsQueryParamSortOrder `default:"asc" queryParam:"style=form,explode=true,name=sortOrder"`
	// The search term to filter the tags by.
	Search *string `queryParam:"style=form,explode=true,name=search"`
	// IDs of tags to filter by.
	Ids *Ids `queryParam:"style=form,explode=true,name=ids"`
	// The page number for pagination.
	Page *float64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// The number of items per page.
	PageSize *float64 `default:"100" queryParam:"style=form,explode=true,name=pageSize"`
}

func (g GetTagsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetTagsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetTagsRequest) GetSortBy() *GetTagsQueryParamSortBy {
	if o == nil {
		return nil
	}
	return o.SortBy
}

func (o *GetTagsRequest) GetSortOrder() *GetTagsQueryParamSortOrder {
	if o == nil {
		return nil
	}
	return o.SortOrder
}

func (o *GetTagsRequest) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

func (o *GetTagsRequest) GetIds() *Ids {
	if o == nil {
		return nil
	}
	return o.Ids
}

func (o *GetTagsRequest) GetPage() *float64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *GetTagsRequest) GetPageSize() *float64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

type GetTagsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of tags
	TagSchemas []components.TagSchema
}

func (o *GetTagsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetTagsResponse) GetTagSchemas() []components.TagSchema {
	if o == nil {
		return nil
	}
	return o.TagSchemas
}
