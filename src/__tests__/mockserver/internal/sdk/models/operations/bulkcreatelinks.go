// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type BulkCreateLinksTagIdsType string

const (
	BulkCreateLinksTagIdsTypeStr        BulkCreateLinksTagIdsType = "str"
	BulkCreateLinksTagIdsTypeArrayOfStr BulkCreateLinksTagIdsType = "arrayOfStr"
)

// BulkCreateLinksTagIds - The unique IDs of the tags assigned to the short link.
type BulkCreateLinksTagIds struct {
	Str        *string
	ArrayOfStr []string

	Type BulkCreateLinksTagIdsType
}

func CreateBulkCreateLinksTagIdsStr(str string) BulkCreateLinksTagIds {
	typ := BulkCreateLinksTagIdsTypeStr

	return BulkCreateLinksTagIds{
		Str:  &str,
		Type: typ,
	}
}

func CreateBulkCreateLinksTagIdsArrayOfStr(arrayOfStr []string) BulkCreateLinksTagIds {
	typ := BulkCreateLinksTagIdsTypeArrayOfStr

	return BulkCreateLinksTagIds{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *BulkCreateLinksTagIds) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = BulkCreateLinksTagIdsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = BulkCreateLinksTagIdsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for BulkCreateLinksTagIds", string(data))
}

func (u BulkCreateLinksTagIds) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type BulkCreateLinksTagIds: all fields are null")
}

type BulkCreateLinksTagNamesType string

const (
	BulkCreateLinksTagNamesTypeStr        BulkCreateLinksTagNamesType = "str"
	BulkCreateLinksTagNamesTypeArrayOfStr BulkCreateLinksTagNamesType = "arrayOfStr"
)

// BulkCreateLinksTagNames - The unique name of the tags assigned to the short link (case insensitive).
type BulkCreateLinksTagNames struct {
	Str        *string
	ArrayOfStr []string

	Type BulkCreateLinksTagNamesType
}

func CreateBulkCreateLinksTagNamesStr(str string) BulkCreateLinksTagNames {
	typ := BulkCreateLinksTagNamesTypeStr

	return BulkCreateLinksTagNames{
		Str:  &str,
		Type: typ,
	}
}

func CreateBulkCreateLinksTagNamesArrayOfStr(arrayOfStr []string) BulkCreateLinksTagNames {
	typ := BulkCreateLinksTagNamesTypeArrayOfStr

	return BulkCreateLinksTagNames{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *BulkCreateLinksTagNames) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = BulkCreateLinksTagNamesTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = BulkCreateLinksTagNamesTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for BulkCreateLinksTagNames", string(data))
}

func (u BulkCreateLinksTagNames) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type BulkCreateLinksTagNames: all fields are null")
}

type BulkCreateLinksTestVariants struct {
	URL        string  `json:"url"`
	Percentage float64 `json:"percentage"`
}

func (o *BulkCreateLinksTestVariants) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *BulkCreateLinksTestVariants) GetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Percentage
}

type RequestBody struct {
	// The destination URL of the short link.
	URL string `json:"url"`
	// The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
	Domain *string `json:"domain,omitempty"`
	// The short link slug. If not provided, a random 7-character slug will be generated.
	Key *string `json:"key,omitempty"`
	// The ID of the link in your database. If set, it can be used to identify the link in future API requests (must be prefixed with 'ext_' when passed as a query parameter). This key is unique across your workspace.
	ExternalID *string `json:"externalId,omitempty"`
	// The ID of the tenant that created the link inside your system. If set, it can be used to fetch all links for a tenant.
	TenantID *string `json:"tenantId,omitempty"`
	// The ID of the program the short link is associated with.
	ProgramID *string `json:"programId,omitempty"`
	// The ID of the partner the short link is associated with.
	PartnerID *string `json:"partnerId,omitempty"`
	// The prefix of the short link slug for randomly-generated keys (e.g. if prefix is `/c/`, generated keys will be in the `/c/:key` format). Will be ignored if `key` is provided.
	Prefix *string `json:"prefix,omitempty"`
	// Whether to track conversions for the short link. Defaults to `false` if not provided.
	TrackConversion *bool `json:"trackConversion,omitempty"`
	// Whether the short link is archived. Defaults to `false` if not provided.
	Archived *bool `json:"archived,omitempty"`
	// Deprecated: Use `dashboard` instead. Whether the short link's stats are publicly accessible. Defaults to `false` if not provided.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	PublicStats *bool `json:"publicStats,omitempty"`
	// The unique ID of the tag assigned to the short link. This field is deprecated â€“ use `tagIds` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	TagID *string `json:"tagId,omitempty"`
	// The unique IDs of the tags assigned to the short link.
	TagIds *BulkCreateLinksTagIds `json:"tagIds,omitempty"`
	// The unique name of the tags assigned to the short link (case insensitive).
	TagNames *BulkCreateLinksTagNames `json:"tagNames,omitempty"`
	// The unique ID existing folder to assign the short link to.
	FolderID *string `json:"folderId,omitempty"`
	// The comments for the short link.
	Comments *string `json:"comments,omitempty"`
	// The date and time when the short link will expire at.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// The URL to redirect to when the short link has expired.
	ExpiredURL *string `json:"expiredUrl,omitempty"`
	// The password required to access the destination URL of the short link.
	Password *string `json:"password,omitempty"`
	// Whether the short link uses Custom Social Media Cards feature. Defaults to `false` if not provided.
	Proxy *bool `json:"proxy,omitempty"`
	// The custom link preview title (og:title). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
	Title *string `json:"title,omitempty"`
	// The custom link preview description (og:description). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
	Description *string `json:"description,omitempty"`
	// The custom link preview image (og:image). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
	Image *string `json:"image,omitempty"`
	// The custom link preview video (og:video). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og
	Video *string `json:"video,omitempty"`
	// Whether the short link uses link cloaking. Defaults to `false` if not provided.
	Rewrite *bool `json:"rewrite,omitempty"`
	// The iOS destination URL for the short link for iOS device targeting.
	Ios *string `json:"ios,omitempty"`
	// The Android destination URL for the short link for Android device targeting.
	Android *string `json:"android,omitempty"`
	// Geo targeting information for the short link in JSON format `{[COUNTRY]: https://example.com }`.
	Geo *components.LinkGeoTargeting `json:"geo,omitempty"`
	// Allow search engines to index your short link. Defaults to `false` if not provided. Learn more: https://d.to/noindex
	DoIndex *bool `json:"doIndex,omitempty"`
	// The UTM source of the short link. If set, this will populate or override the UTM source in the destination URL.
	UtmSource *string `json:"utm_source,omitempty"`
	// The UTM medium of the short link. If set, this will populate or override the UTM medium in the destination URL.
	UtmMedium *string `json:"utm_medium,omitempty"`
	// The UTM campaign of the short link. If set, this will populate or override the UTM campaign in the destination URL.
	UtmCampaign *string `json:"utm_campaign,omitempty"`
	// The UTM term of the short link. If set, this will populate or override the UTM term in the destination URL.
	UtmTerm *string `json:"utm_term,omitempty"`
	// The UTM content of the short link. If set, this will populate or override the UTM content in the destination URL.
	UtmContent *string `json:"utm_content,omitempty"`
	// The referral tag of the short link. If set, this will populate or override the `ref` query parameter in the destination URL.
	Ref *string `json:"ref,omitempty"`
	// An array of webhook IDs to trigger when the link is clicked. These webhooks will receive click event data.
	WebhookIds []string `json:"webhookIds,omitempty"`
	// An array of A/B test URLs and the percentage of traffic to send to each URL.
	TestVariants []BulkCreateLinksTestVariants `json:"testVariants,omitempty"`
	// The date and time when the tests started.
	TestStartedAt *string `json:"testStartedAt,omitempty"`
	// The date and time when the tests were or will be completed.
	TestCompletedAt *string `json:"testCompletedAt,omitempty"`
}

func (o *RequestBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *RequestBody) GetDomain() *string {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *RequestBody) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *RequestBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *RequestBody) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *RequestBody) GetProgramID() *string {
	if o == nil {
		return nil
	}
	return o.ProgramID
}

func (o *RequestBody) GetPartnerID() *string {
	if o == nil {
		return nil
	}
	return o.PartnerID
}

func (o *RequestBody) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *RequestBody) GetTrackConversion() *bool {
	if o == nil {
		return nil
	}
	return o.TrackConversion
}

func (o *RequestBody) GetArchived() *bool {
	if o == nil {
		return nil
	}
	return o.Archived
}

func (o *RequestBody) GetPublicStats() *bool {
	if o == nil {
		return nil
	}
	return o.PublicStats
}

func (o *RequestBody) GetTagID() *string {
	if o == nil {
		return nil
	}
	return o.TagID
}

func (o *RequestBody) GetTagIds() *BulkCreateLinksTagIds {
	if o == nil {
		return nil
	}
	return o.TagIds
}

func (o *RequestBody) GetTagNames() *BulkCreateLinksTagNames {
	if o == nil {
		return nil
	}
	return o.TagNames
}

func (o *RequestBody) GetFolderID() *string {
	if o == nil {
		return nil
	}
	return o.FolderID
}

func (o *RequestBody) GetComments() *string {
	if o == nil {
		return nil
	}
	return o.Comments
}

func (o *RequestBody) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *RequestBody) GetExpiredURL() *string {
	if o == nil {
		return nil
	}
	return o.ExpiredURL
}

func (o *RequestBody) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *RequestBody) GetProxy() *bool {
	if o == nil {
		return nil
	}
	return o.Proxy
}

func (o *RequestBody) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *RequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *RequestBody) GetImage() *string {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *RequestBody) GetVideo() *string {
	if o == nil {
		return nil
	}
	return o.Video
}

func (o *RequestBody) GetRewrite() *bool {
	if o == nil {
		return nil
	}
	return o.Rewrite
}

func (o *RequestBody) GetIos() *string {
	if o == nil {
		return nil
	}
	return o.Ios
}

func (o *RequestBody) GetAndroid() *string {
	if o == nil {
		return nil
	}
	return o.Android
}

func (o *RequestBody) GetGeo() *components.LinkGeoTargeting {
	if o == nil {
		return nil
	}
	return o.Geo
}

func (o *RequestBody) GetDoIndex() *bool {
	if o == nil {
		return nil
	}
	return o.DoIndex
}

func (o *RequestBody) GetUtmSource() *string {
	if o == nil {
		return nil
	}
	return o.UtmSource
}

func (o *RequestBody) GetUtmMedium() *string {
	if o == nil {
		return nil
	}
	return o.UtmMedium
}

func (o *RequestBody) GetUtmCampaign() *string {
	if o == nil {
		return nil
	}
	return o.UtmCampaign
}

func (o *RequestBody) GetUtmTerm() *string {
	if o == nil {
		return nil
	}
	return o.UtmTerm
}

func (o *RequestBody) GetUtmContent() *string {
	if o == nil {
		return nil
	}
	return o.UtmContent
}

func (o *RequestBody) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *RequestBody) GetWebhookIds() []string {
	if o == nil {
		return nil
	}
	return o.WebhookIds
}

func (o *RequestBody) GetTestVariants() []BulkCreateLinksTestVariants {
	if o == nil {
		return nil
	}
	return o.TestVariants
}

func (o *RequestBody) GetTestStartedAt() *string {
	if o == nil {
		return nil
	}
	return o.TestStartedAt
}

func (o *RequestBody) GetTestCompletedAt() *string {
	if o == nil {
		return nil
	}
	return o.TestCompletedAt
}

type ResponseBodyType string

const (
	ResponseBodyTypeLinkSchema      ResponseBodyType = "LinkSchema"
	ResponseBodyTypeLinkErrorSchema ResponseBodyType = "LinkErrorSchema"
)

type ResponseBody struct {
	LinkSchema      *components.LinkSchema
	LinkErrorSchema *components.LinkErrorSchema

	Type ResponseBodyType
}

func CreateResponseBodyLinkSchema(linkSchema components.LinkSchema) ResponseBody {
	typ := ResponseBodyTypeLinkSchema

	return ResponseBody{
		LinkSchema: &linkSchema,
		Type:       typ,
	}
}

func CreateResponseBodyLinkErrorSchema(linkErrorSchema components.LinkErrorSchema) ResponseBody {
	typ := ResponseBodyTypeLinkErrorSchema

	return ResponseBody{
		LinkErrorSchema: &linkErrorSchema,
		Type:            typ,
	}
}

func (u *ResponseBody) UnmarshalJSON(data []byte) error {

	var linkErrorSchema components.LinkErrorSchema = components.LinkErrorSchema{}
	if err := utils.UnmarshalJSON(data, &linkErrorSchema, "", true, true); err == nil {
		u.LinkErrorSchema = &linkErrorSchema
		u.Type = ResponseBodyTypeLinkErrorSchema
		return nil
	}

	var linkSchema components.LinkSchema = components.LinkSchema{}
	if err := utils.UnmarshalJSON(data, &linkSchema, "", true, true); err == nil {
		u.LinkSchema = &linkSchema
		u.Type = ResponseBodyTypeLinkSchema
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ResponseBody", string(data))
}

func (u ResponseBody) MarshalJSON() ([]byte, error) {
	if u.LinkSchema != nil {
		return utils.MarshalJSON(u.LinkSchema, "", true)
	}

	if u.LinkErrorSchema != nil {
		return utils.MarshalJSON(u.LinkErrorSchema, "", true)
	}

	return nil, errors.New("could not marshal union type ResponseBody: all fields are null")
}

type BulkCreateLinksResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The created links
	ResponseBodies []ResponseBody
}

func (o *BulkCreateLinksResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *BulkCreateLinksResponse) GetResponseBodies() []ResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
