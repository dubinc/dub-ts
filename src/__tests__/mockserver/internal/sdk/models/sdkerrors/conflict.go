// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"fmt"
)

// ConflictCode - A short code indicating the error code returned.
type ConflictCode string

const (
	ConflictCodeConflict ConflictCode = "conflict"
)

func (e ConflictCode) ToPointer() *ConflictCode {
	return &e
}
func (e *ConflictCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "conflict":
		*e = ConflictCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConflictCode: %v", v)
	}
}

type ConflictError struct {
	// A short code indicating the error code returned.
	Code ConflictCode `json:"code"`
	// A human readable explanation of what went wrong.
	Message string `json:"message"`
	// A link to our documentation with more details about this error code
	DocURL *string `json:"doc_url,omitempty"`
}

func (o *ConflictError) GetCode() ConflictCode {
	if o == nil {
		return ConflictCode("")
	}
	return o.Code
}

func (o *ConflictError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *ConflictError) GetDocURL() *string {
	if o == nil {
		return nil
	}
	return o.DocURL
}

// Conflict - This response is sent when a request conflicts with the current state of the server.
type Conflict struct {
	Error_ ConflictError `json:"error"`
}

var _ error = &Conflict{}

func (e *Conflict) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
