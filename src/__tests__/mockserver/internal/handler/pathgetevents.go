// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/models/operations"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetEvents(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "listEvents[0]":
			dir.HandlerFunc("listEvents", testListEventsListEvents0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testListEventsListEvents0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := []operations.ListEventsResponseBody{
		operations.CreateListEventsResponseBodySale(
			components.SaleEvent{
				Event:     components.SaleEventEventSale,
				Timestamp: "<value>",
				EventID:   "<id>",
				EventName: "<value>",
				Link: components.SaleEventLink{
					ID:              "<id>",
					Domain:          "remorseful-concentration.biz",
					Key:             "<key>",
					URL:             "https://primary-paintwork.com/",
					TrackConversion: false,
					ExternalID:      types.String("<id>"),
					TenantID:        types.String("<id>"),
					ProgramID:       types.String("<id>"),
					PartnerID:       types.String("<id>"),
					Archived:        true,
					ExpiresAt:       "1748133366528",
					ExpiredURL:      types.String("https://memorable-overcoat.com"),
					Password:        types.String("COyVtOrvIw1vLIJ"),
					Proxy:           true,
					Title:           types.String("<value>"),
					Description:     types.String("cleverly blossom defiantly"),
					Image:           types.String("https://picsum.photos/seed/FhMx4/296/3347"),
					Video:           types.String("https://picsum.videos/seed/gk5Gr0OXM/244/1177"),
					Rewrite:         false,
					DoIndex:         false,
					Ios:             types.String("<value>"),
					Android:         types.String("<id>"),
					Geo:             &components.SaleEventGeo{},
					PublicStats:     false,
					TagID:           types.String("<id>"),
					Tags:            []components.TagSchema{},
					FolderID:        types.String("<id>"),
					WebhookIds: []string{
						"<value>",
					},
					Comments:        types.String("eek censor tenement commonly softly boo massive sorrowful aw strict behind along energetic oddball pasta thread vestment meanwhile likely up"),
					ShortLink:       "https://lucky-volleyball.biz",
					QrCode:          "https://discrete-omelet.net/",
					UtmSource:       types.String("<value>"),
					UtmMedium:       types.String("<value>"),
					UtmCampaign:     types.String("<value>"),
					UtmTerm:         types.String("<value>"),
					UtmContent:      types.String("<value>"),
					TestStartedAt:   types.String("<value>"),
					TestCompletedAt: types.String("<value>"),
					UserID:          types.String("<id>"),
					WorkspaceID:     "<id>",
					Clicks:          types.Float64(0),
					LastClicked:     "<value>",
					Leads:           types.Float64(0),
					Sales:           types.Float64(0),
					SaleAmount:      types.Float64(0),
					CreatedAt:       "1742101222652",
					UpdatedAt:       "1745952913664",
					ProjectID:       "<id>",
				},
				Click: components.SaleEventClick{
					ID:         "<id>",
					Timestamp:  "<value>",
					URL:        "https://watery-ecliptic.info/",
					Country:    "Somalia",
					City:       "Jammiecester",
					Region:     "<value>",
					Continent:  "Antarctica",
					Device:     "Mobile",
					Browser:    "Firefox",
					Os:         "BeOS",
					Referer:    "male-widow.info",
					RefererURL: "https://sticky-tune-up.net",
					Qr:         true,
					IP:         "144.175.252.47",
				},
				Customer: components.SaleEventCustomer{
					ID:         "<id>",
					ExternalID: "<id>",
					Name:       "<value>",
					CreatedAt:  "1716443409006",
				},
				Sale: components.Sale{
					Amount:           608798,
					InvoiceID:        nil,
					PaymentProcessor: components.PaymentProcessorShopify,
				},
				SaleAmount:       8727.59,
				InvoiceID:        "<id>",
				PaymentProcessor: "<value>",
				ClickID:          "<id>",
				LinkID:           "<id>",
				Domain:           "hateful-linseed.info",
				Key:              "<key>",
				URL:              "https://rowdy-cuckoo.org/",
				Continent:        "South America",
				Country:          "Georgia",
				City:             "Emanuelboro",
				Device:           "Mobile",
				Browser:          "Chrome",
				Os:               "WebOS",
				Qr:               3279.73,
				IP:               "16.166.150.33",
			},
		),
		operations.CreateListEventsResponseBodySale(
			components.SaleEvent{
				Event:     components.SaleEventEventSale,
				Timestamp: "<value>",
				EventID:   "<id>",
				EventName: "<value>",
				Link: components.SaleEventLink{
					ID:              "<id>",
					Domain:          "sparkling-hydrolyze.biz",
					Key:             "<key>",
					URL:             "https://closed-space.org/",
					TrackConversion: false,
					ExternalID:      types.String("<id>"),
					TenantID:        types.String("<id>"),
					ProgramID:       types.String("<id>"),
					PartnerID:       types.String("<id>"),
					Archived:        true,
					ExpiresAt:       "1764217330103",
					ExpiredURL:      types.String("https://unkempt-conversation.com/"),
					Password:        types.String("PMbm9rjvofBDkNA"),
					Proxy:           false,
					Title:           types.String("<value>"),
					Description:     types.String("after although while"),
					Image:           types.String("https://picsum.photos/seed/Z9T8xoAjNE/354/1907"),
					Video:           types.String("https://loremflickr.com/1063/1000?lock=6552935322217005"),
					Rewrite:         true,
					DoIndex:         true,
					Ios:             types.String("<value>"),
					Android:         types.String("<id>"),
					Geo:             &components.SaleEventGeo{},
					PublicStats:     true,
					TagID:           types.String("<id>"),
					Tags: []components.TagSchema{
						components.TagSchema{
							ID:    "<id>",
							Name:  "<value>",
							Color: components.ColorPink,
						},
					},
					FolderID:        types.String("<id>"),
					WebhookIds:      []string{},
					Comments:        types.String("clear-cut an mid aw disconnection which wetly typeface usable underneath putrefy ah aha joint careless whoever yesterday thorny unwelcome"),
					ShortLink:       "https://upbeat-sermon.org",
					QrCode:          "https://plump-horde.com",
					UtmSource:       types.String("<value>"),
					UtmMedium:       types.String("<value>"),
					UtmCampaign:     types.String("<value>"),
					UtmTerm:         types.String("<value>"),
					UtmContent:      types.String("<value>"),
					TestStartedAt:   types.String("<value>"),
					TestCompletedAt: types.String("<value>"),
					UserID:          types.String("<id>"),
					WorkspaceID:     "<id>",
					Clicks:          types.Float64(0),
					LastClicked:     "<value>",
					Leads:           types.Float64(0),
					Sales:           types.Float64(0),
					SaleAmount:      types.Float64(0),
					CreatedAt:       "1722349814880",
					UpdatedAt:       "1745946060353",
					ProjectID:       "<id>",
				},
				Click: components.SaleEventClick{
					ID:         "<id>",
					Timestamp:  "<value>",
					URL:        "https://lined-address.name/",
					Country:    "Moldova",
					City:       "Dachfield",
					Region:     "<value>",
					Continent:  "Africa",
					Device:     "Desktop",
					Browser:    "Firefox",
					Os:         "Symbian",
					Referer:    "fatherly-marketplace.biz",
					RefererURL: "https://bitter-platter.net/",
					Qr:         false,
					IP:         "adca:ffa9:74d9:bf7c:f4c5:d273:f1ed:be4f",
				},
				Customer: components.SaleEventCustomer{
					ID:         "<id>",
					ExternalID: "<id>",
					Name:       "<value>",
					CreatedAt:  "1743562522580",
				},
				Sale: components.Sale{
					Amount:           478369,
					InvoiceID:        nil,
					PaymentProcessor: components.PaymentProcessorCustom,
				},
				SaleAmount:       3702.47,
				InvoiceID:        "<id>",
				PaymentProcessor: "<value>",
				ClickID:          "<id>",
				LinkID:           "<id>",
				Domain:           "untimely-straw.net",
				Key:              "<key>",
				URL:              "https://definitive-cutover.com",
				Continent:        "Africa",
				Country:          "Angola",
				City:             "Ryleyport",
				Device:           "Desktop",
				Browser:          "Firefox",
				Os:               "Android",
				Qr:               9298.29,
				IP:               "250.239.120.52",
			},
		),
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
