// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPatchLinksBulk(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "bulkUpdateLinks[0]":
			dir.HandlerFunc("bulkUpdateLinks", testBulkUpdateLinksBulkUpdateLinks0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testBulkUpdateLinksBulkUpdateLinks0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", false); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := []components.LinkSchema{
		components.LinkSchema{
			ID:              "<id>",
			Domain:          "old-lox.org",
			Key:             "<key>",
			URL:             "https://angelic-cellar.org/",
			TrackConversion: types.Bool(false),
			ExternalID:      types.String("<id>"),
			TenantID:        types.String("<id>"),
			ProgramID:       types.String("<id>"),
			PartnerID:       types.String("<id>"),
			Archived:        types.Bool(false),
			ExpiresAt:       types.String("1754728710219"),
			ExpiredURL:      types.String("https://yellowish-vicinity.org/"),
			Password:        types.String("yMRdLF0naLtN5wK"),
			Proxy:           types.Bool(false),
			Title:           types.String("<value>"),
			Description:     types.String("aboard octave since"),
			Image:           types.String("https://loremflickr.com/2247/3258?lock=8204630610718424"),
			Video:           types.String("https://picsum.videos/seed/L7W1CltA/399/207"),
			Rewrite:         types.Bool(false),
			DoIndex:         types.Bool(false),
			Ios:             types.String("<value>"),
			Android:         types.String("<id>"),
			Geo:             &components.Geo{},
			PublicStats:     types.Bool(false),
			TagID:           types.String("<id>"),
			Tags: []components.TagSchema{
				components.TagSchema{
					ID:    "<id>",
					Name:  "<value>",
					Color: components.ColorGreen,
				},
				components.TagSchema{
					ID:    "<id>",
					Name:  "<value>",
					Color: components.ColorBlue,
				},
			},
			FolderID: types.String("<id>"),
			WebhookIds: []string{
				"<value>",
				"<value>",
				"<value>",
			},
			Comments:    types.String("psst instead even brr react busily both along whereas absent why round around round beneficial however safely defensive"),
			ShortLink:   "https://inborn-trick.biz",
			QrCode:      "https://scientific-alliance.biz/",
			UtmSource:   types.String("<value>"),
			UtmMedium:   types.String("<value>"),
			UtmCampaign: types.String("<value>"),
			UtmTerm:     types.String("<value>"),
			UtmContent:  types.String("<value>"),
			UserID:      types.String("<id>"),
			WorkspaceID: "<id>",
			Clicks:      types.Float64(0),
			LastClicked: types.String("<value>"),
			Leads:       types.Float64(0),
			Sales:       types.Float64(0),
			SaleAmount:  types.Float64(0),
			CreatedAt:   "1731220663759",
			UpdatedAt:   "1745179119984",
			ProjectID:   "<id>",
		},
		components.LinkSchema{
			ID:              "<id>",
			Domain:          "purple-secrecy.name",
			Key:             "<key>",
			URL:             "https://unwilling-godparent.biz/",
			TrackConversion: types.Bool(false),
			ExternalID:      types.String("<id>"),
			TenantID:        types.String("<id>"),
			ProgramID:       types.String("<id>"),
			PartnerID:       types.String("<id>"),
			Archived:        types.Bool(false),
			ExpiresAt:       types.String("1769744452954"),
			ExpiredURL:      types.String("https://weekly-formamide.name"),
			Password:        types.String("t3Ls5KHqWZvIT9U"),
			Proxy:           types.Bool(false),
			Title:           types.String("<value>"),
			Description:     types.String("tribe astonishing hm who blah verify soybean"),
			Image:           types.String("https://picsum.photos/seed/DauITRrHdo/3783/3955"),
			Video:           types.String("https://loremflickr.com/405/3655?lock=8436311567525016"),
			Rewrite:         types.Bool(false),
			DoIndex:         types.Bool(false),
			Ios:             types.String("<value>"),
			Android:         types.String("<id>"),
			Geo:             &components.Geo{},
			PublicStats:     types.Bool(false),
			TagID:           types.String("<id>"),
			Tags: []components.TagSchema{
				components.TagSchema{
					ID:    "<id>",
					Name:  "<value>",
					Color: components.ColorGreen,
				},
				components.TagSchema{
					ID:    "<id>",
					Name:  "<value>",
					Color: components.ColorPurple,
				},
				components.TagSchema{
					ID:    "<id>",
					Name:  "<value>",
					Color: components.ColorPink,
				},
			},
			FolderID: types.String("<id>"),
			WebhookIds: []string{
				"<value>",
			},
			Comments:    types.String("since cloudy dutiful heartache unto yippee custom footrest forenenst astonishing shore"),
			ShortLink:   "https://exotic-hydrolyze.name/",
			QrCode:      "https://giving-scale.name",
			UtmSource:   types.String("<value>"),
			UtmMedium:   types.String("<value>"),
			UtmCampaign: types.String("<value>"),
			UtmTerm:     types.String("<value>"),
			UtmContent:  types.String("<value>"),
			UserID:      types.String("<id>"),
			WorkspaceID: "<id>",
			Clicks:      types.Float64(0),
			LastClicked: types.String("<value>"),
			Leads:       types.Float64(0),
			Sales:       types.Float64(0),
			SaleAmount:  types.Float64(0),
			CreatedAt:   "1723835311463",
			UpdatedAt:   "1745135057342",
			ProjectID:   "<id>",
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
