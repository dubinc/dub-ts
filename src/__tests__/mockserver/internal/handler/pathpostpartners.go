// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/operations"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostPartners(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "createPartner[0]":
			dir.HandlerFunc("createPartner", testCreatePartnerCreatePartner0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testCreatePartnerCreatePartner0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", false); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &operations.CreatePartnerResponseBody{
		ID:               "<id>",
		Name:             "<value>",
		Email:            types.String("Loyal79@yahoo.com"),
		Image:            types.String("https://loremflickr.com/1/679?lock=7139282333236917"),
		Country:          types.String("Slovenia"),
		PaypalEmail:      types.String("<value>"),
		StripeConnectID:  types.String("<id>"),
		PayoutsEnabledAt: types.String("<value>"),
		CreatedAt:        "1732153215847",
		Status:           operations.StatusDeclined,
		ProgramID:        "<id>",
		TenantID:         types.String("<id>"),
		Links: []operations.CreatePartnerLink{
			operations.CreatePartnerLink{
				ID:         "<id>",
				Domain:     "harmful-disposer.com",
				Key:        "<key>",
				ShortLink:  "https://each-barracks.biz/",
				URL:        "https://blind-breastplate.name/",
				Clicks:     types.Float64(0),
				Leads:      types.Float64(0),
				Sales:      types.Float64(0),
				SaleAmount: types.Float64(0),
			},
			operations.CreatePartnerLink{
				ID:         "<id>",
				Domain:     "gripping-analogy.name",
				Key:        "<key>",
				ShortLink:  "https://distant-advertisement.name",
				URL:        "https://quick-witted-march.org/",
				Clicks:     types.Float64(0),
				Leads:      types.Float64(0),
				Sales:      types.Float64(0),
				SaleAmount: types.Float64(0),
			},
			operations.CreatePartnerLink{
				ID:         "<id>",
				Domain:     "kooky-kinase.biz",
				Key:        "<key>",
				ShortLink:  "https://considerate-pressure.org",
				URL:        "https://smooth-dash.info",
				Clicks:     types.Float64(0),
				Leads:      types.Float64(0),
				Sales:      types.Float64(0),
				SaleAmount: types.Float64(0),
			},
		},
		Clicks:     types.Float64(0),
		Leads:      types.Float64(0),
		Sales:      types.Float64(0),
		SaleAmount: types.Float64(0),
		Earnings:   types.Float64(0),
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusCreated)
	_, _ = w.Write(respBodyBytes)
}
