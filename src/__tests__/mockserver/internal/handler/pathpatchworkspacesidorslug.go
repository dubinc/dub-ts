// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPatchWorkspacesIDOrSlug(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "updateWorkspace[0]":
			dir.HandlerFunc("updateWorkspace", testUpdateWorkspaceUpdateWorkspace0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testUpdateWorkspaceUpdateWorkspace0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", false); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.WorkspaceSchema{
		ID:                "<id>",
		Name:              "<value>",
		Slug:              "<value>",
		Logo:              nil,
		InviteCode:        types.String("<value>"),
		Plan:              components.PlanAdvanced,
		StripeID:          types.String("<id>"),
		BillingCycleStart: 5971.29,
		PaymentFailedAt:   types.String("<value>"),
		StripeConnectID:   types.String("<id>"),
		TotalLinks:        3446.2,
		Usage:             9914.64,
		UsageLimit:        6276.9,
		LinksUsage:        4888.52,
		LinksLimit:        9840.08,
		SalesUsage:        540.62,
		SalesLimit:        8965.01,
		DomainsLimit:      4468.63,
		TagsLimit:         3115.07,
		FoldersUsage:      2494.4,
		FoldersLimit:      1395.79,
		UsersLimit:        7892.75,
		AiUsage:           8898.38,
		AiLimit:           3024.61,
		ConversionEnabled: true,
		DotLinkClaimed:    false,
		PartnersEnabled:   false,
		CreatedAt:         "1726415064687",
		Users:             []components.Users{},
		Domains: []components.Domains{
			components.Domains{
				Slug:     "acme.com",
				Primary:  types.Bool(false),
				Verified: types.Bool(false),
			},
			components.Domains{
				Slug:     "acme.com",
				Primary:  types.Bool(false),
				Verified: types.Bool(false),
			},
			components.Domains{
				Slug:     "acme.com",
				Primary:  types.Bool(false),
				Verified: types.Bool(false),
			},
		},
		Store: map[string]any{
			"key":  "<value>",
			"key1": "<value>",
			"key2": "<value>",
		},
		AllowedHostnames: []string{
			"dub.sh",
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
