// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/models/operations"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostLinksBulk(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "bulkCreateLinks[0]":
			dir.HandlerFunc("bulkCreateLinks", testBulkCreateLinksBulkCreateLinks0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testBulkCreateLinksBulkCreateLinks0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", false); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := []operations.ResponseBody{
		operations.CreateResponseBodyLinkErrorSchema(
			components.LinkErrorSchema{
				Error: "<value>",
				Code:  components.CodeConflict,
			},
		),
		operations.CreateResponseBodyLinkSchema(
			components.LinkSchema{
				ID:              "<id>",
				Domain:          "enlightened-sanity.info",
				Key:             "<key>",
				URL:             "https://flawed-plumber.name/",
				TrackConversion: types.Bool(false),
				ExternalID:      types.String("<id>"),
				TenantID:        types.String("<id>"),
				ProgramID:       types.String("<id>"),
				PartnerID:       types.String("<id>"),
				Archived:        types.Bool(false),
				ExpiresAt:       types.String("1765649140228"),
				ExpiredURL:      types.String("https://devoted-quit.name"),
				Password:        types.String("i6NXnrZ9O3zPrEC"),
				Proxy:           types.Bool(false),
				Title:           types.String("<value>"),
				Description:     types.String("ditch what outside monthly kielbasa psst finer aw although"),
				Image:           types.String("https://picsum.photos/seed/rlA3LwhK/1855/1563"),
				Video:           types.String("https://picsum.videos/seed/itt7gjdv/857/1825"),
				Rewrite:         types.Bool(false),
				DoIndex:         types.Bool(false),
				Ios:             types.String("<value>"),
				Android:         types.String("<id>"),
				Geo:             &components.Geo{},
				PublicStats:     types.Bool(false),
				TagID:           types.String("<id>"),
				Tags:            []components.TagSchema{},
				FolderID:        types.String("<id>"),
				WebhookIds: []string{
					"<value>",
					"<value>",
					"<value>",
				},
				Comments:    types.String("beyond ha since pike gadzooks outside cardboard clavicle even supposing what longingly"),
				ShortLink:   "https://haunting-membership.net",
				QrCode:      "https://pointless-freckle.info",
				UtmSource:   types.String("<value>"),
				UtmMedium:   types.String("<value>"),
				UtmCampaign: types.String("<value>"),
				UtmTerm:     types.String("<value>"),
				UtmContent:  types.String("<value>"),
				UserID:      types.String("<id>"),
				WorkspaceID: "<id>",
				Clicks:      types.Float64(0),
				LastClicked: types.String("<value>"),
				Leads:       types.Float64(0),
				Sales:       types.Float64(0),
				SaleAmount:  types.Float64(0),
				CreatedAt:   "1719150618562",
				UpdatedAt:   "1745174728823",
				ProjectID:   "<id>",
			},
		),
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
