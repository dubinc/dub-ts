// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPutPartnersLinksUpsert(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "upsertPartnerLink[0]":
			dir.HandlerFunc("upsertPartnerLink", testUpsertPartnerLinkUpsertPartnerLink0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testUpsertPartnerLinkUpsertPartnerLink0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", false); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.LinkSchema{
		ID:              "<id>",
		Domain:          "internal-teriyaki.name",
		Key:             "<key>",
		URL:             "https://snoopy-exasperation.name/",
		TrackConversion: types.Bool(false),
		ExternalID:      types.String("<id>"),
		TenantID:        types.String("<id>"),
		ProgramID:       types.String("<id>"),
		PartnerID:       types.String("<id>"),
		Archived:        types.Bool(false),
		ExpiresAt:       types.String("1749718681016"),
		ExpiredURL:      types.String("https://trim-stump.org/"),
		Password:        types.String("aeFj89Olng6LL82"),
		Proxy:           types.Bool(false),
		Title:           types.String("<value>"),
		Description:     types.String("next assail unblinking gulp doting selfishly resource poppy scent"),
		Image:           types.String("https://loremflickr.com/1169/3796?lock=7016484909038829"),
		Video:           types.String("https://loremflickr.com/476/1877?lock=724230151067151"),
		Rewrite:         types.Bool(false),
		DoIndex:         types.Bool(false),
		Ios:             types.String("<value>"),
		Android:         types.String("<id>"),
		Geo:             &components.Geo{},
		PublicStats:     types.Bool(false),
		TagID:           types.String("<id>"),
		Tags:            []components.TagSchema{},
		FolderID:        types.String("<id>"),
		WebhookIds: []string{
			"<value>",
		},
		Comments:    types.String("ick yippee unit train fashion up out er confound redevelop"),
		ShortLink:   "https://tense-interchange.com/",
		QrCode:      "https://uncommon-accelerator.net/",
		UtmSource:   types.String("<value>"),
		UtmMedium:   types.String("<value>"),
		UtmCampaign: types.String("<value>"),
		UtmTerm:     types.String("<value>"),
		UtmContent:  types.String("<value>"),
		UserID:      types.String("<id>"),
		WorkspaceID: "<id>",
		Clicks:      types.Float64(0),
		LastClicked: types.String("<value>"),
		Leads:       types.Float64(0),
		Sales:       types.Float64(0),
		SaleAmount:  types.Float64(0),
		CreatedAt:   "1742078907705",
		UpdatedAt:   "1745166837538",
		ProjectID:   "<id>",
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
