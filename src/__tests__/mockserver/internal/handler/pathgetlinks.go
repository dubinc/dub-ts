// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetLinks(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "getLinks[0]":
			dir.HandlerFunc("getLinks", testGetLinksGetLinks0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testGetLinksGetLinks0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := []components.LinkSchema{
		components.LinkSchema{
			ID:              "<id>",
			Domain:          "neglected-plastic.biz",
			Key:             "<key>",
			URL:             "https://crooked-overload.name/",
			TrackConversion: types.Bool(false),
			ExternalID:      types.String("<id>"),
			TenantID:        types.String("<id>"),
			ProgramID:       types.String("<id>"),
			PartnerID:       types.String("<id>"),
			Archived:        types.Bool(false),
			ExpiresAt:       types.String("1745756493614"),
			ExpiredURL:      types.String("https://breakable-bathrobe.net"),
			Password:        types.String("QCOyVtOrvIw1vLI"),
			Proxy:           types.Bool(false),
			Title:           types.String("<value>"),
			Description:     types.String("beside tromp worth reluctantly wound accompanist"),
			Image:           types.String("https://picsum.photos/seed/WT1tZJLp/3243/3827"),
			Video:           types.String("https://picsum.videos/seed/p2Pkp47W/118/2609"),
			Rewrite:         types.Bool(false),
			DoIndex:         types.Bool(false),
			Ios:             types.String("<value>"),
			Android:         types.String("<id>"),
			Geo:             &components.Geo{},
			PublicStats:     types.Bool(false),
			TagID:           types.String("<id>"),
			Tags: []components.TagSchema{
				components.TagSchema{
					ID:    "<id>",
					Name:  "<value>",
					Color: components.ColorGreen,
				},
				components.TagSchema{
					ID:    "<id>",
					Name:  "<value>",
					Color: components.ColorGreen,
				},
				components.TagSchema{
					ID:    "<id>",
					Name:  "<value>",
					Color: components.ColorBlue,
				},
			},
			FolderID:    types.String("<id>"),
			WebhookIds:  []string{},
			Comments:    types.String("commonly softly boo massive sorrowful aw strict behind along energetic oddball pasta thread vestment meanwhile likely up questionably forgery"),
			ShortLink:   "https://oblong-inspection.net",
			QrCode:      "https://spherical-gerbil.org/",
			UtmSource:   types.String("<value>"),
			UtmMedium:   types.String("<value>"),
			UtmCampaign: types.String("<value>"),
			UtmTerm:     types.String("<value>"),
			UtmContent:  types.String("<value>"),
			UserID:      types.String("<id>"),
			WorkspaceID: "<id>",
			Clicks:      types.Float64(0),
			LastClicked: types.String("<value>"),
			Leads:       types.Float64(0),
			Sales:       types.Float64(0),
			SaleAmount:  types.Float64(0),
			CreatedAt:   "1729312896017",
			UpdatedAt:   "1745200926259",
			ProjectID:   "<id>",
		},
		components.LinkSchema{
			ID:              "<id>",
			Domain:          "married-presume.net",
			Key:             "<key>",
			URL:             "https://reflecting-coast.info",
			TrackConversion: types.Bool(false),
			ExternalID:      types.String("<id>"),
			TenantID:        types.String("<id>"),
			ProgramID:       types.String("<id>"),
			PartnerID:       types.String("<id>"),
			Archived:        types.Bool(false),
			ExpiresAt:       types.String("1762998604262"),
			ExpiredURL:      types.String("https://writhing-conversation.com"),
			Password:        types.String("ZsCSHb4yMlkCXkK"),
			Proxy:           types.Bool(false),
			Title:           types.String("<value>"),
			Description:     types.String("overcook till boo ack solicit"),
			Image:           types.String("https://loremflickr.com/2989/2665?lock=5845099426147813"),
			Video:           types.String("https://picsum.videos/seed/breY1MLSO6/954/73"),
			Rewrite:         types.Bool(false),
			DoIndex:         types.Bool(false),
			Ios:             types.String("<value>"),
			Android:         types.String("<id>"),
			Geo:             &components.Geo{},
			PublicStats:     types.Bool(false),
			TagID:           types.String("<id>"),
			Tags: []components.TagSchema{
				components.TagSchema{
					ID:    "<id>",
					Name:  "<value>",
					Color: components.ColorBrown,
				},
				components.TagSchema{
					ID:    "<id>",
					Name:  "<value>",
					Color: components.ColorRed,
				},
			},
			FolderID: types.String("<id>"),
			WebhookIds: []string{
				"<value>",
			},
			Comments:    types.String("instead athwart before tattered gosh um what thump kettledrum configuration esteemed mysteriously legend absent brr"),
			ShortLink:   "https://well-documented-help.biz/",
			QrCode:      "https://untrue-lamp.info/",
			UtmSource:   types.String("<value>"),
			UtmMedium:   types.String("<value>"),
			UtmCampaign: types.String("<value>"),
			UtmTerm:     types.String("<value>"),
			UtmContent:  types.String("<value>"),
			UserID:      types.String("<id>"),
			WorkspaceID: "<id>",
			Clicks:      types.Float64(0),
			LastClicked: types.String("<value>"),
			Leads:       types.Float64(0),
			Sales:       types.Float64(0),
			SaleAmount:  types.Float64(0),
			CreatedAt:   "1737089022845",
			UpdatedAt:   "1745154734561",
			ProjectID:   "<id>",
		},
		components.LinkSchema{
			ID:              "<id>",
			Domain:          "stale-handful.com",
			Key:             "<key>",
			URL:             "https://lean-daughter.org",
			TrackConversion: types.Bool(false),
			ExternalID:      types.String("<id>"),
			TenantID:        types.String("<id>"),
			ProgramID:       types.String("<id>"),
			PartnerID:       types.String("<id>"),
			Archived:        types.Bool(false),
			ExpiresAt:       types.String("1756506134211"),
			ExpiredURL:      types.String("https://perfumed-marketplace.com/"),
			Password:        types.String("xsCzKbmqqqJnqbw"),
			Proxy:           types.Bool(false),
			Title:           types.String("<value>"),
			Description:     types.String("as so yet whenever rotating hygienic mid"),
			Image:           types.String("https://loremflickr.com/958/3484?lock=3072922795184569"),
			Video:           types.String("https://loremflickr.com/565/2800?lock=8555441928057420"),
			Rewrite:         types.Bool(false),
			DoIndex:         types.Bool(false),
			Ios:             types.String("<value>"),
			Android:         types.String("<id>"),
			Geo:             &components.Geo{},
			PublicStats:     types.Bool(false),
			TagID:           types.String("<id>"),
			Tags: []components.TagSchema{
				components.TagSchema{
					ID:    "<id>",
					Name:  "<value>",
					Color: components.ColorBlue,
				},
				components.TagSchema{
					ID:    "<id>",
					Name:  "<value>",
					Color: components.ColorPurple,
				},
				components.TagSchema{
					ID:    "<id>",
					Name:  "<value>",
					Color: components.ColorYellow,
				},
			},
			FolderID: types.String("<id>"),
			WebhookIds: []string{
				"<value>",
				"<value>",
			},
			Comments:    types.String("polished whether welcome deck gratefully for outfox pfft indeed phew rejigger overcoat when wonderful ugh before however fooey weakly"),
			ShortLink:   "https://muddy-nightlife.info/",
			QrCode:      "https://cloudy-tackle.net/",
			UtmSource:   types.String("<value>"),
			UtmMedium:   types.String("<value>"),
			UtmCampaign: types.String("<value>"),
			UtmTerm:     types.String("<value>"),
			UtmContent:  types.String("<value>"),
			UserID:      types.String("<id>"),
			WorkspaceID: "<id>",
			Clicks:      types.Float64(0),
			LastClicked: types.String("<value>"),
			Leads:       types.Float64(0),
			Sales:       types.Float64(0),
			SaleAmount:  types.Float64(0),
			CreatedAt:   "1722178659624",
			UpdatedAt:   "1745161083500",
			ProjectID:   "<id>",
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
