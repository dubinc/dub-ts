// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package assert

import (
	"fmt"
	"net/http"
	"net/url"
)

// ParameterHeaderValues verifies the request header parameter key has the
// expected multiple values. If an unexpected value is found, it will return an
// error with a diagnostic text body and which should cause the handler to
// return immediately.
func ParameterHeaderValues(req *http.Request, key string, expected []string) error {
	got := req.Header.Values(key)

	if len(got) == 0 {
		return fmt.Errorf(
			"missing expected header parameter %s which should be %v",
			key,
			expected,
		)
	}

	if len(got) != len(expected) {
		return fmt.Errorf(
			"expected header parameter %s to be %s, got: %v",
			key,
			expected,
			got,
		)
	}

	for index, expectedValue := range expected {
		if got[index] != expectedValue {
			return fmt.Errorf(
				"expected header parameter %s to be %v, got: %v",
				key,
				expected,
				got,
			)
		}
	}

	return nil
}

// ParameterPathValue verifies the request path parameter key has the expected
// value. If an unexpected value is found, it will return an error with
// a diagnostic text body and which should cause the handler to
// return immediately.
func ParameterPathValue(req *http.Request, key string, expected string) error {
	got := req.PathValue(key)

	if got != expected {
		return fmt.Errorf(
			"expected path parameter %s to be %s, got: %s",
			key,
			expected,
			got,
		)
	}

	return nil
}

// ParameterQueryValues verifies the request query parameter key has the
// expected multiple values. If an unexpected value is found, it will return an
// error with a diagnostic text body and which should cause the handler to
// return immediately.
func ParameterQueryValues(req *http.Request, key string, expected []string) error {
	queryValues, err := url.ParseQuery(req.URL.RawQuery)

	if err != nil {
		return fmt.Errorf("error parsing query parameters: %w", err)
	}

	got, ok := queryValues[key]

	if !ok || len(got) == 0 {
		return fmt.Errorf(
			"missing expected query parameter %s which should be %v",
			key,
			expected,
		)
	}

	if len(got) != len(expected) {
		return fmt.Errorf(
			"expected query parameter %s to be %s, got: %v",
			key,
			expected,
			got,
		)
	}

	for index, expectedValue := range expected {
		if got[index] != expectedValue {
			return fmt.Errorf(
				"expected query parameter %s to be %v, got: %v",
				key,
				expected,
				got,
			)
		}
	}

	return nil
}
