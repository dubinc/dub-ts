// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package assert

import (
	"errors"
	"fmt"
	"net/http"
	"strings"
)

// SecurityAuthorizationHeader verifies the request security Authorization
// header is present and has the expected HTTP Authorization scheme with a value
// if required. If a missing value or multiple values are found, it will
// return an error with a diagnostic text body and which should cause the
// handler to return immediately.
func SecurityAuthorizationHeader(req *http.Request, optional bool, httpAuthorizationScheme string) error {
	values := req.Header.Values("Authorization")

	if len(values) == 0 {
		if optional {
			return nil
		}

		return errors.New("missing expected Authorization header")
	}

	if len(values) > 1 {
		return fmt.Errorf("expected single Authorization header, got %d values", len(values))
	}

	got := values[0]

	if got == "" {
		// Should return error, even if optional, as that represents an errant
		// client implementation.
		return errors.New("expected non-empty Authorization header")
	}

	if httpAuthorizationScheme != "" && !strings.HasPrefix(got, httpAuthorizationScheme+" ") {
		return fmt.Errorf("expected HTTP Authorization scheme %s, got: %s", httpAuthorizationScheme, got)
	}

	return nil
}

// SecurityHeader verifies the request security header name is present and has
// a value if required. If a missing value or multiple values are found, it will
// return an error with a diagnostic text body and which should cause the
// handler to return immediately.
func SecurityHeader(req *http.Request, name string, optional bool) error {
	values := req.Header.Values(name)

	if len(values) == 0 {
		if optional {
			return nil
		}

		return fmt.Errorf("missing expected security header %s", name)
	}

	if len(values) > 1 {
		return fmt.Errorf("expected single security header for %s, got %d values", name, len(values))
	}

	got := values[0]

	if got == "" {
		// Should return error, even if optional, as that represents an errant
		// client implementation.
		return fmt.Errorf("expected non-empty security header %s", name)
	}

	return nil
}
