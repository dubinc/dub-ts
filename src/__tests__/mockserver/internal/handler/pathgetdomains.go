// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetDomains(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "listDomains[0]":
			dir.HandlerFunc("listDomains", testListDomainsListDomains0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testListDomainsListDomains0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := []components.DomainSchema{
		components.DomainSchema{
			ID:                      "<id>",
			Slug:                    "acme.com",
			Verified:                types.Bool(false),
			Primary:                 types.Bool(false),
			Archived:                types.Bool(false),
			Placeholder:             types.String("https://dub.co/help/article/what-is-dub"),
			ExpiredURL:              types.String("https://acme.com/expired"),
			NotFoundURL:             types.String("https://acme.com/not-found"),
			AssetLinks:              nil,
			AppleAppSiteAssociation: nil,
			Logo:                    types.String("<value>"),
			CreatedAt:               "1730924937145",
			UpdatedAt:               "1745174378027",
			RegisteredDomain: &components.RegisteredDomain{
				ID:        "<id>",
				CreatedAt: "1719270323225",
				ExpiresAt: "1752446520085",
			},
		},
		components.DomainSchema{
			ID:                      "<id>",
			Slug:                    "acme.com",
			Verified:                types.Bool(false),
			Primary:                 types.Bool(false),
			Archived:                types.Bool(false),
			Placeholder:             types.String("https://dub.co/help/article/what-is-dub"),
			ExpiredURL:              types.String("https://acme.com/expired"),
			NotFoundURL:             types.String("https://acme.com/not-found"),
			AssetLinks:              nil,
			AppleAppSiteAssociation: nil,
			Logo:                    types.String("<value>"),
			CreatedAt:               "1718486059629",
			UpdatedAt:               "1745170681526",
			RegisteredDomain: &components.RegisteredDomain{
				ID:        "<id>",
				CreatedAt: "1733829869588",
				ExpiresAt: "1745756494312",
			},
		},
		components.DomainSchema{
			ID:                      "<id>",
			Slug:                    "acme.com",
			Verified:                types.Bool(false),
			Primary:                 types.Bool(false),
			Archived:                types.Bool(false),
			Placeholder:             types.String("https://dub.co/help/article/what-is-dub"),
			ExpiredURL:              types.String("https://acme.com/expired"),
			NotFoundURL:             types.String("https://acme.com/not-found"),
			AssetLinks:              nil,
			AppleAppSiteAssociation: nil,
			Logo:                    types.String("<value>"),
			CreatedAt:               "1736318579872",
			UpdatedAt:               "1745123214586",
			RegisteredDomain: &components.RegisteredDomain{
				ID:        "<id>",
				CreatedAt: "1715826539230",
				ExpiresAt: "1766897667864",
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
