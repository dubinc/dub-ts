// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package logging

import (
	"bufio"
	"bytes"
	"net/http"
)

// OASOperationCall contains a singular OAS operation HTTP call.
type OASOperationCall struct {
	// The HTTP call number, as determined by the HTTP server. Starts at 1 and
	// incremented.
	call int64

	// The associated OAS operation to this call.
	operation *OASOperation

	// Parsed HTTP request contents. Cached on first use.
	request *http.Request

	// Raw HTTP request contents. Cached on first use.
	requestRaw []byte

	// Parsed HTTP response contents. Cached on first use.
	response *http.Response

	// Raw HTTP response contents. Cached on first use.
	responseRaw []byte

	// TODO: Add test identifier
}

// NewOASOperationCall creates a new OASOperationCall.
func NewOASOperationCall(operation *OASOperation, call int64) *OASOperationCall {
	return &OASOperationCall{
		call:      call,
		operation: operation,
	}
}

// RawRequest returns the raw HTTP request contents as dumped by
// [httputil.DumpRequest].
func (c *OASOperationCall) RawRequest() ([]byte, error) {
	if c.requestRaw != nil {
		return c.requestRaw, nil
	}

	requestRaw, err := c.operation.RawRequest(c.call)

	if err != nil {
		return nil, err
	}

	c.requestRaw = requestRaw

	return c.requestRaw, nil
}

// RawResponse returns the raw HTTP response contents as dumped by
// [httputil.DumpResponse].
func (c *OASOperationCall) RawResponse() ([]byte, error) {
	if c.responseRaw != nil {
		return c.responseRaw, nil
	}

	responseRaw, err := c.operation.RawResponse(c.call)

	if err != nil {
		return nil, err
	}

	c.responseRaw = responseRaw

	return c.responseRaw, nil
}

// Request returns the parsed HTTP request contents.
func (c *OASOperationCall) Request() (*http.Request, error) {
	if c.request != nil {
		return c.request, nil
	}

	requestRaw, err := c.RawRequest()

	if err != nil {
		return nil, err
	}

	request, err := http.ReadRequest(bufio.NewReader(bytes.NewReader(requestRaw)))

	if err != nil {
		return nil, err
	}

	c.request = request

	return c.request, nil
}

// Response returns the parsed HTTP response contents.
func (c *OASOperationCall) Response() (*http.Response, error) {
	if c.response != nil {
		return c.response, nil
	}

	responseRaw, err := c.RawResponse()

	if err != nil {
		return nil, err
	}

	response, err := http.ReadResponse(bufio.NewReader(bytes.NewReader(responseRaw)), nil)

	if err != nil {
		return nil, err
	}

	c.response = response

	return c.response, nil
}
