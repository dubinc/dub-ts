/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { Dub } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Folders Create Folder", async () => {
  const testHttpClient = createTestHTTPClient("createFolder");

  const dub = new Dub({
    httpClient: testHttpClient,
    token: "DUB_API_KEY",
  });

  const result = await dub.folders.create();
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: "<id>",
    name: "<value>",
    type: "default",
    accessLevel: null,
    linkCount: 0,
    createdAt: "1733799507447",
    updatedAt: "1745151840025",
  });
});

test("Folders List Folders", async () => {
  const testHttpClient = createTestHTTPClient("listFolders");

  const dub = new Dub({
    httpClient: testHttpClient,
    token: "DUB_API_KEY",
  });

  const result = await dub.folders.list();
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      id: "<id>",
      name: "<value>",
      type: "mega",
      accessLevel: null,
      linkCount: 0,
      createdAt: "1735057556063",
      updatedAt: "1745131125769",
    },
    {
      id: "<id>",
      name: "<value>",
      type: "default",
      accessLevel: null,
      linkCount: 0,
      createdAt: "1718486059564",
      updatedAt: "1745170681461",
    },
    {
      id: "<id>",
      name: "<value>",
      type: "mega",
      accessLevel: null,
      linkCount: 0,
      createdAt: "1714220493247",
      updatedAt: "1745177832784",
    },
  ]);
});

test("Folders Update Folder", async () => {
  const testHttpClient = createTestHTTPClient("updateFolder");

  const dub = new Dub({
    httpClient: testHttpClient,
    token: "DUB_API_KEY",
  });

  const result = await dub.folders.update("<id>");
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: "<id>",
    name: "<value>",
    type: "mega",
    accessLevel: null,
    linkCount: 0,
    createdAt: "1732497228221",
    updatedAt: "1745145546942",
  });
});

test("Folders Delete Folder", async () => {
  const testHttpClient = createTestHTTPClient("deleteFolder");

  const dub = new Dub({
    httpClient: testHttpClient,
    token: "DUB_API_KEY",
  });

  const result = await dub.folders.delete("<id>");
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: "<id>",
  });
});
