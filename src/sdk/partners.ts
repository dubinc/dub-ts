/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { partnersAnalytics } from "../funcs/partnersAnalytics.js";
import { partnersCreate } from "../funcs/partnersCreate.js";
import { partnersCreateLink } from "../funcs/partnersCreateLink.js";
import { partnersUpsertLink } from "../funcs/partnersUpsertLink.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Partners extends ClientSDK {
  /**
   * Create a new partner
   *
   * @remarks
   * Create a new partner for a program. If partner exists, automatically enrolls them.
   */
  async create(
    request?: operations.CreatePartnerRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreatePartnerResponseBody> {
    return unwrapAsync(partnersCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a link for a partner
   *
   * @remarks
   * Create a new link for a partner that is enrolled in your program.
   */
  async createLink(
    request?: operations.CreatePartnerLinkRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.LinkSchema> {
    return unwrapAsync(partnersCreateLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Upsert a link for a partner
   *
   * @remarks
   * Upsert a link for a partner that is enrolled in your program. If a link with the same URL already exists, return it (or update it if there are any changes). Otherwise, a new link will be created.
   */
  async upsertLink(
    request?: operations.UpsertPartnerLinkRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.LinkSchema> {
    return unwrapAsync(partnersUpsertLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve analytics for a partner
   *
   * @remarks
   * Retrieve analytics for a partner within a program. The response type vary based on the `groupBy` query parameter.
   */
  async analytics(
    request: operations.RetrievePartnerAnalyticsRequest,
    options?: RequestOptions,
  ): Promise<operations.RetrievePartnerAnalyticsResponseBody> {
    return unwrapAsync(partnersAnalytics(
      this,
      request,
      options,
    ));
  }
}
